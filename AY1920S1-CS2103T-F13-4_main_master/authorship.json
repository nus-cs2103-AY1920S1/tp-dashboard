[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "\u003d EzWatchList"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ":imagesDir: /docs/images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-F13-4/main[image:https://travis-ci.org/AY1920S1-CS2103T-F13-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-F13-4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-F13-4/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "++++"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003cimg src\u003d\"https://github.com/AY1920S1-CS2103T-F13-4/main/raw/master/docs/images/Ui.png\" alt\u003d\"Ui.png\" width\u003d\"900\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "++++"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "Tired of using multiple sources on the internet to keep track of all your movies and tv shows that you want to watch? EzWatchlist is a solution to your entertainment problems!"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "EzWatchlist is a desktop application for cinepliles to manage their favourite movies and tv series with a clean and intuitive interface."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "It was built for users who enjoy using a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d Features"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heze8"
        },
        "content": "Spending too much time looking for shows?"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heze8"
        },
        "content": "* Get recommendations for shows by using our https://ay1920s1-cs2103t-f13-4.github.io/main/UserGuide.html#movie-and-tv-show-recommendations[recommendations feature]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": "Forgetting the shows you want to watch?"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heze8"
        },
        "content": "* Keep track of shows with our inbuilt https://ay1920s1-cs2103t-f13-4.github.io/main/UserGuide.html#watchlist-page[watchlist.]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": "Curious about your watching habits?"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heze8"
        },
        "content": "* Check out our https://ay1920s1-cs2103t-f13-4.github.io/main/UserGuide.html#statistics-page[statistics page]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heze8"
        },
        "content": "More features"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heze8"
        },
        "content": "* Integrated with an online database of shows, allowing you to search and get information about shows."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heze8"
        },
        "content": "* Will work and function even without internet."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heze8"
        },
        "content": "* No installation required."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heze8"
        },
        "content": "* Auto-saves."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heze8"
        },
        "content": "Excited to use it? Head straight to our \u003c\u003cUserGuide#, User Guide\u003e\u003e for a more detailed explanation of our application."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "heze8"
        },
        "content": "* An Adressbook project this application was built upon created by https://se-education.org[SE-EDU initiative]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "heze8"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5], https://www.themoviedb.org/documentation/api[TMDB api], https://github.com/holgerbrandl/themoviedbapi[Java Wrapper of TMDB]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 2,
      "michelleykw": 2,
      "heze8": 37,
      "-": 16
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "mainClassName \u003d \u0027seedu.ezwatchlist.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heze8"
        },
        "content": "    maven {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heze8"
        },
        "content": "        url  \"https://jcenter.bintray.com\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": "    jcenter()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-swing\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-swing\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-swing\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "heze8"
        },
        "content": "    compile group: \u0027info.movito\u0027, name: \u0027themoviedbapi\u0027, version:\u00271.10\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "heze8"
        },
        "content": "    compile group: \u0027org.slf4j\u0027, name: \u0027slf4j-log4j12\u0027, version: \u00271.7.28\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "heze8"
        },
        "content": "    compile group: \u0027ch.qos.logback\u0027, name:\u0027logback-core\u0027, version: \u00271.0.9\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "heze8"
        },
        "content": "    archiveName \u003d \u0027ezwatchlist.jar\u0027"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "heze8"
        },
        "content": "        \u0027site-name\u0027: \u0027EzWatchlist\u0027,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "heze8"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103T-F13-3/main\u0027,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 3,
      "heze8": 12,
      "-": 150
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "Ezwatchlist was developed by a group of students based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d Caleb Goh"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "image::heze8.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "{empty} [https://github.com/heze8[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "Responsibilities: Movie API, Recommendations"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d Wu Xia"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "image::tswuxia.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": "{empty}[http://github.com/tswuxia[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "Role: Code Quality +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d Jared Chiang"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heze8"
        },
        "content": "image::jcjjjared.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heze8"
        },
        "content": "{empty}[http://github.com/jcjjjared[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": "Role: Integration +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": "Responsibilities: Main Logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d Wong Chuan Kai"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heze8"
        },
        "content": "image::wongchuankai.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heze8"
        },
        "content": "{empty}[http://github.com/wongchuankai[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heze8"
        },
        "content": "Role: Testing +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heze8"
        },
        "content": "Responsibilities: Component Logic"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d Michelle Yong"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heze8"
        },
        "content": "image::michelleykw.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heze8"
        },
        "content": "{empty}[http://github.com/michelleykw[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "heze8"
        },
        "content": "Role: Documentation +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "heze8"
        },
        "content": "Responsibilities: Search and Tag Logic"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "heze8": 25,
      "-": 29
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-F13-4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* *Email us* : You can also reach us at `ezwatchlist [at] gmail.com`"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "\u003d EzWatchlist - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F13-4/main.git"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "By: `Team CS2103T-F13-4`      Since: `Sept 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "heze8"
        },
        "content": "* \u003c\u003cDesign-API,*`API`*\u003e\u003e: Access data from an online database about Movies and Tv Shows."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "heze8"
        },
        "content": "Each of the five components"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "heze8"
        },
        "content": "* stores the Ezwatchlist data."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "// tag::markaswatched[]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d [Feature] Mark/unmark as watched feature"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "The watch feature allows users to mark or unmark shows as watched. It also allows users to keep track of the latest episode"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "of a TV series that they have watched."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "The mark/unmark as watched mechanism is facilitated by `WatchCommand` which can be found under the commands package."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "It extends `Command` and uses the `WatchCommandParser` to process the command entered by the user."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Given below is an example usage scenario and how the mark/unmark as watched mechanism works at each step."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Step 1. The user launches the application, and executes `watch 1 s/2 e/3` command to update the latest watched episode of the first show in the list."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Step 2. Entering the command calls `WatchListParser#parseCommand()`, which in turn returns a new `WatchCommandParser` and the `WatchCommandParser#parse()` command is called."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Step 3. A new `WatchCommand` is created, with the index of the show being parsed as a field of the `WatchCommand`. A new WatchShowDescriptor is also created to relay the episode number and season number to the WatchCommand object."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Step 4. The `WatchCommand#execute()` method is called, referencing the current `model`, and the show that is in the current `FilteredShowList` is referenced based off the current `model`."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "If the `index` is out of bounds, a new `CommandException` is thrown."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Step 5. A copy of the show is created through the use of `WatchCommand#createEditedShow()`, which determines the new total number of episodes watched from the given seasons and episodes."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "A new isWatched value of the show is also determined based on the number of episodes that are watched."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Step 6. The show in the current show list is updated to the newly created copy with the updated watched status and latest episode watched, and a `CommandResult` with the new watched status of the show is created."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "The following sequence diagram shows how the watch operation works:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "image::WatchSequenceDiagram.png[]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Creating a new WatchCommand instead of an altered EditCommand"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* **Alternative 1 (current choice):** Creating a new WatchCommand class for changing the \u0027watch\u0027 status of a show."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "** Pros: Enables for greater cohesion since there is a specific command for editing the \u0027watch\u0027 status of a show."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "** Cons: Requires longer code, and the code is also repetitive since its implementation is similar to that of the edit command"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* **Alternative 2:** Use the WatchCommandParser to create a new EditCommand object that edits the watch status of the show."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "** Pros: Less code repetition and shorter code in general."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "** Cons: This will mean that there is less cohesion of the code and perhaps greater dependencies since more classes depend on the EditCommand class."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "// end::markaswatched[]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "// tag::statistics[]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003d\u003d\u003d [Proposed] Statistics feature"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "The statistics feature is facilitated by `Statistics` object. It extends `Ezwatchlist` with a summary of the users\u0027 personal"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "preferences and footprint including the most watched genre, shows that you might have forgotten to watch, and the"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "recommendations generated for you. It is stored internally as an `Statistics` object containing a `ModelManager`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "* `Statistics#getFavouriteGenre()` -- Gives the genre that appears the most number of times in the list of watched shows."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "* `Statistics#getForgotten()` -- Gives the 3 shows that were added the earliest but have not been watched."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "* `Statistics#getRecommendation()` -- Gives 3 recommendations according to the watched shows."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "Given below is a usage scenario of a user checking his/her statistics page."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "Step 1. The user launches the application. The Statistics object will be initialized with ModelManager"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "containing the current watchlist and watched list. Behind the scenes, the 3 statistics will be calculated and the"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "statistics panel will be populated with the result."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "Step 2. The user clicks on the statistic button and sees the content."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "This is the sequence diagram of `getFavouriteGenre()`."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "image::getFavouriteGenre.png[]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "This is the sequence diagram of `getForgotten()`."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "image::getForgotten.png[]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "This is the sequence diagram of `getRecommendation()`."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "image::getRecommendation.png[]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "The following activity diagram summarizes the workflow of Statistics:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "image::activityDiagram.png[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How Statistics stores the watchlist and watched list"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "* **Alternative 1 (current choice):** Saves the whole ModelManager as a field."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "** Pros: Easy to implement and make use of."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "** Cons: More dependency on ModelManager."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "* **Alternative 2:** Saves the watchlist and watched list as fields respectively."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "** Pros: Less dependency on ModelManager."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "** Cons: Less potential functionality and the lists might not be up-to-date."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: When the results are calculated"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "* **Alternative 1 (current choice):** Calculate when the application starts and update when there are changes."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "** Pros: It appears more responsive in terms of navigating around the application."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "** Cons: Need to constantly recalculate and update the results."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "* **Alternative 2:** Calculate when the user navigate to Statistics panel."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "** Pros: Less calculation needed."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "** Cons: Appear less responsive."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "// end::statistics[]"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d Online Data"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "heze8"
        },
        "content": "We are using https://www.themoviedb.org/documentation/api[The Movie Database (TMDB)] to retrieve information on movies and tv shows."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "heze8"
        },
        "content": "All interactions with the third party library are facilitated by the interface `ApiInterface`. Methods in `ApiInterface` are the main"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "heze8"
        },
        "content": "way the application retrieves any online information from the database."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "heze8"
        },
        "content": "*Methods in ApiInterface*"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "heze8"
        },
        "content": "* `getMovieByName` : The method will return a list of movies in the database based on the name of the movie given"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "heze8"
        },
        "content": "* `getTvShowByName` : The method will return a list of tv shows in the database based on the name of the tv show given"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "heze8"
        },
        "content": "* `isConnected` : Checks if the application is connected online to the database"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "heze8"
        },
        "content": "`ApiManager` is an implementation of `ApiInterface` and is done by using a https://github.com/holgerbrandl/themoviedbapi[java wrapper] for the TMDB api implemented by Holger Brandl."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "heze8"
        },
        "content": "Allowing us to retrieve information in the java code."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "heze8"
        },
        "content": "Given below is an example of how the application might want to retrieve movie information through `ApiInterface`."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "heze8"
        },
        "content": "Step 1. First an instance of a class implementing `ApiInterface` has to be created for the methods to be called. When `ApiManager` is instantiated the class api"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "heze8"
        },
        "content": "key\u0027s is used to create a call to the TMDB API. All information retrieved must go through the class\u0027s api call."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "heze8"
        },
        "content": "Step 2. The method getMovieByName(\"Name Of Movie\") is called and the api call searches the for the movie in the database with the name given."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "heze8"
        },
        "content": "A list of wrapped movies is given back, which is then read and used to create new instances of our application\u0027s `Show` model with information wrapped in classes such as"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "heze8"
        },
        "content": "`Name`, `Description`, and `Actor`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "heze8"
        },
        "content": "Step 3. To retrieve an image from the database, an image url is downloaded to the computer. The class `ImageRetrieval` does this. An"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "heze8"
        },
        "content": "`ImageRetrieval` instance is created by the method for each image, and is downloaded to a root folder determined by `ImageRetrieval#defaultDirectory()`."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "heze8"
        },
        "content": "Step 4. A poster class is then created with the image path, to be used to load images in the application."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "heze8"
        },
        "content": "Step 5. With the list of movies returned, the application is given access to online information in a readable format."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "heze8"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "heze8"
        },
        "content": "At any point the application might fail due to the application not being connected to the internet. If that occurs a"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "heze8"
        },
        "content": "`OnlineConnectionException` is thrown for the application to handle."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "heze8"
        },
        "content": "The relationship between all the classes are shown in the following class diagram:"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "heze8"
        },
        "content": "image:ApiClassDiagram.png[]"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Why this implementation was chosen"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "heze8"
        },
        "content": "* **All API interactions would be in the API package and go through ApiInterface. **"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "heze8"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "heze8"
        },
        "content": "- The application wouldn\u0027t have to seek access to the database on their own. The interface should provide all the functionality needed."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "heze8"
        },
        "content": "- Follows the Single Responsibility Principle (SRP) that a module in the program should be encapsulated and have one repsponsibility."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d\u003d Aspect: Image retrieval implementation"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "heze8"
        },
        "content": "Images are retrieved through the `ImageRetrieval` class. Which downloads the image into the computer,"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "heze8"
        },
        "content": "wrapping a `Poster` class with the local path of the image, for the application to access images."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "heze8"
        },
        "content": "* ** Alternative 1 (current choice):** Download the image into the computer then access it locally on the computer."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "heze8"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "heze8"
        },
        "content": "*** Easier to keep track of images."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "heze8"
        },
        "content": "*** All images are retrieved the same way making it easier to implement showing the images."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "heze8"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "heze8"
        },
        "content": "*** All images shown are currently downloaded without being deleted, hence the amount of images downloaded can get unwieldy quickly, increasing"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "heze8"
        },
        "content": "amount of memory used."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "heze8"
        },
        "content": "* **Alternative 2:** Parse the online url to the application for them to access the image online when needed."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "heze8"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "heze8"
        },
        "content": "*** No need for the images to be downloaded allows less memory to be used by the application."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "heze8"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "heze8"
        },
        "content": "*** Everytime the image is viewed, the application has to retrieve it from online making it more intensive on the network."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "heze8"
        },
        "content": "*** If the internet connection fails, the image can no longer be viewed."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "heze8"
        },
        "content": "//end::ImageRetrieval[]"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d\u003d Aspect: Recommendations"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "heze8"
        },
        "content": "Recommendations are generated through the `RecommendationEngine` class in the API package. Currently,"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "heze8"
        },
        "content": "recommendations are retrieved through the `ApiInterface` implemented in the API package."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "heze8"
        },
        "content": "Given below is a _sequence diagram_ of how the current Statistics page\u0027s retrieves recommendations from the class."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "heze8"
        },
        "content": ".Sequence Diagram of getMovieRecommendations"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "heze8"
        },
        "content": "image:getMovieRecommendationsSequenceDiagram.png[]"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "heze8"
        },
        "content": "Step 1. First an instance of `RecommendationEngine` is created by passing in the list of movies the user has and the amount of recommendations to be given back."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "heze8"
        },
        "content": "Step 2. The method getMovieRecommendations is called in the object and the object will:"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "heze8"
        },
        "content": "* Check if the list is valid to generate."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "heze8"
        },
        "content": "* Parse the list to get the same online entry in the database."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "heze8"
        },
        "content": "* Retrieve recommendations for each entry in the list."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "heze8"
        },
        "content": "Step 3. The recommendations are then sorted based on the amount of occurrences in appears in the recommendations."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "heze8"
        },
        "content": "Step 4. The top entries limited by the amount of recommendations requested is passed back in a sorted list."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "heze8"
        },
        "content": "Step 5. With the list of movies returned, the application can then display the movie recommendations back to the user."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "heze8"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "heze8"
        },
        "content": "If no recommendations can be generated, a `NoRecommendationsExceptions` is thrown. Moreover, an"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "heze8"
        },
        "content": "`OnlineConnectionException` is still thrown when not connected to the internet."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "[[Implementation]]"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "\u003d\u003d\u003d [Feature] Search feature"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "The `searchCommand` extends `Command` and uses `SearchCommandParser` to process the command entered by the user."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "Given below is an example usage scenario and how the search mechanism behaves at each step."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "Step 1. The user launches the application and executes `search n/Joker` command to search for a show with the name \"Joker\"."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "Step 2. Entering the command calls SearchCommandParser#parse()."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "Step 3. A new `SearchCommand` is created, with the list containing the name of the show to be searched as a field of `SearchCommand`."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "Step 4. The `SearchCommand#execute()` method is called, referencing the current model."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "Step 5. The `SearchCommand#searchByName()` method is called, referencing the current model."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "Step 6. The `SearchCommand#addShowFromWatchListIfSameNameAs()` method is called, referencing the current model and name of search to be searched from the list of names."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "Step 7. The `Model#getShowIfHasName()` method is called and any show with the name to be searched is added to the `filteredShowList`."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "Step 8. The `SearchCommand#addShowToSearchResult()` method is called and shows from the `filteredShowList` is added to the `searchResult`."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "Step 9. The `SearchCommand#addShowFromOnlineIfSameNameAs()` method is also called, referencing the name of show to be searched from the list of names."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "If the user is not connected online, a new `OnlineConnectionException` is thrown."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "Step 10. The `SearchCommand#addOnlineMovieSearchedByNameToResults()` method is called, referencing the name of show to be searched."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "//The following sequence diagram shows how the search operation works:"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "//image::SearchSequenceDiagram.png[]"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "//_Figure 1: Sequence Diagram for `SearchCommand`_"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "The following activity diagram summarises the workflow of Search:"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "image::SearchActivityDiagram.png[]"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "_Figure 2: Activity Diagram of `SearchCommand`_"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "In Figure 2, the user first launches the app. After the user input a search command, the program runs and shows the list of shows found in the search page."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How `SearchCommand` takes in the information to be searched for"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "** Current choice: Takes in a hash map from `SearchCommandParser` and gets the list of information to be searched for."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "*** Pros: Easy to implement and make use of."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "*** Cons: Certain list might be redundant as there might have no information in them."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How Search searches for the shows"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "** Current choice: Checks if the user choose to search by name, actor or both, then filter them accordingly."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "*** Pros: Easy to implement and make use of."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "*** Cons: User has to input either a name or actor to be searched."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "*** Cons: Logic is repetitive when searching based on actor or name."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "\u003d\u003d\u003d [Feature] Add feature"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "The `AddCommand` extends `Command` and uses `AddCommandParser` to process the command entered by the user."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "There are two different ways of using add feature and both have different outcome."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "1. Adding show in the WatchList."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "2. Adding show found from online search."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "Given below is an example usage of scenario 1 and how the add mechanism behaves at each step."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "Step 1. The user launches the application and executes `add n/Joker...` command to add a show in the WatchList with the name \"Joker\"."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "Step 2. Entering the command calls AddCommandParser#parse()."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "Step 3. A new `AddCommand` is created, with the show to be added in AddCommand."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "Step 4. The `AddCommand#execute()` method is called, referencing the current model and add the show given by user to the `filteredShowList` found in model."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "The following activity diagram summarises the workflow of Add:"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "image::AddActivityDiagram.png[]"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "_Figure 3: Activity Diagram of `AddCommand`_"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "In Figure 3, the user first launches the app. After the user input a add command, the program runs and add the show input by user into WatchList."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How `AddCommand` executes"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "** Current choice: Create a show object and add it to a `filteredShowList` found in ModelManager."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "*** Pros: Easy to implement and make use of."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "*** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "Given below is an example usage of scenario 2 and how the add mechanism behaves at each step."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "Step 1. The user uses the search(Online) command and executes `add INDEX` command to add a show from search result page of INDEX in the WatchList."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "Step 2. Entering the command calls AddCommandParser#parse()."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "Step 3. A new `AddCommand` is created, with the show to be added in AddCommand."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "Step 4. The `AddCommand#execute()` method is called, referencing the current model and add the show given by user to the `searchList` of INDEX found in model."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "The following activity diagram summarises the workflow of Add:"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "image::AddActivityDiagram2.png[]"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "_Figure 4: Activity Diagram of `AddCommand`_"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "In Figure 4, User input search(online) command. User then input `add INDEX` command. Show of INDEX found in search result page is added to WatchList."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How `AddCommand` executes"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "** Current choice: Retrieve the show object found in `searchList` of INDEX from ModelManager and add it to `filteredShowList`."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "*** Pros: Easy to implement and make use of."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "*** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "* Users who are tidy and organised"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "* Forgetful person who has a need to keep track of what movies, tv series they would like to watch"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "* Tech-savvy users who prefer desktop apps over other types"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "* User can type fast"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "* User prefers typing over mouse input"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "* User is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "* Movie/TV series lover"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "*Value proposition*:"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "EZWatchList provides a unique, clean and simple way of organizing and keeping track of your watchlist. All in one solution to your problem."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* * *` |forgetful person | keep track of the shows to watch|I won’t forget about them."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* * *` |very neat and organised movie lover |can organise the movies I’ve watched in categories/groups | watch them again."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* * *` |As an organised person| sort the movies and tv shows into genres | easily find a show from a genre that I want to watch."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* * *` |As a movie lover |mark movies in the watchlist as “watched” | keep track of what I have watched"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* * *`| As a fickle person | delete a movie from the watchlist if I don’t feel like watching it anymore| my watchlist will not be cluttered with movies that I have no interest in watching anymore."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* * *` |Someone who loves keeping records | keep track of how many movies or tv series I have watched |"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* * *` |tech-savvy  |do any task as quickly as possible| experience is pleasant and quick."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* * *` | App user | categorize and search based on distinct things | everything is neat and pleasing."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* * *` | App user | track where I am specifically in the series | I can remember where I am for that show."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *`|movie lover who likes to think about the message conveyed in the movie  |I can note down some of my thoughts for every movie after watching |"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *` | a movie critic| can track my thoughts and criticism of movie easily | it is organised."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *` | a movie/drama lover who also likes music | can note down the name of the soundtrack in the movie in a place specially for that. |"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *`| a movie lover | rate a movie that I have watched | I can know what movies I liked to watch"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *`| a movie lover | can know about all the movies | I would be able to watch them in the cinemas when they are out."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *`| a movie lover | look up for shows to watch from the recommendations |I will not have to manually search online."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *`| a movie lover | I can search for movies that I have added to the watchlist| I can easily find the movie that I want to watch."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *`| looking for new movies| search for some recommendations| I can watch it when I am free."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *`| a movie lover | search for movies that I have added to the watchlist| easily find the movie that I want to watch."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *`| a movie lover | can keep track of the number of times I have watched a movie |I can find out which movie I liked watching the best."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *` | a movie lover |check the ratings of each movie I have watched |I can recommend them to my friends."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *`|a tv show addict | I can put my favourite shows in |  I can enjoy watching it next time."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *`| unorganised person | I can rank the movies that I want to watch into different priorities | I can easily know what are the movies that I desperately want to watch."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *` |unorganised person | can sort movies that I want to watch into the date they were added |I can clear the movies that have been lingering at the back of my mind the longest."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *` | does reviews | keep track of movies and write reviews for the show I have watched  |I can have a positive criticism."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *` | someone who forget to watch tv series/movies | I can have an alarm that alert me to watch videos on time.|"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *` |As someone who has a deadline to watch movies | I can plan and add deadlines to watch movies.|"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *`|As a lover of multiple mediums| I can combine all these different mediums in the same platform | I can keep track of everything in the same place."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *`| As a statistics lover| I can view the statistics of the shows I watched | I can gain insight of my viewing habits."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *`| forgetful person| I can add shows I’ve watched to see a virtual library of things I’ve completed| I can log it like a book in a bookcase."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *`| As an app user| I can see the date I’ve inputted the specific object| I can remember when I completed."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "(For all use cases below, the *System* is the `Ezwatchlist` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003d\u003d\u003d Use case: Add Movie"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "1.  User navigates to the main page"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "2.  User enters \u0027Add\u0027 command"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "3.  User enters the movie name"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "4.  Ezwatchlist will display a list of movies found"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "5.  User enters the index given by the list"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "6.  Ezwatchlist will add the movie to their watchlist"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "* 3a. No movie is found"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "** 3a1. User enter movie information himself."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "** 3a2. User saves the movie"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "* 5a. The given index is invalid."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "** 5a1. System shows an error message."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "Use case resumes at step 4."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003d\u003d\u003d Use case: Mark as watched"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "1.  User navigates to the main page"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "2.  User enters \u0027Watched\u0027 command giving the index of the item"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "3.  Ezwatchlist will mark that item as watched"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "* 2a. The given index is invalid."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "** 2a1. System shows an error message."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003d\u003d\u003d Use case: Search locally"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "1.  User navigates to the main page"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "2.  User enters \u0027search\u0027 command giving the name of the item"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "3.  Ezwatchlist will bring the user to a search page with items found in a list"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "4.  User enters View command of the index of the item."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "5.  Ezwatchlist will bring that item into details page"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "+"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "* 2a. The given name is not found."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "** 2a1. System shows an error message."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "+"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "* 4a. The given index is not valid."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "** 4a1. System shows an error message."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "+"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003d\u003d\u003d Use case: Edit item"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "1.  User navigates to the main page."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "2.  User enters \u0027edit\u0027 command giving the name of the item."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "3.  Ezwatchlist will bring the user to a details page of the item entered."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "4.  User edits the details of the item."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "5.  User saves the edits."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "+"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "* 2a. The given name is not found."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "** 2a1. System shows an error message."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "+"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003d\u003d\u003d Use case: Delete item"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "1.  User navigates to the page containing the item to be deleted."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "2.  User enters \u0027delete\u0027 command giving the name of the item."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "3.  Ezwatchlist asks for confirmation from the user."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "4.  User confirms."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "5.  Ezwatchlist deletes the item."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "+"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "* 2a. The given name is not found."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "** 2a1. System shows an error message."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "+"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "* 3a. User cancels the deletion."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "** Use case ends."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003d\u003d\u003d Use case: Statistics"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "1.  User navigates to the statistics page"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "2.  Ezwatchlist displays the information."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "+"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "heze8"
        },
        "content": ".  Should be able to hold up to 1000 movies in the watchlist without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "heze8"
        },
        "content": ".  The user interface should be intuitive enough for users who are not IT-savvy."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "heze8"
        },
        "content": ".  Compliance with data, security, copyright laws."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "heze8"
        },
        "content": ".  The application will be offline-friendly with online data being the only functionality missing."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "[[details-page]] Details page::"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "The page that shows the details of shows, which the user may then add it to the watchlist if interested."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "[[edit-page]] Edit page::"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "The page where the user can edit the shows that they have added."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "[[main-page]] Main Page / Watchlist page::"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "The default main page with the WatchList tab that contains a list of shows that the user wishes to watch"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "[[movies]] Movie::"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "A cinema film"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "[[progress-bar]] Progress Bar::"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "A visible bar for users to see how many episodes of TV Series have been watched"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "[[search-command]] Search command `search [keyword]`::"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "This command brings the user to a search page with keyword input"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "[[search-page]] Search page::"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "The page where the user searches for shows to be added or to view their information"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "[[show-index]] Show index::"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "The number reference for the show in the pages"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "[[shows]] Shows::"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "Movies or TV series"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "[[statistics-page]] Statistics page::"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "The page that shows the statistics of user, such as total number of movies / TV series watched"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "[[tag]] Tag::"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "A short remark about the show or user’s feelings towards the show"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "[[tv-series]] TV Series::"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "A television program which consists of several episodes that are broadcast in regular intervals"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "[[view-command]] View command `view [index]`::"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "This command brings the user to the details page of the show with the specified show index"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "[[watched-page]] Watched page::"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "The page where the user can access to view the list of shows indicated as watched"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "[[watchlist]] Watchlist::"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "The list of shows that the user wishes to watch in the future."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 127,
      "jcjjjared": 43,
      "michelleykw": 99,
      "tswuxia": 174,
      "heze8": 110,
      "-": 400
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d EzWatchlist - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ":toclevels: 3"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F13-4/main.git"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "By: `Team CS2103T-F13-4`      Since: `Sept 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "// tag::intro[]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": "Tired of using multiple sources on the internet to keep track of all your movies and tv shows that you want to watch? EzWatchlist is a solution to your entertainment problems!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "`EzWatchList` is an application is for cinephiles who *prefer to use a desktop for managing movies and tv shows*. More importantly, `EzWatchList` is *optimized for those who prefer to work with a Command Line Interface (CLI)* while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heze8"
        },
        "content": ".  If you can type fast, `EzWatchList` works faster than traditional GUI apps."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heze8"
        },
        "content": ".  Keep track of movies and tv shows that you plan to watch or have watched."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": ".  Access quick information about your favourite shows through our online database."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": ".  Discover your personal movie habits, with our statistics page."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heze8"
        },
        "content": ".  Can\u0027t find any good shows to watch? We will give you recommendations on what to watch based on your `EzWatchlist` usage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": "Already interested? Jump to \u003c\u003cQuick Start\u003e\u003e to quickly get started. Enjoy!"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d What else does EzWatchlist offer you?"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heze8"
        },
        "content": "* Integration with an online database of shows, allowing you to search and get information about shows."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heze8"
        },
        "content": "* Functions and works without internet."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heze8"
        },
        "content": "* No installations required."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heze8"
        },
        "content": "* Auto-saves all data."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heze8"
        },
        "content": "* Dual-purpose interface, command line interface for those who prefer typing and graphical for those who prefer using a mouse."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d How do I use EzWatchlist?"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "heze8"
        },
        "content": "EzWatchlist was built with ease in mind hence our interface reflects this design philosophy."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "heze8"
        },
        "content": ".EzWatchlist\u0027s graphical interface"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "heze8"
        },
        "content": "image::Ui.png[width\u003d\"900\"]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d\u003d Navigation"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "heze8"
        },
        "content": "EzWatchlist is split into four different pages:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "heze8"
        },
        "content": ". \u003c\u003cWatchlist Page, *Watchlist*\u003e\u003e, where shows you want to watch are added."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "heze8"
        },
        "content": ". \u003c\u003cWatched List, *Watchedlist*\u003e\u003e, where shows you have watched are located."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "heze8"
        },
        "content": ". \u003c\u003cSearch Page, *Search*\u003e\u003e, where you search for shows both online and offline."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "heze8"
        },
        "content": ". \u003c\u003cStatistics Page, *Statistics*\u003e\u003e, where information about your viewing habits are shown."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "heze8"
        },
        "content": "This pages are represented by the \u003c\u003cSidebar, *sidebar panel*\u003e\u003e shown visibly in Figure 1. Navigate between pages by using keyboard shortcuts kbd:[1], kbd:[2], kbd:[3], kbd:[4] respectively or"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "heze8"
        },
        "content": "through a button press on the graphical interface."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d\u003d Interaction"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "heze8"
        },
        "content": ".EzWatchlist\u0027s command line interface."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "heze8"
        },
        "content": "image::commandline.png[width\u003d\"900\"]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "heze8"
        },
        "content": "EzWatchlist uses \u003c\u003cUserCommands, Commands\u003e\u003e entered through the command line interface in figure 2 to interact with the application."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "heze8"
        },
        "content": "Typing a command into the interface and entering it (by pressing kbd:[Enter] or clicking `_Go!_`) is the main way of interaction in the application."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "heze8"
        },
        "content": "The following is an example of adding a movie into your watch list:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Steps to quickly add a movie"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "heze8"
        },
        "content": "* **`search`** `n/ip man` : Searched for movie named `ip man` in the offline and online database which will bring you to the search page automatically."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "heze8"
        },
        "content": ".Search page for \"ip man\"."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "heze8"
        },
        "content": "image::searchIpMan.png[width\u003d\u0027500\u0027]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "heze8"
        },
        "content": "* **`add`** `2` : Adds \"Ip Man\" (2008) shown in entry 2 in Figure 3 into your watchlist."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "heze8"
        },
        "content": ".Watchlist page after entry."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "heze8"
        },
        "content": "image::watchlistIpMan.png[width\u003d\u0027500\u0027]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "heze8"
        },
        "content": "And that\u0027s it. Our \u003c\u003cQuick Start, quick start guide\u003e\u003e will guide you to set up our application. If you like to learn more head straight into our \u003c\u003cFeatures, features guide\u003e\u003e for a run down on our major features, or"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "heze8"
        },
        "content": "go to our \u003c\u003cUserCommands, commands guide\u003e\u003e to learn more on our commands. Otherwise, if you\u0027re a developer and are interested to"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "heze8"
        },
        "content": "understand how each of our features were implemented, our \u003c\u003cDeveloperGuide#, developer guide\u003e\u003e breaks down each of our major components."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "heze8"
        },
        "content": "What are you waiting for? Start using `EzWatchlist` now!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ".  Download the latest `ezwatchlist.jar` link:https://github.com/AY1920S1-CS2103T-F13-4/main/releases[here]."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your watchlist."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "heze8"
        },
        "content": ".  Interact with `EzWatchlist` with \u003c\u003cUserCommands, commands\u003e\u003e in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* **`add`**`n/Titanic t/movie` : adds the `movie` named `Titanic` to the Watchlist."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "heze8"
        },
        "content": "* **`delete`**`3` : deletes the 3rd movie shown in either watch or watched page."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ".  Refer to \u003c\u003cUserCommands\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "heze8"
        },
        "content": "// end:: intro[]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d User-Interface"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d Watchlist Page"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "heze8"
        },
        "content": "The watchlist is the default page that is opened upon start-up of `EzWatchlist`."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "heze8"
        },
        "content": "It shows the user’s unwatched movies and television series."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "heze8"
        },
        "content": "The watchlist page also contains a command bar to allow the user to input commands."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "The user can navigate to this list by clicking the “Watched” tab on the side bar or by using the keyboard short-cut `1`."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "**Characteristics of the watchlist page:**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Movie/TV show poster"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Name of show"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Genres"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Actors"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Description of the show"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Running Time"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Last watched episode (For TV series that have been updated using the `watch` command)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Checkbox to indicate if the show has been watched"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "heze8"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d Watched List"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "The user has the option to view the list of shows that have been marked as watched in the watched list. The user can navigate to this list by clicking the “Watched” tab on the side bar or by using the keyboard short-cut `2`."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d Search Page"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "The user can navigate to the search page to find a specific movie or television by searching for its name. The user can navigate to this list by clicking the “Watched” tab on the side bar or by using the keyboard short-cut `3`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "The search function may require some time to load the data from the API."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "image::search_page.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d Statistics Page"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "The user can navigate to the statistics page to find a summary of his watching habits,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "preferences and history according to what is present in his lists."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "Examples include: movies he added but might have forgotten to watch,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "up to 3 most favourite genres of the user and recommendations etc."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "The statistics function may require some time to load the data from the API."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "The user can navigate to the statistics page to find a summary of his watching habits, preferences and history according to what is present in his lists. Examples include: Ten most recent movies he watched, ten favourite movies of the user etc. The user can navigate to this list by clicking the “Watched” tab on the side bar or by using the keyboard short-cut `4`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "image::statistics_page.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d Sidebar"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "heze8"
        },
        "content": "EzWatchlist gives users the ability to navigate easily through the **Watchlist, Watchedlist, Search page and Statistics pages** through the use of the graphical user interface at the left of the main page. Moreover, keyboard shortcuts kbd:[1], kbd:[2], kbd:[3], kbd:[4] bring you to each page respectively."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d\u003d Details Page (Coming in v2.0)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Upon clicking a movie or tv show title, a pop-up window will emerge, with a detailed view of the movie or tv show. This page provides the user with more information about the show, like the year, cast and ratings. The user also has the ability to edit the details here."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "heze8"
        },
        "content": "// tag::advancedfeatures[]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d Advanced Features"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d\u003d Parsing of Movie and Tv Show Information"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "heze8"
        },
        "content": "In EzWatchlist, an online database is accessed so that all the information about your favourite Movies and"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "heze8"
        },
        "content": "Television Shows is updated, informative, and concise. What this means for you is that:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "heze8"
        },
        "content": "* Posters of your EzWatchlist shows,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "heze8"
        },
        "content": "can be displayed in EzWatchlist\u0027s sleek dark interface."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "heze8"
        },
        "content": "* Moreover, your offline shows can be synced with this database allowing the application to fill in"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "heze8"
        },
        "content": "the minor details for you."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "heze8"
        },
        "content": "* Unsure of what actors played in your favourite movie? EzWatchlist will find that information for you."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "heze8"
        },
        "content": "****"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "heze8"
        },
        "content": "You don\u0027t need to do anything other than be connected to the internet. It is that easy!"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "heze8"
        },
        "content": "****"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d\u003d Movie and Tv Show Recommendations"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "heze8"
        },
        "content": "EzWatchlist has the ability to recommend Movies and TvShows to you based on"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "heze8"
        },
        "content": "your EzWatchlist usage. EzWatchlist will create your own personalized recommendations for you."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d How to get your recommendations"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "heze8"
        },
        "content": "1. First, make sure that you have added at least one  (offline or online) into `EzWatchlist` so that we can use that to generate recommendations for you."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "heze8"
        },
        "content": "2. Then head to the \u003c\u003cStatistics Page, Statistics Page\u003e\u003e by clicking kbd:[3] or pressing the `Statistics.` button on the"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "heze8"
        },
        "content": "in the interface."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "heze8"
        },
        "content": "3. Now your recommendations as seen in Figure 5 will be shown prominently on the bottom of the Statistics Page, with movie recommendations on the left, and Tv Series recommendations on the right."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "heze8"
        },
        "content": ".Recommendations shown in the Statistics Page."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "heze8"
        },
        "content": "image::recommendations.png[width\u003d\"900]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "heze8"
        },
        "content": "****"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "heze8"
        },
        "content": "Excited? Enter your statistics page to get started on your recommendations. You might"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "heze8"
        },
        "content": "just find your next favourite!"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "heze8"
        },
        "content": "****"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d\u003d Auto-Correct (Coming in v2.0)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "heze8"
        },
        "content": "EzWatchlist aims to provide a smooth experience for our typing users. All typing in EzWatchlist will be automatically"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "heze8"
        },
        "content": "corrected for you when typing in your commands."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "heze8"
        },
        "content": "****"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "heze8"
        },
        "content": "Say goodbye to typing errors!"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "heze8"
        },
        "content": "****"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "heze8"
        },
        "content": "// end::advancedfeatures[]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "[[UserCommands]]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d User Commands"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/SHOW_NAME t/SHOW_TYPE`, `SHOW_NAME` and `SHOW_TYPE` are parameters which can be used as `add n/The Angry Birds Movie 2 t/movie`."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Items in square brackets are optional e.g `n/SHOW_NAME t/SHOW_TYPE [s/DESCRIPTION]` can be used as `n/The Angry Birds Movie t/movie 2 d/Oscar-worthy` or as `n/The Angry Birds Movie t/movie`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[a/ACTOR]...` can be used as `{nbsp}` (i.e. 0 times), `a/Leonardo Di Carpio`, `a/Leonardo Di Carpio a/Christian Bale` etc."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/SHOW_NAME t/SHOW_TYPE`, `t/SHOW_TYPE n/SHOW_NAME` is also acceptable."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a show: `add`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Adds a show to the watchlist +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Format: `add n/SHOW_NAME t/SHOW_TYPE [d/DATE_OF_RELEASE] [w/WATCHED] [r/RUNNING_TIME] [s/DESCRIPTION] [a/ACTOR_NAME]...`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* `SHOW_NAME`, `DESCRIPTION` and `ACTOR_NAME` can be any words"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* `DATE_OF_RELEASE` must be in the format dd/MM/yyyy"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* `SHOW_TYPE` can only be \u0027movie\u0027 or \u0027tv\u0027"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* `WATCHED` can only be \u0027true\u0027 or \u0027false\u0027"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* `RUNNING_TIME` can be any number above 0"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "A show can have any number of actors (including 0)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* `add n/Titanic t/movie`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* `add n/Friends t/tv`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "* `add n/John Wick t/movie d/24 OCTOBER 2014 w/false r/101 s/An ex-hit-man comes out of retirement to track down the gangsters that killed his dog and took everything from him. a/Keanu Reeves`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "* `add n/Joker t/movie d/3 OCTOBER 2019 w/false r/122 s/In Gotham City, mentally-troubled comedian Arthur Fleck is disregarded and mistreated by society. He then embarks on a downward spiral of revolution and bloody crime. This path brings him face-to-face with his alter-ego: \"The Joker\". a/Joaquin Phoenix`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a show from search result page: `add`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "Adds a show from search result page after user has already search for show +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "Format: `add INDEX`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "This add command can only be used if user has already search for show using the search online command."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "* `add 2`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "\u003d\u003d\u003d\u003d Clear the WatchList: `clear`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "Clear the WatchList +"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d Mark/Unmark as watched : `watch`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "To mark an unwatched show in the watchlist as watched, use the command format listed below. +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Format: `watch INDEX [e/EPISODE_NUMBER] [s/SEASON_NUMBER]`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "*Example Usage:*"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "1. User wants to mark \"The Office\" as watched."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "image::WatchTheOffice.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "[start\u003d2]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "2. User enters `watch 1` into the command box in the watchlist tab."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "image::Watch.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "[start\u003d3]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "3. The show can now be viewed under the watched tab by clicking the watched tab or hitting the keyboard shortcut `2`."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "image::WatchedTheOffice.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Alternatively, users can click on the watched checkbox to toggle between whether a show is watched as indicated by the red arrow in the image below."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "image::TheOfficeWatchCommand.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "****"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* The `index` refers to the index number shown in the displayed watchlist. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Any number of the optional fields may be provided."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Having only the index of the show will mark/unmark the show as watched."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Having the index and the episode number of the show will update the cumulative number of episodes of the show that are watched."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Having the index and the season number of the show will update the cumulative number of seasons of the show that are watched."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Having the index, season number and the episode number of the show will update the last watched episode to be the indicated episode of the indicated season of the show."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Using the `watch` command on an already watched show will un-mark the show as watched."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* `watch 1` +"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Marks/un-marks the first show of the list as watched."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* `watch 2 e/20` +"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Marks the first 20 episodes of the second show of the list as watched."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* `watch 2 s/5` +"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Marks all episodes of the first 5 seasons of the second show as watched."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* `watch 3 s/5 e/2` +"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Marks all episodes up to and including the second episode of the fifth season of the third show in the list as watched."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a show\u0027s details : `edit`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Edits an existing show in the list +"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Format: `edit INDEX [n/SHOW_NAME] [d/DATE_OF_RELEASE] [w/WATCHED] [r/RUNNING_TIME] [s/DESCRIPTION] [a/ACTOR]...`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Edits the show at the specified `INDEX`. The index refers to the index number shown in the displayed watchlist. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* When editing actors, the existing actors of the show will be removed i.e adding of actors is not cumulative."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "* You can remove all the show\u0027s actors by typing `a/` without specifying any actors after it."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* `edit 1 n/Joker a/Joaquin Phoenix` +"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Edits the name and actor name of the 1st show in the list to be `Joker` and `Joaquin Phoenix` respectively."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* `edit 2 a/` +"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Clears all existing actors of the 2nd show in the list."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "\u003d\u003d\u003d\u003d Search for a show: `search`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "heze8"
        },
        "content": "Note: Search results will appear in the Search Page, click kbd:[3] to go straight to the search page."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "Searches for shows whose names contain any of the given keywords from the watchlist, watched list and online. +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "* by name: `search n/SHOW_NAME... [g/GENRE]... [a/ACTOR_NAME]... [o/FROM_ONLINE] [t/TYPE] [w/HAS_WATCHED]`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "* by genre: `search g/GENRE... [n/SHOW_NAME]... [a/ACTOR_NAME]... [o/FROM_ONLINE] [t/TYPE] [w/HAS_WATCHED]`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "* by actor (from watchlist): `search a/ACTOR_NAME... [n/SHOW_NAME]... [g/GENRE]... [t/TYPE] [w/HAS_WATCHED]`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "* The search is case insensitive. e.g \"avengers\" will match \"Avengers\""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "* The order of the keywords matter. e.g. \"Chris Evans\" will not match \"Evans Chris\""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "* Not only full words will be matched. e.g. \"Joke\" will also match with \"Joker\""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "* For `FROM_ONLINE` and `HAS_WATCHED`, only `yes`, `true`, `no` and `false` would be accepted."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "* When searching based on actor, only shows from the watchlist will be searched."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "* When searching based on genre online, only movies will be searched."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "* By name:"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "** `search n/Joker i/yes` +"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "Returns shows with the name \"Joker\" within the watchlist"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "** `search n/Avengers g/Science Fiction t/movie n/Spiderman` +"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "Returns movies with the name \"Avenger\" or \"Spiderman\" and movies with \"Science Fiction\" as genre"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "* By genre:"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "** `search g/Action t/movie` +"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "Returns movies with the genre \"Action\""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "* By actor:"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "** `search a/Tom w/no` +"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "Returns shows within the watchlist with actor named \"Tom\""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a show : `delete`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Deletes the specified show from the watchlist. +"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Deletes the show at the specified `INDEX`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* The index refers to the index number shown in the displayed watchlist."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* `delete 2` +"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Deletes the 2nd show in the watchlist."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* `search Angry` +"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Deletes the 1st show in the results of the `search` command."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "heze8"
        },
        "content": "EzWatchlist\u0027s data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "heze8"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous EzWatchlist folder."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* *Add* `add n/SHOW_NAME t/SHOW_TYPE [d/DATE_OF_RELEASE] [w/WATCHED] [r/RUNNING_TIME] [s/DESCRIPTION] [a/ACTOR_NAME]` +"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "e.g. `add n/John Wick t/movie d/24 OCTOBER 2014 w/false r/101 s/An ex-hit-man comes out of retirement to track down the gangsters that killed his dog and took everything from him. a/Keanu Reeves`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "* *Add from search result page* `add INDEX` +"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "e.g. `add 1`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "* *CLEAR* `clear`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* *Watch* : `watch INDEX [e/EPISODE_NUMBER] [s/SEASON_NUMBER]`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* *Edit* : `edit INDEX [n/SHOW_NAME] [d/DATE_OF_RELEASE] [w/WATCHED] [r/RUNNING_TIME] [s/DESCRIPTION] [a/ACTOR]...` +"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "e.g. `edit 2 n/John Wick a/Johnny Depp`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "* *Search*"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "** *by name* : `search n/SHOW_NAME... [g/GENRE]... [a/ACTOR_NAME]... [i/IS_INTERNAL] [t/TYPE] [w/IS_WATCH]` +"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "e.g. `search n/Joker i/yes` searches for shows with the name \u0027Joker\u0027 within the watchlist"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "** *by genre* `search g/GENRE... [n/SHOW_NAME]... [a/ACTOR_NAME]... [i/IS_INTERNAL] [t/TYPE] [w/IS_WATCH]` +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "e.g. `search g/Action t/movie` searches for movies with the genre \u0027Action\u0027"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "** *by actor from watchlist* `search a/ACTOR_NAME... [n/SHOW_NAME]... [g/GENRE]... [t/TYPE] [w/IS_WATCH]` +"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "e.g. `search a/Tom` searches from shows within the watchlist with actor named \u0027Tom\u0027"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* *Exit* : `exit`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 138,
      "wongchuankai": 18,
      "tswuxia": 10,
      "michelleykw": 32,
      "heze8": 133,
      "-": 105
    }
  },
  {
    "path": "docs/diagrams/WatchSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "participant \":WatchListParser\" as WatchListParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "participant \":WatchCommandParser\" as WatchCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "participant \"w:WatchCommand\" as WatchCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "[-\u003e LogicManager : execute(\"watch 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "LogicManager -\u003e WatchListParser : parseCommand(\"watch 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "activate WatchListParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "create WatchCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "WatchListParser -\u003e WatchCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "activate WatchCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "WatchCommandParser --\u003e WatchListParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "deactivate WatchCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "WatchListParser -\u003e WatchCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "activate WatchCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "create WatchCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "WatchCommandParser -\u003e WatchCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "activate WatchCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "WatchCommand --\u003e WatchCommandParser : w"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "deactivate WatchCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "WatchCommandParser --\u003e WatchListParser : w"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "deactivate WatchCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "WatchCommandParser -[hidden]-\u003e WatchListParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "destroy WatchCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "WatchListParser --\u003e LogicManager : w"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "deactivate WatchListParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "LogicManager -\u003e WatchCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "activate WatchCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "WatchCommand -\u003e Model : getFilteredShowList()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Model --\u003e WatchCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "WatchCommand -\u003e WatchCommand : createEditedShow(showToEdit)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "activate WatchCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "WatchCommand --\u003e WatchCommand"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "deactivate WatchCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "WatchCommand -\u003e Model : setShow(showToEdit, EditedShow)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Model --\u003e WatchCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "WatchCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "CommandResult --\u003e WatchCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "WatchCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "deactivate WatchCommand"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 80
    }
  },
  {
    "path": "docs/team/heze8.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d Caleb Goh - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d PROJECT: `Ezwatchlist`"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "---"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d 1. Introduction"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "The following Project Portfolio documents my contributions to the software project, `Ezwatchlist`."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "Which was a project my team of software engineering students and I decided to pursue for our Software Engineering project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "Our team were initially tasked with enhancing a basic command line interface (CLI) desktop application that functioned as an Adressbook."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "What this means is that the application focused on typing as the main mode of use, and had an existing rudimentary base of code already functioning."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "Ultimately, we made the decision to modify it into a management application for Movies and Tv Shows named `Ezwatchlist`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d 1.1 Overview"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "image::Ui.png[]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "Figure 1. The graphical interface for Ezwatchlist."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": "`Ezwatchlist` is an application that saves movies and television shows the user adds into a watchlist."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": "The user interacts with `Ezwatchlist` through typing commands or the graphical interface."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "This enhanced application boasts the following features:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heze8"
        },
        "content": ". Keep track of the movies and television shows that they planed to watch."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heze8"
        },
        "content": ". Keep track of the movies and television shows that they have watched."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": ". Allow them to update the episodes they are at each television show."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": ". Get information about their watching habits."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heze8"
        },
        "content": ". Get recommendations for movies and television shows."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heze8"
        },
        "content": "****"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": "Note the following symbols and formatting used in this document:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": "This symbol indicates important information."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heze8"
        },
        "content": "API - Application programming interface. A sort of interaction with applications through software intermediaries."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heze8"
        },
        "content": "undo"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heze8"
        },
        "content": "A grey highlight (called a mark-up) indicates that this is a command that can be inputted into the command line and executed by the application."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heze8"
        },
        "content": "VersionedAddressBook"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heze8"
        },
        "content": "Blue text with grey highlight indicates a component, class or object in the architecture"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heze8"
        },
        "content": "****"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heze8"
        },
        "content": "The following sections illustrate these enhancements in more detail, as well as the relevant documentation"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heze8"
        },
        "content": "I have added to the user and developer guides in relation to these enhancements."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d 2. Summary of contributions"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heze8"
        },
        "content": "This sections showcase my technical ability, This section shows a summary of my coding, documentation, and other helpful contributions to the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heze8"
        },
        "content": "team project."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heze8"
        },
        "content": "My main role was to design and write the codes for the integration with the application with an online database of movies and tv shows."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heze8"
        },
        "content": "This was highly integral due to the nature and vision of the application where information about movies and tv shows"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "heze8"
        },
        "content": "should be readily available to the user."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d *Major enhancement*:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "heze8"
        },
        "content": "Added the ability for the application to integrate with an *online database of movies and tv shows*."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "heze8"
        },
        "content": "*What it does*:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "heze8"
        },
        "content": ". Allows the user to see images in the application."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "heze8"
        },
        "content": ". Retrieve information about movies and tv shows."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "heze8"
        },
        "content": ". Search for movies and tv shows from a large up-to-date database."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "heze8"
        },
        "content": ". Access reviews, ratings, recommendations, collections of movies and tv shows, genre information, and much more."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "heze8"
        },
        "content": "*Justification*:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "heze8"
        },
        "content": "This feature improves the product significantly because a user should be encourage to use the application by providing"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "heze8"
        },
        "content": "appealing images, comprehensive information and up-to-date data."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "heze8"
        },
        "content": "*Highlights*:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "heze8"
        },
        "content": "This feature required a robust knowledge on how to set up third party libraries in a Java application."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "heze8"
        },
        "content": "Json conversion is also another key element when considering the API used."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "heze8"
        },
        "content": "Moreover, I had to integrate this external data with our own internal systems. Meaning my teammates had to use my implementations easily. Hence, data handling and conversion had to be designed in an understandable manner."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "heze8"
        },
        "content": "*Credits*:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "heze8"
        },
        "content": "We are using The Movie Database (TMDB) API to retrieve information on movies and tv shows. As well as"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "heze8"
        },
        "content": "using a java wrapper for the TMDB api implemented by Holger Brandl."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d *Minor enhancement*:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "heze8"
        },
        "content": "Added ability to *store and retrieve images* in the application."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "heze8"
        },
        "content": "** Justification: This feature improves the visual interface, and provides movies and tv shows a more potent identity compared to just words."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "heze8"
        },
        "content": "** Highlights: A lot of consideration had to"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "heze8"
        },
        "content": "be placed in the retrieval and presentation of images. I had to integrate the image portrayal with the `JavaFX`-based interface,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "heze8"
        },
        "content": "consider how to store images and retrieve them when needed."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d *Minor enhancement*:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "heze8"
        },
        "content": "Added ability to get *recommendations* based on the user\u0027s personal movies and tv shows."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "heze8"
        },
        "content": "** Justification: This feature improves the product because a user can gain the added benefit of getting more suggestions for Movies and Tv Shows, which"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "heze8"
        },
        "content": "makes the application more robust. Moreover, it improves the value of the application encouraging usage of the application."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "heze8"
        },
        "content": "** Highlights: This design for this enhancement had considerable thought into the efficiency of this feature due to the large amount of processing required from parsing the user\u0027s data."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "heze8"
        },
        "content": "** Credits: The Movie Database (TMDB) API"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "heze8"
        },
        "content": "*Code contributed*:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "heze8"
        },
        "content": "All of my contributions to the application can  be found in the following link: [https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003dheze8\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[My Code Contribution]]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "heze8"
        },
        "content": "[https://github.com[Test code]]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "heze8"
        },
        "content": "*Other contributions*:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "heze8"
        },
        "content": "Project management:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "heze8"
        },
        "content": "*** I am the Project lead, thus my job consisted of making sure the team coordinated, the overall vision of the application was reached, and handling all the issues that arose in the development."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "heze8"
        },
        "content": "*** Managed releases `v1.1` - `v1.3` (3 releases) on GitHub"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "heze8"
        },
        "content": "*** Managed and assigned the issues, milestones and project board on Github."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "heze8"
        },
        "content": "Enhancements to existing features:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "heze8"
        },
        "content": "*** Updated the application\u0027s model to integrate seamlessly with the external library\u0027s data. This meant that each internal model class had to be error-friendly due to the unpredictable manner of the online database."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "heze8"
        },
        "content": "*** Added more internal classes such as `Poster` and `Genre` to be used in the application. (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "heze8"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "heze8"
        },
        "content": "*** Helped to integrate the API code with the rest of the application."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "heze8"
        },
        "content": "Documentation:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "heze8"
        },
        "content": "*** Did cosmetic tweaks to our website. https://github.com[#14]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "heze8"
        },
        "content": "Community:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "heze8"
        },
        "content": "*** Reviewed Pull Request : https://github.com[#107], https://github.com[#30], https://github.com[#73], https://github.com[#51], https://github.com[#78]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "heze8"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class: https://github.com/AY1920S1-CS2103T-T11-3/main/issues[T11-3 team], https://github.com/nus-cs2103-AY1920S1/addressbook-level3/pull/20[F12-4 team]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "heze8"
        },
        "content": "Tools:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "heze8"
        },
        "content": "*** Integrated a third party library (TMDB) to the project (https://www.themoviedb.org/documentation/api[TMDB Api])"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "heze8"
        },
        "content": "*** Integrated a new Github plugin (Java wrapper) to the team repo."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "heze8"
        },
        "content": "*** Added a successfully merged pull request to the Java Wrapper we are using in our application to fix their issue of not supporting recommendations. (https://github.com/holgerbrandl/themoviedbapi/pull/111[Pull request merged])"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d 3. Contributions to the User Guide"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "heze8"
        },
        "content": "Our Ezwatchlist user guide consists of instructions to the user on how to use our application. Thus, the following showcase my ability to write to target user in an intuitive and understandable format."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "heze8"
        },
        "content": "The following is an excerpt from our Ezwatchlist User Guide, showing additions that I have"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "heze8"
        },
        "content": "made for the undo and redo features."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "heze8"
        },
        "content": "This section also contains an excerpt for the data file encryption feature that I have planned for the"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "heze8"
        },
        "content": "next version (v2.0) of OASIS. What I can do\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "heze8"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "heze8"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "heze8"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "heze8"
        },
        "content": "include::../UserGuide.adoc[tag\u003dintro]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "heze8"
        },
        "content": "include::../UserGuide.adoc[tag\u003dadvancedfeatures]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "heze8"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "heze8"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "heze8"
        },
        "content": "and the technical depth of my software engineering skills to the project._"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "heze8"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "heze8"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "heze8"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "heze8"
        },
        "content": "---"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "heze8"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "heze8": 168
    }
  },
  {
    "path": "docs/team/jcjjjared.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d Project Portfolio Page: EzWatchlist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ":codeLink: https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003djcjjjared\u0026tabRepo\u003dAY1920S1-CS2103T-F13-4%2Fmain%5Bmaster%5D"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "This document serves to show the various contributions Jared has made to the development of *EzWatchlist* in an understandable manner."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d More About The Project"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "EzWatchlist is a desktop application that allows users to keep track of movies and tv series that they want to watch or have watched."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "It was developed by a group of 5 students from the National University of Singapore taking the Software Engineering module including"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "myself under the premise that we had to either optimize or morph an existing AddressBook application. We chose the latter. Another"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "constraint was ensuring that the application had a command-line interface."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d Main Features"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Adding, editing and deleting Shows"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Keeping track of shows  that are watched"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Online search functionality"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Statistics about user\u0027s watchlist"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "This section provides a summary of my coding, documentation and other helpful contributions to EzWatchlist."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d Major Contributions"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Implemented of the *watch* feature for users to keep track of episodes of their tv series and movies watched"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "** The *watch* feature allows users to update the watch list if the show has been watched"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "** The watch feature enables users to keep track of shows that they have and have not watched that they can plan"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "out what they want to watch in the future"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "** The watch feature also enables users to keep track of the episodes in a TV series that have been watched"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d Minor Contributions"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Updating to the user and developer guides to make them more readable, including the use of diagrams and screenshots of the application"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Updating to EzWatchlist *Contact Us* page"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Writing of tests for EzWatchlist to reduce the possibility of bugs when using EzWatchlist"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Integrating of the features of EzWatchlist to improve the user-experience of the application"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "View code contributions link:codeLink[here]."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d Contributions to User Guide"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "This section serves to showcase my contributions to the User-Guide, as well as my ability to write"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "documentation for users in a concise and understandable manner"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d Mark/Unmark as watched : `watch`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "To mark an unwatched show in the watchlist as watched, use the command format listed below. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Format: `watch INDEX [e/EPISODE_NUMBER] [s/SEASON_NUMBER]`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "*Example Usage:*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "1. User wants to mark \"The Office\" as watched."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "image::WatchTheOffice.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "[start\u003d2]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "2. User enters `watch 1` into the command box in the watchlist tab."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "image::Watch1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "[start\u003d3]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "3. The show can now be viewed under the watched tab by clicking the watched tab or hitting the keyboard shortcut `1`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "image::WatchedTheOffice.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Alternatively, users can click on the watched checkbox to toggle between whether a show is watched as indicated by the red arrow in the image below."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "image::TheOfficeWatchCommand.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "****"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* The `index` refers to the index number shown in the displayed watchlist. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Any number of the optional fields may be provided."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Having only the index of the show will mark/unmark the show as watched."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Having the index and the episode number of the show will update the cumulative number of episodes of the show that are watched."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Having the index and the season number of the show will update the cumulative number of seasons of the show that are watched."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Having the index, season number and the episode number of the show will update the last watched episode to be the indicated episode of the indicated season of the show."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "****"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Using the `watch` command on an already watched show will un-mark the show as watched."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* `watch 1` +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Marks/un-marks the first show of the list as watched."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* `watch 2 e/20` +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Marks the first 20 episodes of the second show of the list as watched."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* `watch 2 s/5` +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Marks all episodes of the first 5 seasons of the second show as watched."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* `watch 3 s/5 e/2` +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Marks all episodes up to and including the second episode of the fifth season of the third show in the list as watched."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d Contributions to Developer Guide"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "This sections showcases my contribution to the EzWatchlist Developer guide for the `watch` function."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "// tag::markaswatched[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d [Feature] Mark/unmark as watched feature"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "The watch feature allows users to mark or unmark shows as watched. It also allows users to keep track of the latest episode"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "of a TV series that they have watched."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "The mark/unmark as watched mechanism is facilitated by `WatchCommand` which can be found under the commands package."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "It extends `Command` and uses the `WatchCommandParser` to process the command entered by the user."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Given below is an example usage scenario and how the mark/unmark as watched mechanism works at each step."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Step 1. The user launches the application, and executes `watch 1 s/2 e/3` command to update the latest watched episode of the first show in the list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Step 2. Entering the command calls `WatchListParser#parseCommand()`, which in turn returns a new `WatchCommandParser` and the `WatchCommandParser#parse()` command is called."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Step 3. A new `WatchCommand` is created, with the index of the show being parsed as a field of the `WatchCommand`. A new WatchShowDescriptor is also created to relay the episode number and season number to the WatchCommand object."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Step 4. The `WatchCommand#execute()` method is called, referencing the current `model`, and the show that is in the current `FilteredShowList` is referenced based off the current `model`."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "If the `index` is out of bounds, a new `CommandException` is thrown."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Step 5. A copy of the show is created through the use of `WatchCommand#createEditedShow()`, which determines the new total number of episodes watched from the given seasons and episodes."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "A new isWatched value of the show is also determined based on the number of episodes that are watched."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Step 6. The show in the current show list is updated to the newly created copy with the updated watched status and latest episode watched, and a `CommandResult` with the new watched status of the show is created."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "The following sequence diagram shows how the watch operation works:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "image::WatchSequenceDiagram.png[]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Creating a new WatchCommand instead of an altered EditCommand"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* **Alternative 1 (current choice):** Creating a new WatchCommand class for changing the \u0027watch\u0027 status of a show."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "** Pros: Enables for greater cohesion since there is a specific command for editing the \u0027watch\u0027 status of a show."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "** Cons: Requires longer code, and the code is also repetitive since its implementation is similar to that of the edit command"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* **Alternative 2:** Use the WatchCommandParser to create a new EditCommand object that edits the watch status of the show."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "** Pros: Less code repetition and shorter code in general."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "** Cons: This will mean that there is less cohesion of the code and perhaps greater dependencies since more classes depend on the EditCommand class."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "// end::markaswatched[]"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 138
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyWatchList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import seedu.ezwatchlist.model.WatchList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import seedu.ezwatchlist.statistics.Statistics;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import seedu.ezwatchlist.storage.JsonWatchListStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import seedu.ezwatchlist.storage.WatchListStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.ui.Ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.ui.UiManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    protected Statistics statistics;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing WatchList ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        WatchListStorage watchListStorage \u003d new JsonWatchListStorage(userPrefs.getWatchListFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        storage \u003d new StorageManager(watchListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        statistics \u003d new Statistics(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        ui \u003d new UiManager(logic, statistics);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s watchlist and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * The data from the sample watchlist will be used instead if {@code storage}\u0027s watchlist is not found,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * or an empty watchlist will be used instead if errors occur when reading {@code storage}\u0027s watchlist."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Optional\u003cReadOnlyWatchList\u003e watchListOptional;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        ReadOnlyWatchList initialData;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            watchListOptional \u003d storage.readWatchList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            if (!watchListOptional.isPresent()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample WatchList\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            initialData \u003d watchListOptional.orElseGet(SampleDataUtil::getSampleWatchList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty WatchList\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            initialData \u003d new WatchList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty WatchList\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            initialData \u003d new WatchList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty WatchList\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        logger.info(\"Starting WatchList \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping WatchList ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 39,
      "tswuxia": 9,
      "heze8": 1,
      "-": 138
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/api/exceptions/NoRecommendationsException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.api.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": " * Represents an error when RecommendationEngine fails to return a recommendation."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "public class NoRecommendationsException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public NoRecommendationsException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 11
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/api/exceptions/OnlineConnectionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.api.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": " * Represents an error when application fails to connect online to the API"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "public class OnlineConnectionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public OnlineConnectionException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "heze8": 12
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/api/model/ApiInterface.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.api.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.api.exceptions.NoRecommendationsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.api.exceptions.OnlineConnectionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.model.show.Genre;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.show.Movie;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.show.TvShow;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": " * Interface to retrieve information from online API."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": " * Methods used here will return the information for Movies and Tv Shows."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "public interface ApiInterface {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Returns a list of Movies from the API search method."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param name the name of the Movie that the user wants to search."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @exception OnlineConnectionException when the user is not connected to the internet."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "    List\u003cMovie\u003e getMovieByName(String name) throws OnlineConnectionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Returns a list of Tv Shows from the API search method."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param name the name of the Tv Show that the user wants to search."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @exception OnlineConnectionException when the user is not connected to the internet."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heze8"
        },
        "content": "    List\u003cTvShow\u003e getTvShowByName(String name) throws OnlineConnectionException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Retrieves a list of upcoming Movies in the API."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return a list of Movies that are upcoming from the API."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws OnlineConnectionException when not connected to the internet."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heze8"
        },
        "content": "    List\u003cMovie\u003e getUpcomingMovies() throws OnlineConnectionException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Retrieves a list of recommended Movies based on the list of Movies the user has."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param userMovies list of Movies that belongs to the user."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param noOfRecommendations Number of recommendations returned. The method will attempt to reach that number,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *                             it will act as an upper limit to the amount of Movies returned."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return list of Movies that are recommended to the user."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws OnlineConnectionException when not connected to the internet."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws NoRecommendationsException when no recommendations can be generated."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "heze8"
        },
        "content": "    List\u003cMovie\u003e getMovieRecommendations(List\u003cMovie\u003e userMovies, int noOfRecommendations)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "heze8"
        },
        "content": "            throws OnlineConnectionException, NoRecommendationsException;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Retrieves a list of recommended Tv Shows based on the list of Tv Shows the user has."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param userTvShows list of Tv Shows that belongs to the user."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param noOfRecommendations Number of recommendations returned. The method will attempt to reach that number,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *                             it will act as an upper limit to the amount of Tv Shows returned."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return list of Tv Shows that are recommended to the user."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws OnlineConnectionException when not connected to the internet."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws NoRecommendationsException when no recommendations can be generated."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "heze8"
        },
        "content": "    List\u003cTvShow\u003e getTvShowRecommendations(List\u003cTvShow\u003e userTvShows, int noOfRecommendations)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "heze8"
        },
        "content": "            throws OnlineConnectionException, NoRecommendationsException;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns a list of Tv Shows from the API search method."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param genreSet the set of genres that the user wants to search."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @throws OnlineConnectionException when not connected to the internet."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    //List\u003cTvShow\u003e getTvShowByGenre(Set\u003cGenre\u003e genreSet) throws OnlineConnectionException;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns a list of movies from the API search method."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param genreSet the set of genres that the user wants to search."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @throws OnlineConnectionException when not connected to the internet."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    List\u003cMovie\u003e getMovieByGenre(Set\u003cGenre\u003e genreSet) throws OnlineConnectionException;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Checks if the api is connected to the internet."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "heze8"
        },
        "content": "    static boolean isConnected() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michelleykw": 18,
      "heze8": 70
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/api/model/ApiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.api.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.TmdbApi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.TvResultsPage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.model.core.MovieResultsPage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.tools.MovieDbException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.api.exceptions.NoRecommendationsException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.api.exceptions.OnlineConnectionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.api.util.ApiUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.model.show.Genre;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.show.Movie;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.show.TvShow;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": " * Main class for the API to connect to the server"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "public class ApiManager implements ApiInterface {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": "    //API key is to connect with the TMDB server."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private static final String API_KEY \u003d \"44ed1d7975d7c699743229199b1fc26e\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private static final String CONNECTION_ERROR_MESSAGE \u003d \"Looks like you\u0027re not connected to the internet\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private TmdbApi apiCall;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Constructor for ApiMain object used to interact with the API."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws OnlineConnectionException when not connected to the internet."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public ApiManager() throws OnlineConnectionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": "            apiCall \u003d new TmdbApi(API_KEY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (MovieDbException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heze8"
        },
        "content": "            //when not connected to the internet"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heze8"
        },
        "content": "            notConnected();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Checks if the API is connected to the internet."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return true if connected to the API."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public static boolean isConnected() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heze8"
        },
        "content": "            new TmdbApi(API_KEY);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (MovieDbException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Helper function to call when not connected to the API."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws OnlineConnectionException when the method is called with an error message."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public static void notConnected() throws OnlineConnectionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "heze8"
        },
        "content": "        throw new OnlineConnectionException(CONNECTION_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Retrieves a list of upcoming movies in the API."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return a list of movies that are upcoming from the API."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws OnlineConnectionException when not connected to the internet."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public List\u003cMovie\u003e getUpcomingMovies() throws OnlineConnectionException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "heze8"
        },
        "content": "        ArrayList\u003cMovie\u003e movies \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "heze8"
        },
        "content": "            MovieResultsPage upcoming \u003d apiCall.getMovies().getUpcoming(null, null, null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "heze8"
        },
        "content": "            ApiUtil.extractMovies(movies, upcoming, apiCall);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return movies;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (MovieDbException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "heze8"
        },
        "content": "            notConnected();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return movies;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Retrieves the movies from the API by the string given."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param name the name of the movie that the user wants to search."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return a list of movies that are returned from the API search call."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws OnlineConnectionException when not connected to the internet."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public List\u003cMovie\u003e getMovieByName(String name) throws OnlineConnectionException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "heze8"
        },
        "content": "        ArrayList\u003cMovie\u003e movies \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "heze8"
        },
        "content": "            MovieResultsPage page \u003d apiCall.getSearch().searchMovie(name,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "heze8"
        },
        "content": "                    null, null, false, 1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "heze8"
        },
        "content": "            ApiUtil.extractMovies(movies, page, apiCall);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return movies;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (MovieDbException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "heze8"
        },
        "content": "            notConnected();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return movies;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Retrieves a list of recommended Movies based on the list of Movies the user has."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param userMovies list of Movies that belongs to the user."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param noOfRecommendations Number of recommendations returned. The method will attempt to reach that number,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *                             it will act as an upper limit to the amount of Movies returned."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return list of Movies that are recommended to the user."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws OnlineConnectionException when not connected to the internet."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws NoRecommendationsException when no recommendations can be generated."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public List\u003cMovie\u003e getMovieRecommendations(List\u003cMovie\u003e userMovies, int noOfRecommendations)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "heze8"
        },
        "content": "            throws OnlineConnectionException, NoRecommendationsException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "heze8"
        },
        "content": "            RecommendationEngine recommendation \u003d new RecommendationEngine(userMovies, null, apiCall);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return recommendation.getMovieRecommendations(noOfRecommendations);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (MovieDbException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "heze8"
        },
        "content": "            notConnected();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Retrieves a list of recommended Tv Shows based on the list of Tv Shows the user has."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param userTvShows list of Tv Shows that belongs to the user."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param noOfRecommendations Number of recommendations returned. The method will attempt to reach that number,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *                             it will act as an upper limit to the amount of Tv Shows returned."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return list of Tv Shows that are recommended to the user."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws OnlineConnectionException when not connected to the internet."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws NoRecommendationsException when no recommendations can be generated."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public List\u003cTvShow\u003e getTvShowRecommendations(List\u003cTvShow\u003e userTvShows, int noOfRecommendations)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "heze8"
        },
        "content": "            throws OnlineConnectionException, NoRecommendationsException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "heze8"
        },
        "content": "            RecommendationEngine recommendation \u003d new RecommendationEngine(null, userTvShows, apiCall);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return recommendation.getTvShowRecommendations(noOfRecommendations);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (MovieDbException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "heze8"
        },
        "content": "            notConnected();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Retrieves the tv shows from the API by the string given."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param name the name of the tv show that the user wants to search."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return a list of tv shows that are returned from the API search call."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws OnlineConnectionException when not connected to the internet."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public List\u003cTvShow\u003e getTvShowByName(String name) throws OnlineConnectionException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "heze8"
        },
        "content": "        ArrayList\u003cTvShow\u003e tvShows \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "heze8"
        },
        "content": "            TvResultsPage page \u003d apiCall.getSearch().searchTv(name, null, 1);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "heze8"
        },
        "content": "            ApiUtil.extractTvShows(tvShows, page, apiCall);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return tvShows;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (MovieDbException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "heze8"
        },
        "content": "            notConnected();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return tvShows;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /*public List\u003cTvShow\u003e getTvShowByGenre(Set\u003cGenre\u003e genreSet) throws OnlineConnectionException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        ArrayList\u003cTvShow\u003e tvShows \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            List\u003cinfo.movito.themoviedbapi.model.Genre\u003e genreList \u003d apiCall.getGenre().getGenreList(null);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            for (Genre genreSearched : genreSet) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                for (info.movito.themoviedbapi.model.Genre genreApi : genreList) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                    if (genreApi.getName().toLowerCase().contains(genreSearched.getGenreName().toLowerCase())) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                        int genreID \u003d genreApi.getId();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "heze8"
        },
        "content": "                        apiCall.getGenre().getGenreMovies()"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "heze8"
        },
        "content": "                        Discover discover \u003d new Discover();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "heze8"
        },
        "content": "                        discover.includeAdult(false).withGenres(genreID);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "heze8"
        },
        "content": "                        MovieResultsPage tvPage \u003d apiCall.getDiscover().getDiscover(discover);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                        ApiUtil.extractTvShows(tvShows, tvPage, apiCall);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            return tvShows;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        } catch (MovieDbException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            notConnected();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            return tvShows;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "heze8"
        },
        "content": "    */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns a list of movies from the API search method."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param genreSet the set of genres that the user wants to search."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @throws OnlineConnectionException when not connected to the internet."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public List\u003cMovie\u003e getMovieByGenre(Set\u003cGenre\u003e genreSet) throws OnlineConnectionException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        ArrayList\u003cMovie\u003e movies \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            List\u003cinfo.movito.themoviedbapi.model.Genre\u003e genreList \u003d apiCall.getGenre().getGenreList(null);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            for (Genre genreSearched : genreSet) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                for (info.movito.themoviedbapi.model.Genre genreApi : genreList) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                    if (genreApi.getName().toLowerCase().contains(genreSearched.getGenreName().toLowerCase())) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "heze8"
        },
        "content": "                        int genreId \u003d genreApi.getId();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "heze8"
        },
        "content": "                        MovieResultsPage moviePage \u003d apiCall.getGenre().getGenreMovies(genreId, null, 1,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "heze8"
        },
        "content": "                                true);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                        ApiUtil.extractMovies(movies, moviePage, apiCall);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            return movies;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        } catch (MovieDbException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            notConnected();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            return movies;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michelleykw": 44,
      "heze8": 176
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/api/model/ImageRetrieval.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.api.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static java.util.Objects.isNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.nio.file.FileAlreadyExistsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.TmdbApi;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.model.config.TmdbConfiguration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.tools.MovieDbException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.api.exceptions.OnlineConnectionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": " * A class to retrieve images from the internet to store in the user\u0027s cache."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tswuxia"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "public class ImageRetrieval {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ImageRetrieval.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private static final String DEFAULT_FILE_SIZE \u003d \"w300\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private static final String ROOT \u003d defaultDirectory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public static final String IMAGE_CACHE_LOCATION \u003d ROOT + File.separator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": "            + \"Ezwatchlist\" + File.separator + \"posters\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private String imageUrl;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private String formattedFileName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Creates an instance of a image retrieval used to download images online"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param tmdbApi the tmdbApi object used to get the url"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param filePath the url online to the image"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param fileName the name of the show"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws OnlineConnectionException when not connected to the internet"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public ImageRetrieval(TmdbApi tmdbApi, String filePath, String fileName)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heze8"
        },
        "content": "            throws OnlineConnectionException, IllegalArgumentException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heze8"
        },
        "content": "            if (!isNull(filePath)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heze8"
        },
        "content": "                TmdbConfiguration configuration \u003d tmdbApi.getConfiguration();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heze8"
        },
        "content": "                imageUrl \u003d configuration.getBaseUrl() + DEFAULT_FILE_SIZE + filePath;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heze8"
        },
        "content": "                String filterString \u003d fileName.replaceAll(\"[^A-Za-z0-9\\\\[\\\\]]\", \"_\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heze8"
        },
        "content": "                formattedFileName \u003d filterString + filePath.hashCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heze8"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "heze8"
        },
        "content": "                throw new IllegalArgumentException(\"Missing filepath\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (MovieDbException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "heze8"
        },
        "content": "            throw new OnlineConnectionException(\"Internet Connection failed at Image Retrieval\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Retrieves the default directory of the platform"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return the string path to the root folder"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "heze8"
        },
        "content": "    //adapted from"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "heze8"
        },
        "content": "    //https://stackoverflow.com/questions/6561172/find-directory-for-application-data-on-linux-and-macintosh"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "heze8"
        },
        "content": "    static String defaultDirectory() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "heze8"
        },
        "content": "        String os \u003d System.getProperty(\"os.name\").toLowerCase();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "heze8"
        },
        "content": "        if (os.contains(\"win\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return System.getenv(\"APPDATA\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } else if (os.contains(\"mac\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return System.getProperty(\"user.home\") + \"/Library/Application Support\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } else if (os.contains(\"nux\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Retrieves the image online by downloading it into the save folder"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return the string path of the file"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws OnlineConnectionException when not connected to the internet"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public String retrieveImage() throws OnlineConnectionException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "heze8"
        },
        "content": "            downloadImage();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return formattedFileName + \".png\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Returns the online url from this object instance."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return the online url"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public String getImageUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return imageUrl;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Downloads the image from the online url. Is a helper method."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws OnlineConnectionException when not connected online."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private void downloadImage() throws OnlineConnectionException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try (InputStream in \u003d new URL(imageUrl).openStream()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "heze8"
        },
        "content": "            File parent \u003d new File(IMAGE_CACHE_LOCATION);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "heze8"
        },
        "content": "            if (!parent.exists()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "heze8"
        },
        "content": "                parent.mkdirs();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "heze8"
        },
        "content": "            Path filepath \u003d Paths.get(IMAGE_CACHE_LOCATION + File.separator"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "heze8"
        },
        "content": "                    + formattedFileName + \".png\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "heze8"
        },
        "content": "            if (filepath.toFile().exists()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "heze8"
        },
        "content": "                throw new FileAlreadyExistsException(\"Duplicate image\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "heze8"
        },
        "content": "            Files.copy(in, filepath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (FileAlreadyExistsException f) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "heze8"
        },
        "content": "            logger.info(f.getMessage());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "heze8"
        },
        "content": "            logger.info(e.getMessage());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "heze8"
        },
        "content": "            throw new OnlineConnectionException(\"No internet connection at downloading image\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 7,
      "tswuxia": 2,
      "heze8": 119
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/api/model/RecommendationEngine.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.api.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static java.util.Map.Entry.comparingByValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static java.util.Objects.isNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "import javax.annotation.Nullable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.TmdbApi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.TmdbMovies;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.TmdbTV;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.TvResultsPage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.model.MovieDb;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.model.core.MovieResultsPage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.model.core.ResultsPage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.model.tv.TvSeries;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.tools.MovieDbException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.api.exceptions.NoRecommendationsException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.api.exceptions.OnlineConnectionException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.api.util.ApiUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.show.Movie;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.show.TvShow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": " * Class used to generate recommendations based on list that the user has. The recommendations are sorted based on the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heze8"
        },
        "content": " * likelihood that the recommendations are more suited to the user, with the best recommendation being the first entry"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heze8"
        },
        "content": " * in the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heze8"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": "public class RecommendationEngine {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private final List\u003cMovie\u003e userMovies;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private final List\u003cTvShow\u003e userTvShows;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private List\u003cInteger\u003e userMoviesId;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private List\u003cInteger\u003e userTvShowsId;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private final TmdbApi tmdbApi;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private HashMap\u003cInteger, Integer\u003e movieRecommendationOccurrences;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private HashMap\u003cInteger, Integer\u003e tvRecommendationOccurrences;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private List\u003cMovie\u003e movieRecommendations;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private List\u003cTvShow\u003e tvShowRecommendations;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Creates an instance of RecommendationEngine used to generate recommendations for the user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param movies @nullable the list of Movies the user has."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param tvShows @nullable the list of Tv Shows the user has."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param tmdbApi the Api call to retrieve online information."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public RecommendationEngine(@Nullable List\u003cMovie\u003e movies, @Nullable List\u003cTvShow\u003e tvShows, TmdbApi tmdbApi)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "heze8"
        },
        "content": "            throws IllegalArgumentException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "heze8"
        },
        "content": "        if (isNull(tmdbApi)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "heze8"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "heze8"
        },
        "content": "        userMovies \u003d movies;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "heze8"
        },
        "content": "        userTvShows \u003d tvShows;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "heze8"
        },
        "content": "        userMoviesId \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "heze8"
        },
        "content": "        userTvShowsId \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "heze8"
        },
        "content": "        this.tmdbApi \u003d tmdbApi;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "heze8"
        },
        "content": "        movieRecommendationOccurrences \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "heze8"
        },
        "content": "        tvRecommendationOccurrences \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "heze8"
        },
        "content": "        movieRecommendations \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "heze8"
        },
        "content": "        tvShowRecommendations \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Generates Movie recommendations, returning a sorted list of recommendations."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param noOfRecommendations the upper limit of recommendations returned."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return Sorted list of recommendations, with the best recommendation in the first entry."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws NoRecommendationsException thrown when unable to generate recommendations."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws OnlineConnectionException thrown when not connected to the internet."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public List\u003cMovie\u003e getMovieRecommendations(int noOfRecommendations)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "heze8"
        },
        "content": "            throws NoRecommendationsException, OnlineConnectionException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "heze8"
        },
        "content": "        if (movieRecommendations.size() !\u003d noOfRecommendations) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "heze8"
        },
        "content": "            validForRecommendations(isNull(userMovies), \"Movies from the user is null, unable to\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "heze8"
        },
        "content": "            validForRecommendations(userMovies.isEmpty(), \"No movies from the user to\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "heze8"
        },
        "content": "            parseUserMovies();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "heze8"
        },
        "content": "            filterRecommendations(true);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "heze8"
        },
        "content": "            sortMovieRecommendations(noOfRecommendations);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "heze8"
        },
        "content": "            validForRecommendations(movieRecommendationOccurrences.isEmpty(), \"Unable to\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return movieRecommendations;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Filters the recommendations by removing all of the user\u0027s movies and tv shows if present in the list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * This is to prevent recommending something the user already has."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param isMovie to filter the movie list or tv show list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private void filterRecommendations(boolean isMovie) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "heze8"
        },
        "content": "        List\u003cInteger\u003e idList \u003d isMovie ? userMoviesId : userTvShowsId;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "heze8"
        },
        "content": "        HashMap\u003cInteger, Integer\u003e recommendationOccurrences \u003d isMovie ? movieRecommendationOccurrences"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "heze8"
        },
        "content": "                : tvRecommendationOccurrences;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "heze8"
        },
        "content": "        for (Integer id : idList) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "heze8"
        },
        "content": "            recommendationOccurrences.remove(id);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Helper method to check if recommendations are valid."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param check the boolean check."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param prefix the prefix for the error message."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws NoRecommendationsException thrown if invalid."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private void validForRecommendations(boolean check, String prefix) throws NoRecommendationsException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "heze8"
        },
        "content": "        if (check) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "heze8"
        },
        "content": "            throw new NoRecommendationsException(prefix"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "heze8"
        },
        "content": "                    + \" generate recommendations\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Generates TV Shows recommendations, returning a sorted list of recommendations."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param noOfRecommendations the upper limit of recommendations returned."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return Sorted list of recommendations, with the best recommendation in the first entry."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws NoRecommendationsException thrown when unable to generate recommendations."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws OnlineConnectionException thrown when not connected to the internet."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public List\u003cTvShow\u003e getTvShowRecommendations(int noOfRecommendations)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "heze8"
        },
        "content": "            throws NoRecommendationsException, OnlineConnectionException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "heze8"
        },
        "content": "        if (tvShowRecommendations.size() !\u003d noOfRecommendations) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "heze8"
        },
        "content": "            validForRecommendations(isNull(userTvShows), \"TvShows from the user is null, unable to\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "heze8"
        },
        "content": "            validForRecommendations(userTvShows.isEmpty(), \"No TvShows from the user to\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "heze8"
        },
        "content": "            parseUserTvShows();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "heze8"
        },
        "content": "            filterRecommendations(false);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "heze8"
        },
        "content": "            sortTvShowRecommendations(noOfRecommendations);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "heze8"
        },
        "content": "            validForRecommendations(tvRecommendationOccurrences.isEmpty(), \"Unable to\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return tvShowRecommendations;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Sorts and adds the recommendations to the list of recommendations."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param noOfRecommendations the upper limit of recommendations."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private void sortMovieRecommendations(int noOfRecommendations) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "heze8"
        },
        "content": "        movieRecommendationOccurrences.entrySet().stream()"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "heze8"
        },
        "content": "                .sorted(comparingByValue())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "heze8"
        },
        "content": "                .limit(noOfRecommendations)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "heze8"
        },
        "content": "                .forEachOrdered(entry -\u003e movieRecommendations.add(ApiUtil.getMovie(tmdbApi, entry.getKey())));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Sorts and adds the recommendations to the list of recommendations."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param noOfRecommendations the upper limit of recommendations."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private void sortTvShowRecommendations(int noOfRecommendations) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "heze8"
        },
        "content": "        tvRecommendationOccurrences.entrySet().stream()"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "heze8"
        },
        "content": "                .sorted(comparingByValue())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "heze8"
        },
        "content": "                .limit(noOfRecommendations)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "heze8"
        },
        "content": "                .forEachOrdered(entry -\u003e tvShowRecommendations.add(ApiUtil.getTvShow(tmdbApi, entry.getKey())));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Parses the user\u0027s Tv Shows to get it\u0027s respective entry in the online database. A recommendation is then"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * retrieved and added to the map of recommendations based on the number of occurrences."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws OnlineConnectionException when not connected to the internet."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private void parseUserTvShows() throws OnlineConnectionException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "heze8"
        },
        "content": "            for (TvShow tvShow : userTvShows) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "heze8"
        },
        "content": "                String tvShowName \u003d tvShow.getName().showName;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "heze8"
        },
        "content": "                if (isInvalidName(tvShowName)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "heze8"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "heze8"
        },
        "content": "                }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "heze8"
        },
        "content": "                TvResultsPage tvDbs \u003d tmdbApi.getSearch().searchTv(tvShowName, null, 1);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "heze8"
        },
        "content": "                List\u003cTvSeries\u003e tvResults \u003d tvDbs.getResults();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "heze8"
        },
        "content": "                if (tvResults.isEmpty()) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "heze8"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "heze8"
        },
        "content": "                }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "heze8"
        },
        "content": "                int tvId \u003d tvResults.get(0).getId(); //retrieves the first Tv Show that matches the name."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "heze8"
        },
        "content": "                userTvShowsId.add(tvId); //adds the tv show id to a list so that a final filter can take place"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "heze8"
        },
        "content": "                TvSeries series \u003d tmdbApi.getTvSeries().getSeries(tvId, null, TmdbTV.TvMethod.recommendations);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "heze8"
        },
        "content": "                ResultsPage\u003cTvSeries\u003e recommendations \u003d series.getRecommendations();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "heze8"
        },
        "content": "                List\u003cTvSeries\u003e results \u003d recommendations.getResults();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "heze8"
        },
        "content": "                results.forEach((tvSeries) -\u003e addToRecommendations(tvSeries.getId(), false));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (MovieDbException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "heze8"
        },
        "content": "            ApiManager.notConnected();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Parses the user\u0027s Movies to get it\u0027s respective entry in the online database. A recommendation is then"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * retrieved and added to the map of recommendations based on the number of occurrences."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws OnlineConnectionException when not connected to the internet."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private void parseUserMovies() throws OnlineConnectionException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "heze8"
        },
        "content": "            for (Movie m : userMovies) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "heze8"
        },
        "content": "                String movieName \u003d m.getName().showName;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "heze8"
        },
        "content": "                if (isInvalidName(movieName)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "heze8"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "heze8"
        },
        "content": "                }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "heze8"
        },
        "content": "                MovieResultsPage movieDbs \u003d tmdbApi.getSearch()"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "heze8"
        },
        "content": "                        .searchMovie(movieName, null, null, true, 1);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "heze8"
        },
        "content": "                List\u003cMovieDb\u003e movieDbsResults \u003d movieDbs.getResults();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "heze8"
        },
        "content": "                if (movieDbsResults.isEmpty()) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "heze8"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "heze8"
        },
        "content": "                }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "heze8"
        },
        "content": "                int movieId \u003d movieDbsResults.get(0).getId(); //retrieves the first Movie that matches the name."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "heze8"
        },
        "content": "                userMoviesId.add(movieId); //adds the movie id to a list so that a final filter can take place"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "heze8"
        },
        "content": "                MovieDb movieDb \u003d tmdbApi.getMovies().getMovie(movieId, null, TmdbMovies.MovieMethod.recommendations);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "heze8"
        },
        "content": "                List\u003cMovieDb\u003e similarMovies \u003d movieDb.getRecommendations();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "heze8"
        },
        "content": "                if (!isNull(similarMovies)) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "heze8"
        },
        "content": "                    similarMovies.forEach((movie) -\u003e addToRecommendations(movie.getId(), true));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "heze8"
        },
        "content": "                }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (MovieDbException e) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "heze8"
        },
        "content": "            ApiManager.notConnected();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Checks if the name is invalid."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param showName the Name to be checked."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return true if invalid."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private boolean isInvalidName(String showName) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return showName.equals(Name.DEFAULT_NAME);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Adds an entry to the respective map. Increasing the occurrences if there is a duplicate."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param id the id of the Show."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param isMovie if the id belongs to a Movie."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private void addToRecommendations(int id, boolean isMovie) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "heze8"
        },
        "content": "        HashMap\u003cInteger, Integer\u003e showOccurrences \u003d"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "heze8"
        },
        "content": "                isMovie ? movieRecommendationOccurrences : tvRecommendationOccurrences;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "heze8"
        },
        "content": "        if (showOccurrences.containsKey(id)) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "heze8"
        },
        "content": "            Integer numberOfOccurrences \u003d showOccurrences.remove(id);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "heze8"
        },
        "content": "            showOccurrences.put(id, numberOfOccurrences + 1);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "heze8"
        },
        "content": "            showOccurrences.put(id, 1);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 257
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/api/util/ApiUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.api.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.TmdbApi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.TmdbMovies;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.TmdbTV;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.TmdbTvSeasons;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.TvResultsPage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.model.Credits;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.model.Genre;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.model.MovieDb;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.model.core.MovieResultsPage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.model.people.PersonCast;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.model.tv.TvEpisode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.model.tv.TvSeason;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.model.tv.TvSeries;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.api.exceptions.OnlineConnectionException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.api.model.ImageRetrieval;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.show.Date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.show.Description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.show.Episode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.show.IsWatched;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.show.Movie;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.show.Poster;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.show.RunningTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.show.TvShow;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heze8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heze8"
        },
        "content": " * Contains utility methods for extracting information from movies and tv shows."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heze8"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heze8"
        },
        "content": "public class ApiUtil {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Passes the movies from the movies page into the movies list with the new Movie model used in the application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param movies  list of movies to be added into."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param page    results from the API database."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param apiCall API call to retrieve more information."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws OnlineConnectionException when not connected to the internet."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public static void extractMovies(ArrayList\u003cMovie\u003e movies, MovieResultsPage page,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "heze8"
        },
        "content": "                                     TmdbApi apiCall) throws OnlineConnectionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "heze8"
        },
        "content": "        for (MovieDb m : page.getResults()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "heze8"
        },
        "content": "            Movie toAdd \u003d extractMovie(apiCall, m);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "heze8"
        },
        "content": "            movies.add(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Morphs the MovieDb model into Movie model."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param apiCall API call to retrieve more information."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param movieDb model used by the API."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return Movie used by the application."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws OnlineConnectionException when not connected to the internet/"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public static Movie extractMovie(TmdbApi apiCall, MovieDb movieDb) throws OnlineConnectionException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "heze8"
        },
        "content": "        Name movieName \u003d new Name(movieDb.getTitle());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "heze8"
        },
        "content": "        final int movieId \u003d movieDb.getId(); //movie id to retrieve instance"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "heze8"
        },
        "content": "        TmdbMovies apiMovie \u003d apiCall.getMovies();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "heze8"
        },
        "content": "        //gets the instance of the movie in the database"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "heze8"
        },
        "content": "        MovieDb movie \u003d apiMovie.getMovie(movieId, null, TmdbMovies.MovieMethod.credits);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "heze8"
        },
        "content": "        //movie fields"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "heze8"
        },
        "content": "        RunningTime runtime \u003d new RunningTime(movie.getRuntime());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "heze8"
        },
        "content": "        Description overview \u003d new Description(movie.getOverview());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "heze8"
        },
        "content": "        Date releaseDate \u003d new Date(movie.getReleaseDate());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        IsWatched isWatched \u003d new IsWatched(\"false\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "heze8"
        },
        "content": "        //actors"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "heze8"
        },
        "content": "        Set\u003cActor\u003e actors \u003d getActors(movie.getCast());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "heze8"
        },
        "content": "        Movie toAdd \u003d new Movie(movieName, overview,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "heze8"
        },
        "content": "                isWatched, releaseDate, runtime, actors);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "heze8"
        },
        "content": "        //retrieve image"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "heze8"
        },
        "content": "        addImage(movieDb.getPosterPath(), movieName, toAdd, apiCall);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "heze8"
        },
        "content": "        //genres"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "heze8"
        },
        "content": "        setGenres(movie.getGenres(), toAdd);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return toAdd;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Uses the ImageRetrieval class to set an image to the show."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param posterPath path of the image online"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param name       name of the show"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param toAdd      the show to be modified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param apiCall    the API call used"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws OnlineConnectionException when not connected to the internet."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private static void addImage(String posterPath, Name name, Show toAdd, TmdbApi apiCall)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "heze8"
        },
        "content": "            throws OnlineConnectionException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "heze8"
        },
        "content": "            ImageRetrieval instance \u003d new ImageRetrieval(apiCall, posterPath, name.showName);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "heze8"
        },
        "content": "            String imagePath \u003d instance.retrieveImage();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "heze8"
        },
        "content": "            toAdd.setPoster(new Poster(imagePath));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "heze8"
        },
        "content": "            toAdd.setPoster(new Poster());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Passes the Tv Shows from the Tv Show page into the tvShow list with the new TvShow model used in the application."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param tvShows list of tvShows to be added into."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param page    results from the API database."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param apiCall API call to retrieve more information."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws OnlineConnectionException when not connected to the internet."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public static void extractTvShows(ArrayList\u003cTvShow\u003e tvShows, TvResultsPage page,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "heze8"
        },
        "content": "                                      TmdbApi apiCall) throws OnlineConnectionException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "heze8"
        },
        "content": "        for (TvSeries tv : page.getResults()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "heze8"
        },
        "content": "            TvShow tvShowToAdd \u003d extractTvShow(apiCall, tv);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "heze8"
        },
        "content": "            tvShows.add(tvShowToAdd);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Morphs the TvSeries model into TvShow model."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param apiCall API call to retrieve more information."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param tv model used by the API."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return TvShow model used by the application."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws OnlineConnectionException when not connected to the internet."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public static TvShow extractTvShow(TmdbApi apiCall, TvSeries tv) throws OnlineConnectionException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "heze8"
        },
        "content": "        final int tvId \u003d tv.getId();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "heze8"
        },
        "content": "        TmdbTV apiCallTvSeries \u003d apiCall.getTvSeries();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "heze8"
        },
        "content": "        TvSeries series \u003d apiCallTvSeries.getSeries(tvId, null);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "heze8"
        },
        "content": "        TmdbTvSeasons tvSeasons \u003d apiCall.getTvSeasons();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "heze8"
        },
        "content": "        final int numberOfSeasons \u003d series.getNumberOfSeasons();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "heze8"
        },
        "content": "        //seasons"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "heze8"
        },
        "content": "        ArrayList\u003cseedu.ezwatchlist.model.show.TvSeason\u003e seasonsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "heze8"
        },
        "content": "        extractSeasons(tvId, tvSeasons, numberOfSeasons, seasonsList);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "heze8"
        },
        "content": "        //runtime"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "heze8"
        },
        "content": "        List\u003cInteger\u003e episodeRuntime \u003d series.getEpisodeRuntime();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "heze8"
        },
        "content": "        RunningTime runTime \u003d new RunningTime(episodeRuntime.isEmpty() ? 0 : getAverageRuntime(episodeRuntime));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "heze8"
        },
        "content": "        //tv show fields."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "heze8"
        },
        "content": "        Name tvName \u003d new Name(tv.getName()); //name"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "heze8"
        },
        "content": "        Date date \u003d new Date(series.getFirstAirDate()); //date of release"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "heze8"
        },
        "content": "        int totalNumOfEpisodes \u003d getTotalNumOfEpisodes(seasonsList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "heze8"
        },
        "content": "        Description description \u003d new Description(tv.getOverview()); //description"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        IsWatched isWatched \u003d new IsWatched(\"false\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "heze8"
        },
        "content": "        //actors"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "heze8"
        },
        "content": "        Credits credits \u003d apiCallTvSeries.getCredits(tvId, null);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "heze8"
        },
        "content": "        Set\u003cActor\u003e actors \u003d getActors(credits.getCast());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "heze8"
        },
        "content": "        TvShow tvShowToAdd \u003d new TvShow(tvName, description,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "heze8"
        },
        "content": "                isWatched, date, runTime,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "heze8"
        },
        "content": "                actors, 0, totalNumOfEpisodes, seasonsList);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "heze8"
        },
        "content": "        //image"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "heze8"
        },
        "content": "        addImage(tv.getPosterPath(), tvName, tvShowToAdd, apiCall);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "heze8"
        },
        "content": "        //genres"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "heze8"
        },
        "content": "        setGenres(series.getGenres(), tvShowToAdd);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return tvShowToAdd;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Extracts the seasons into the season list."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param tvId            id of the TV Show in the database."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param tvSeasons       the api TvSeason database."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param numberOfSeasons number of seasons of the show."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param seasonsList     list to be added into."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private static void extractSeasons(int tvId, TmdbTvSeasons tvSeasons, int numberOfSeasons,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "heze8"
        },
        "content": "                                       ArrayList\u003cseedu.ezwatchlist.model.show.TvSeason\u003e seasonsList) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "heze8"
        },
        "content": "        for (int seasonNo \u003d 1; seasonNo \u003c\u003d numberOfSeasons; seasonNo++) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "heze8"
        },
        "content": "            TvSeason tvSeason \u003d tvSeasons.getSeason(tvId, seasonNo,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "heze8"
        },
        "content": "                    null);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "heze8"
        },
        "content": "            seedu.ezwatchlist.model.show.TvSeason season \u003d extractEpisodes(tvSeason);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "heze8"
        },
        "content": "            seasonsList.add(season);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Extracts the episodes of each season."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param tvSeason the data from the API of the season."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return a season list with the episodes added in."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private static seedu.ezwatchlist.model.show.TvSeason extractEpisodes(TvSeason tvSeason) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "heze8"
        },
        "content": "        List\u003cTvEpisode\u003e episodes \u003d tvSeason.getEpisodes();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "heze8"
        },
        "content": "        ArrayList\u003cEpisode\u003e episodeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "heze8"
        },
        "content": "        for (TvEpisode episode : episodes) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "heze8"
        },
        "content": "            episodeList.add(new Episode("
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "heze8"
        },
        "content": "                    episode.getName(), episode.getEpisodeNumber()));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return new seedu.ezwatchlist.model.show.TvSeason(tvSeason.getSeasonNumber(), episodes.size(),"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "heze8"
        },
        "content": "                episodeList);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Sets the genres taken from the API."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param genres      the genre list to be added into"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param tvShowToAdd the show to be modified."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private static void setGenres(List\u003cGenre\u003e genres, Show tvShowToAdd) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        ArrayList\u003cseedu.ezwatchlist.model.show.Genre\u003e genreList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        genres.forEach(genre -\u003e genreList.add(new seedu.ezwatchlist.model.show.Genre(genre.getName())));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Set\u003cseedu.ezwatchlist.model.show.Genre\u003e genreSet \u003d new HashSet\u003c\u003e(genreList);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        tvShowToAdd.addGenres(genreSet);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Calculates the average runtime."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param episodesRuntime list of runtimes"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return the average of the runtime."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private static int getAverageRuntime(List\u003cInteger\u003e episodesRuntime) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "heze8"
        },
        "content": "        float totalRuntime \u003d 0;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "heze8"
        },
        "content": "        int noOfEpisodes \u003d episodesRuntime.size();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "heze8"
        },
        "content": "        for (int i \u003d 0; i \u003c noOfEpisodes; i++) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "heze8"
        },
        "content": "            int individualRuntime \u003d episodesRuntime.get(i);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "heze8"
        },
        "content": "            totalRuntime +\u003d individualRuntime;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "heze8"
        },
        "content": "        int averageRunTime \u003d Math.round(totalRuntime / noOfEpisodes);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return averageRunTime;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Retrieves the actors from the online database."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param cast the list of cast taken online."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return a set of actors."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private static Set\u003cActor\u003e getActors(List\u003cPersonCast\u003e cast) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "heze8"
        },
        "content": "        Set\u003cActor\u003e actors \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "heze8"
        },
        "content": "        for (PersonCast personCast : cast) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "heze8"
        },
        "content": "            Actor actor \u003d new Actor(personCast.getName());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "heze8"
        },
        "content": "            actors.add(actor);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return actors;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Returns the total number of episodes"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param tvSeasons the online tv season database"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return total number of episodes"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private static int getTotalNumOfEpisodes(List\u003cseedu.ezwatchlist.model.show.TvSeason\u003e tvSeasons) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "heze8"
        },
        "content": "        int totalEpisodes \u003d 0;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "heze8"
        },
        "content": "        for (seedu.ezwatchlist.model.show.TvSeason season : tvSeasons) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "heze8"
        },
        "content": "            totalEpisodes +\u003d season.getEpisodes().size();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return totalEpisodes;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Filters the list of Shows to a list of Movies."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param shows the list of Shows."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return a list of movies from the Shows."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public static List\u003cMovie\u003e filterToMovieFromShow(List\u003cShow\u003e shows) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "heze8"
        },
        "content": "        List\u003cMovie\u003e movies \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "heze8"
        },
        "content": "        for (Show show: shows) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            if (show.getType().equals(\"Movie\")) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "heze8"
        },
        "content": "                movies.add((Movie) show);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return movies;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Filters the list of Shows to a list of Tv Shows."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param shows the list of Shows."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return a list of Tv Shows from the Shows."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public static List\u003cTvShow\u003e filterToTvShowsFromShow(List\u003cShow\u003e shows) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "heze8"
        },
        "content": "        List\u003cTvShow\u003e tvShows \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "heze8"
        },
        "content": "        for (Show show: shows) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            if (show.getType().equals(\"Tv Show\")) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "heze8"
        },
        "content": "                tvShows.add((TvShow) show);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return tvShows;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Retrieves a Tv Show from it\u0027s ID"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param tmdbApi"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param tvId the ID of the Tv Show"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return TvShow"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public static TvShow getTvShow(TmdbApi tmdbApi, Integer tvId) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "heze8"
        },
        "content": "            TvSeries tvSeries \u003d tmdbApi.getTvSeries().getSeries(tvId, null, TmdbTV.TvMethod.values());"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return extractTvShow(tmdbApi, tvSeries);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (OnlineConnectionException e) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Retrieves a Movie from it\u0027s ID."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param tmdbApi"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param movieId the ID of the Movie."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return Movie"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public static Movie getMovie(TmdbApi tmdbApi, Integer movieId) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "heze8"
        },
        "content": "            MovieDb movie \u003d tmdbApi.getMovies().getMovie(movieId, null, TmdbMovies.MovieMethod.values());"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return extractMovie(tmdbApi, movie);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (OnlineConnectionException e) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 6,
      "tswuxia": 2,
      "heze8": 325
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private static final String LOG_FILE \u003d \"watchlist.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/commons/core/messages/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "package seedu.ezwatchlist.commons.core.messages;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_INVALID_SHOW_DISPLAYED_INDEX \u003d \"The show index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND \u003d \"Can\u0027t execute that command in this tab. Please switch over \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \"to the watchlist or watched tab and enter the command\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 3,
      "michelleykw": 1,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/commons/core/messages/SearchMessages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "package seedu.ezwatchlist.commons.core.messages;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michelleykw"
        },
        "content": " * Container for user visible messages when executing the search command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michelleykw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "public class SearchMessages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            \"Search : Searches for shows whose names contain any of the given keywords from the watchlist, \""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            + \"watched list and online.\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \"- by name: search n/SHOW_NAME… [g/GENRE]… [a/ACTOR_NAME]… [o/FROM_ONLINE]\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \" [t/TYPE] [w/HAS_WATCHED]\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \"- by genre: search g/GENRE… [n/SHOW_NAME]… [a/ACTOR_NAME]… [o/FROM_ONLINE]\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \"[t/TYPE] [w/HAS_WATCHED]\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \"- by actor (from watchlist): search a/ACTOR_NAME… [n/SHOW_NAME]… [g/GENRE]…\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \"[t/TYPE] [w/HAS_WATCHED]\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            + \"Enter \u0027help\u0027 command for more detailed examples.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public static final String MESSAGE_SHOWS_FOUND_OVERVIEW \u003d \"%1$d shows found!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public static final String MESSAGE_INTERNAL_SHOW_LISTED_OVERVIEW \u003d \"You are offline. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            + \"Shows are searched from watchlist and watched list only, even if you requested to search from online.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            + MESSAGE_SHOWS_FOUND_OVERVIEW;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public static final String MESSAGE_INVALID_FROM_ONLINE_COMMAND \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            \"Invalid input. For o/[OPTION], OPTION has to be either true/yes or false/no\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public static final String MESSAGE_INVALID_IS_WATCHED_COMMAND \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            \"Invalid input. For w/[IS_WATCHED], IS_WATCHED has to be either true/yes or false/no\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public static final String MESSAGE_UNABLE_TO_SEARCH_FROM_ONLINE_WHEN_SEARCHING_BY_ACTOR \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            \"Invalid input. When searching by actor, it is not possible to search from online.\\n\" + MESSAGE_USAGE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public static final String MESSAGE_INVALID_TYPE_COMMAND \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            \"Invalid type. t/[TYPE] where TYPE is either movie or tv\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public static final String MESSAGE_INVALID_GENRE_COMMAND \u003d \"Invalid input. Ensure that genre is not empty.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            + \"search g/GENRE… [n/SHOW_NAME]… [a/ACTOR_NAME]… [i/IS_INTERNAL] [t/TYPE] [w/IS_WATCH]\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 6,
      "michelleykw": 29
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.api.exceptions.OnlineConnectionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyWatchList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.ui.MainWindow;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * @param mainWindow"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * @param currentTab"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    CommandResult execute(String commandText, MainWindow mainWindow, String currentTab)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throws CommandException, ParseException, OnlineConnectionException, InterruptedException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns the model."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @return the model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    Model getModel();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns the WatchList."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @see Model#getWatchList()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    ReadOnlyWatchList getWatchList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /** Returns an unmodifiable view of the filtered shows that have not been watched */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    ObservableList\u003cShow\u003e getUnWatchedList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /** Returns an unmodifiable view of the filtered watched list of shows */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    ObservableList\u003cShow\u003e getWatchedList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of shows */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    ObservableList\u003cShow\u003e getFilteredShowList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /** Updates the filter of the filtered show list by the given {@code predicate}. */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    void updateFilteredShowList(Predicate\u003cShow\u003e predicate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /** Returns an unmodifiable view of the search results of shows */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    ObservableList\u003cShow\u003e getSearchResultList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns the user prefs\u0027 watchlist file path."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    Path getWatchListFilePath();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 35,
      "wongchuankai": 5,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import javafx.concurrent.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.api.exceptions.OnlineConnectionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.parser.WatchListParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyWatchList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.storage.Storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.ui.MainWindow;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final WatchListParser watchListParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        watchListParser \u003d new WatchListParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public CommandResult execute(String commandText, MainWindow mainWindow, String currentTab)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throws CommandException, ParseException, OnlineConnectionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        final CommandResult[] commandResult \u003d new CommandResult[1];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Command command \u003d watchListParser.parseCommand(commandText, currentTab);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        if (command instanceof SearchCommand) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            mainWindow.setIsSearchLoading();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            mainWindow.goToSearch();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            mainWindow.getResultDisplay().setFeedbackToUser(\"Loading...\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            Task\u003cCommandResult\u003e task \u003d new Task\u003cCommandResult\u003e() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                protected CommandResult call() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                    return command.execute(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            };"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            task.setOnSucceeded(event -\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                mainWindow.setIsSearchLoading();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                mainWindow.goToSearch();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                commandResult[0] \u003d task.getValue();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                mainWindow.searchResultLogger(commandResult[0]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            });"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            new Thread(task).start();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            commandResult[0] \u003d command.execute(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            storage.saveWatchList(model.getWatchList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return commandResult[0];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ReadOnlyWatchList getWatchList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return model.getWatchList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ObservableList\u003cShow\u003e getUnWatchedList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return model.getUnWatchedShowList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ObservableList\u003cShow\u003e getWatchedList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return model.getWatchedShowList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ObservableList\u003cShow\u003e getFilteredShowList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return model.getFilteredShowList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void updateFilteredShowList(Predicate\u003cShow\u003e predicate) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        model.updateFilteredShowList(predicate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ObservableList\u003cShow\u003e getSearchResultList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return model.getSearchResultList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Path getWatchListFilePath() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return model.getWatchListFilePath();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 49,
      "wongchuankai": 29,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_ACTOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_DATE_OF_RELEASE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_IS_WATCHED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_RUNNING_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Adds a show to the watchlist."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a show to the watchlist. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + PREFIX_TYPE + \"TYPE (\u0027movie\u0027 or \u0027tv\u0027) \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \"[\" + PREFIX_DATE_OF_RELEASE + \"DATE OF RELEASE] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \"[\" + PREFIX_IS_WATCHED + \"WATCHED (\u0027true\u0027 or \u0027false\u0027)] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \"[\" + PREFIX_RUNNING_TIME + \"RUNNING TIME] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \"[\" + PREFIX_ACTOR + \"ACTOR]...\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + PREFIX_NAME + \"Joker \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + PREFIX_TYPE + \"movie \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + PREFIX_DATE_OF_RELEASE + \"4 October 2019 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + PREFIX_IS_WATCHED + \"true \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + PREFIX_RUNNING_TIME + \"122 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Joker is funny \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + PREFIX_ACTOR + \"Joaquin Phoenix \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + PREFIX_ACTOR + \"Robert De Niro\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static final String MESSAGE_USAGE2 \u003d COMMAND_WORD + \": Sync a show from IMDB to the watchlist. \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New show added: %1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SHOW \u003d \"This show already exists in the watchlist\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static final String MESSAGE_SUCCESS2 \u003d \"Sync movie: %1$s\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static final String UNSUCCESSFUL_INDEX \u003d \"Search Result Page is currently empty.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static final String UNSUCCESSFUL_LARGER \u003d \"The index is larger than the total number\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            + \" of shows in search page.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static final String NOT_AT_SEARCH_LIST_PAGE \u003d \"\u0027Add Index\u0027 command is only available in Search Panel\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final Show toAdd;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private final boolean isFromSearch;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Show}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public AddCommand(Show show) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(show);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        toAdd \u003d show;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        index \u003d -1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        isFromSearch \u003d false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public AddCommand(int index) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        toAdd \u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        isFromSearch \u003d true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        if (isFromSearch) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return fromSearch(model);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        if (model.hasShow(toAdd)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_SHOW);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        model.addShow(toAdd);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Retrieve movies from searchlist found in model."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public CommandResult fromSearch(Model model) throws CommandException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        List\u003cShow\u003e searchResultList \u003d model.getSearchResultList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        if (searchResultList.isEmpty()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new CommandException(UNSUCCESSFUL_INDEX);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        if (index \u003e searchResultList.size()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new CommandException(UNSUCCESSFUL_LARGER);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show fromImdb \u003d searchResultList.get(index - 1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        if (model.hasShow(fromImdb)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_SHOW);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        model.addShow(fromImdb);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS2, fromImdb), true);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public boolean isFromSearch() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return isFromSearch;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                \u0026\u0026 index \u003d\u003d (((AddCommand) other).index)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                \u0026\u0026 isFromSearch \u003d\u003d ((AddCommand) other).isFromSearch);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 36,
      "wongchuankai": 60,
      "tswuxia": 2,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.WatchList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Clears the watchlist."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Watchlist has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        model.setWatchList(new WatchList());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 7,
      "tswuxia": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private final boolean shortCutKey;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private final boolean isChangedList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                         boolean shortCutKey, boolean isChangedList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        this.shortCutKey \u003d shortCutKey;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        this.isChangedList \u003d isChangedList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean isChangedList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        this(feedbackToUser, false, false, false, isChangedList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public boolean isShortCutKey() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return shortCutKey;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    public boolean isChangedList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        return isChangedList;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 7,
      "jcjjjared": 1,
      "tswuxia": 11,
      "heze8": 1,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.commons.core.messages.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Deletes a show identified using it\u0027s displayed index from the watchlist."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \": Deletes the show identified by the index number used in the displayed show list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_DELETE_SHOW_SUCCESS \u003d \"Deleted Show: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        List\u003cShow\u003e lastShownList \u003d model.getFilteredShowList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SHOW_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show showToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        model.deleteShow(showToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_SHOW_SUCCESS, showToDelete), true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 12,
      "michelleykw": 1,
      "tswuxia": 1,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_ACTOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_DATE_OF_RELEASE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_IS_WATCHED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_RUNNING_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.model.Model.PREDICATE_ALL_SHOWS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.commons.core.messages.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Genre;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.IsWatched;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Movie;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Poster;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.RunningTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.TvSeason;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.TvShow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Edits the details of an existing show in the watchlist."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the show identified \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \"by the index number used in the displayed show list. \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \"[\" + PREFIX_DATE_OF_RELEASE + \"DATE OF RELEASE] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \"[\" + PREFIX_IS_WATCHED + \"WATCHED (\u0027true\u0027 or \u0027false\u0027)] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \"[\" + PREFIX_RUNNING_TIME + \"RUNNING TIME] \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \"[\" + PREFIX_ACTOR + \"ACTOR]...\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + PREFIX_NAME + \"Joker \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + PREFIX_DATE_OF_RELEASE + \"3 October 2019\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_EDIT_SHOW_SUCCESS \u003d \"Edited Show: %1$s\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SHOW \u003d \"This show already exists in the watchlist.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final EditShowDescriptor editShowDescriptor;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param index of the show in the filtered show list to edit"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param editShowDescriptor details to edit the show with"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public EditCommand(Index index, EditShowDescriptor editShowDescriptor) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(editShowDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.editShowDescriptor \u003d new EditShowDescriptor(editShowDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        List\u003cShow\u003e lastShownList \u003d model.getFilteredShowList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SHOW_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show showToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show editedShow \u003d createEditedShow(showToEdit, editShowDescriptor);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!showToEdit.isSameShow(editedShow) \u0026\u0026 model.hasShow(editedShow)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_SHOW);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        model.setShow(showToEdit, editedShow);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        model.updateFilteredShowList(PREDICATE_ALL_SHOWS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_SHOW_SUCCESS, editedShow), true);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Creates and returns a {@code Show} with the details of {@code showToEdit}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * edited with {@code editShowDescriptor}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private static Show createEditedShow(Show showToEdit, EditShowDescriptor editShowDescriptor) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assert showToEdit !\u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Name updatedName \u003d editShowDescriptor.getName().orElse(showToEdit.getName());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Date updatedDateOfRelease \u003d editShowDescriptor.getDateOfRelease().orElse(showToEdit.getDateOfRelease());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        IsWatched updatedIsWatched \u003d editShowDescriptor.getIsWatched().orElse(showToEdit.isWatched());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Description updatedDescription \u003d editShowDescriptor.getDescription().orElse(showToEdit.getDescription());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        RunningTime updatedRunningTime \u003d editShowDescriptor.getRunningTime().orElse(showToEdit.getRunningTime());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Set\u003cActor\u003e updatedActors \u003d editShowDescriptor.getActors().orElse(showToEdit.getActors());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Poster updatedPoster \u003d editShowDescriptor.getPoster().orElse(showToEdit.getPoster());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Set\u003cGenre\u003e updatedGenres \u003d editShowDescriptor.getGenres().orElse(showToEdit.getGenres());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (showToEdit.getType().equals(\"Movie\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            Movie editedShow \u003d new Movie(updatedName, updatedDescription, updatedIsWatched,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    updatedDateOfRelease, updatedRunningTime, updatedActors);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            editedShow.setPoster(updatedPoster);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return editedShow;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        } else { //Tv show"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            int updatedNumberOfEpisodesWatched \u003d showToEdit.getNumOfEpisodesWatched();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            int updatedTotalNumOfEpisodes \u003d showToEdit.getTotalNumOfEpisodes();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            List\u003cTvSeason\u003e updatedSeasons \u003d editShowDescriptor.getSeasons().orElse(showToEdit.getTvSeasons());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            TvShow editedShow \u003d new TvShow(updatedName, updatedDescription, updatedIsWatched,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    updatedDateOfRelease, updatedRunningTime, updatedActors, updatedNumberOfEpisodesWatched,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    updatedTotalNumOfEpisodes, updatedSeasons);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            editedShow.setPoster(updatedPoster);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            editedShow.addGenres(updatedGenres);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return editedShow;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * createEditedShowTest is a public method to access the private createEditedShow."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * This method is used to testing to retrieve information from private createEditedShow."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * @param showToEdit"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * @param editShowDescriptor"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public Show createEditedShowTest(Show showToEdit, EditShowDescriptor editShowDescriptor) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return createEditedShow(showToEdit, editShowDescriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 editShowDescriptor.equals(e.editShowDescriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Stores the details to edit the show with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * corresponding field value of the show."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static class EditShowDescriptor {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        private String type;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        private Date dateOfRelease;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        private IsWatched isWatched;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        private RunningTime runningTime;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        private Set\u003cActor\u003e actors;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        private Poster poster;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        private Set\u003cGenre\u003e genres;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        private int numOfEpisodesWatched;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        private int totalNumOfEpisodes;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        private List\u003cTvSeason\u003e seasons;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public EditShowDescriptor() {}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * A defensive copy of {@code actors} is used internally."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public EditShowDescriptor(EditShowDescriptor toCopy) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            setType(toCopy.type);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            setDateOfRelease(toCopy.dateOfRelease);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            setIsWatched(toCopy.isWatched);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            setRunningTime(toCopy.runningTime);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            setActors(toCopy.actors);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            setPoster(toCopy.poster);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            setGenres(toCopy.genres);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            setNumOfEpisodesWatched(toCopy.numOfEpisodesWatched);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            setTotalNumOfEpisodes(toCopy.totalNumOfEpisodes);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            setSeasons(toCopy.seasons);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, dateOfRelease, isWatched, description, runningTime, actors);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void setType(String type) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.type \u003d type;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public Optional\u003cString\u003e getType() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return Optional.ofNullable(type);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void setDateOfRelease(Date dateOfRelease) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.dateOfRelease \u003d dateOfRelease;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public Optional\u003cDate\u003e getDateOfRelease() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return Optional.ofNullable(dateOfRelease);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void setIsWatched(IsWatched isWatched) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.isWatched \u003d isWatched;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public Optional\u003cIsWatched\u003e getIsWatched() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return Optional.ofNullable(isWatched);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void setRunningTime(RunningTime runningTime) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.runningTime \u003d runningTime;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public Optional\u003cRunningTime\u003e getRunningTime() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return Optional.ofNullable(runningTime);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void setPoster(Poster poster) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.poster \u003d poster;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public Optional\u003cPoster\u003e getPoster() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return Optional.ofNullable(poster);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void setNumOfEpisodesWatched(int numOfEpisodesWatched) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.numOfEpisodesWatched \u003d numOfEpisodesWatched;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void setTotalNumOfEpisodes(int totalNumOfEpisodes) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.totalNumOfEpisodes \u003d totalNumOfEpisodes;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * Sets {@code actors} to this object\u0027s {@code actors}."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * A defensive copy of {@code actors} is used internally."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void setActors(Set\u003cActor\u003e actors) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.actors \u003d (actors !\u003d null) ? new HashSet\u003c\u003e(actors) : null;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * Returns an unmodifiable actor set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code actor} is null."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public Optional\u003cSet\u003cActor\u003e\u003e getActors() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return (actors !\u003d null) ? Optional.of(Collections.unmodifiableSet(actors)) : Optional.empty();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * Sets {@code genres} to this object\u0027s {@code genres}."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * A defensive copy of {@code genres} is used internally."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void setGenres(Set\u003cGenre\u003e genres) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.genres \u003d (genres !\u003d null) ? new HashSet\u003c\u003e(genres) : null;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * Returns an unmodifiable genre set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code genre} is null."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public Optional\u003cSet\u003cGenre\u003e\u003e getGenres() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return (genres !\u003d null) ? Optional.of(Collections.unmodifiableSet(genres)) : Optional.empty();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * Sets {@code seasons} to this object\u0027s {@code seasons}."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * A defensive copy of {@code seasons} is used internally."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void setSeasons(List\u003cTvSeason\u003e seasons) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.seasons \u003d (seasons !\u003d null) ? new ArrayList\u003c\u003e(seasons) : null;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * Returns an unmodifiable season set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code season} is null."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public Optional\u003cList\u003cTvSeason\u003e\u003e getSeasons() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return (seasons !\u003d null) ? Optional.of(Collections.unmodifiableList(seasons)) : Optional.empty();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            if (!(other instanceof EditShowDescriptor)) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            EditShowDescriptor e \u003d (EditShowDescriptor) other;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    \u0026\u0026 getDateOfRelease().equals(e.getDateOfRelease())"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    \u0026\u0026 getIsWatched().equals(e.getIsWatched())"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    \u0026\u0026 getRunningTime().equals(e.getRunningTime())"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    \u0026\u0026 getActors().equals(e.getActors());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 198,
      "wongchuankai": 11,
      "michelleykw": 2,
      "tswuxia": 1,
      "heze8": 5,
      "-": 129
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Ezwatchlist as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 3,
      "tswuxia": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/commands/GoToCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": " *  Go To short cut key for watchlist"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class GoToCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Go to page: %1$s\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Go to page: %1$s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static final String MESSAGE_UNSUCCESSFUL_INPUT \u003d \"wrong input\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private final String shortcut;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Creates an GoToCommand to add the specified {@code shortcut}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * @param shortcut"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public GoToCommand(String shortcut) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        requireNonNull(shortcut);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        this.shortcut \u003d shortcut;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String pageTitle \u003d model.getPage(shortcut);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        return new CommandResult(pageTitle, false, false, true, false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                || (other instanceof GoToCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                \u0026\u0026 shortcut.equals(((GoToCommand) other).shortcut));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 40,
      "tswuxia": 1
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tswuxia": 1,
      "heze8": 2,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.model.Model.PREDICATE_ALL_SHOWS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Lists all shows in the watchlist to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all shows\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        model.updateFilteredShowList(PREDICATE_ALL_SHOWS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 6,
      "tswuxia": 1,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/commands/SearchCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.api.exceptions.OnlineConnectionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.api.model.ApiInterface;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.api.model.ApiManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.commons.core.messages.SearchMessages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.logic.parser.SearchKey;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.show.Genre;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.show.Movie;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.show.TvShow;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.model.show.Type;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Finds and lists all shows in watchlist whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"search\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private static final String INPUT_TRUE \u003d \"true\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private static final String INPUT_YES \u003d \"yes\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private static final String INPUT_FALSE \u003d \"false\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private static final String INPUT_NO \u003d \"no\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private ApiInterface onlineSearch;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private List\u003cString\u003e nameList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private List\u003cString\u003e typeList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private List\u003cString\u003e actorList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private List\u003cString\u003e genreList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private List\u003cString\u003e isWatchedList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private List\u003cString\u003e fromOnlineList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private List\u003cShow\u003e searchResult \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private boolean isOffline \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public SearchCommand(HashMap\u003cSearchKey, List\u003cString\u003e\u003e searchShowsHashMap) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        nameList \u003d searchShowsHashMap.get(SearchKey.KEY_NAME);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        typeList \u003d searchShowsHashMap.get(SearchKey.KEY_TYPE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        actorList \u003d searchShowsHashMap.get(SearchKey.KEY_ACTOR); // unable to search online"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        genreList \u003d searchShowsHashMap.get(SearchKey.KEY_GENRE); // unable to search for shows online"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        isWatchedList \u003d searchShowsHashMap.get(SearchKey.KEY_IS_WATCHED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        fromOnlineList \u003d searchShowsHashMap.get(SearchKey.KEY_FROM_ONLINE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "heze8"
        },
        "content": "            onlineSearch \u003d new ApiManager();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (OnlineConnectionException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            fromOnlineList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            fromOnlineList.add(INPUT_NO);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            isOffline \u003d true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            if (emptyCompulsoryKeyword()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                throw new CommandException(\"Make sure keyword(s) for n/, a/ or g/ is not empty.\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                        + SearchMessages.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            if (!nameList.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                searchByName(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            if (!actorList.isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                searchByActor(model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            if (!genreList.isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                searchByGenre(model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            List\u003cShow\u003e result \u003d searchResult.stream().distinct().collect(Collectors.toList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            model.updateSearchResultList(result);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            if (isOffline) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                return new CommandResult(String.format("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                        SearchMessages.MESSAGE_INTERNAL_SHOW_LISTED_OVERVIEW, model.getSearchResultList().size()),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                        false);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                return new CommandResult(String.format(SearchMessages.MESSAGE_SHOWS_FOUND_OVERVIEW,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                        model.getSearchResultList().size()), false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        } catch (OnlineConnectionException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            if (!nameList.isEmpty()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                for (String showName : nameList) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                    addShowFromWatchListIfSameNameAs(showName, model);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            if (!actorList.isEmpty()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                Set\u003cActor\u003e actorSet \u003d new HashSet\u003cActor\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                for (String actorName : actorList) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                    Actor actor \u003d new Actor(actorName);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                    actorSet.add(actor);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                addShowFromWatchListIfHasActor(actorSet, model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            if (!genreList.isEmpty()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                Set\u003cGenre\u003e genreSet \u003d new HashSet\u003cGenre\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                for (String genreName : genreList) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                    Genre genre \u003d new Genre(genreName);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                    if (!genreName.isBlank()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                        genreSet.add(genre);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                    } else if (genreName.isBlank()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                        throw new CommandException(SearchMessages.MESSAGE_INVALID_GENRE_COMMAND);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                addShowFromWatchListIfIsGenre(genreSet, model);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            return new CommandResult(String.format(SearchMessages.MESSAGE_INTERNAL_SHOW_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                    model.getSearchResultList().size()), false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Search for shows by name."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param model Model used."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @throws CommandException If command exception occurred."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @throws OnlineConnectionException If online exception occurred."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private void searchByName(Model model) throws CommandException, OnlineConnectionException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        if (requestedSearchFromInternal()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            for (String showName : nameList) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                addShowFromWatchListIfSameNameAs(showName, model);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        } else if (requestedSearchFromOnline()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            for (String showName : nameList) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                addShowFromOnlineIfSameNameAs(showName);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        } else if (requestedFromOnline()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            throw new CommandException(SearchMessages.MESSAGE_INVALID_FROM_ONLINE_COMMAND);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        } else { // there\u0027s no restriction on where to search from"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            for (String showName : nameList) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                addShowFromWatchListIfSameNameAs(showName, model);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                addShowFromOnlineIfSameNameAs(showName);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Search for shows by actor."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param model Model used."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @throws CommandException If command exception occurred."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @throws OnlineConnectionException If online exception occurred."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private void searchByActor(Model model) throws CommandException, OnlineConnectionException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        Set\u003cActor\u003e actorSet \u003d new HashSet\u003cActor\u003e();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        for (String actorName : actorList) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            Actor actor \u003d new Actor(actorName);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            actorSet.add(actor);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        if (requestedSearchFromInternal()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            addShowFromWatchListIfHasActor(actorSet, model);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        } else if (requestedSearchFromOnline()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            throw new CommandException(SearchMessages.MESSAGE_UNABLE_TO_SEARCH_FROM_ONLINE_WHEN_SEARCHING_BY_ACTOR);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        } else if (requestedFromOnline()) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            throw new CommandException(SearchMessages.MESSAGE_INVALID_FROM_ONLINE_COMMAND);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        } else { // there\u0027s no restriction on where to search from"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            addShowFromWatchListIfHasActor(actorSet, model);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            // addShowFromOnlineIfHasActor(actorSet); // unable to search online for now"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Search for shows by genre."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param model Model used."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @throws CommandException If command exception occurred."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @throws OnlineConnectionException If online exception occurred."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private void searchByGenre(Model model) throws CommandException, OnlineConnectionException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        Set\u003cGenre\u003e genreSet \u003d new HashSet\u003cGenre\u003e();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        for (String genreName : genreList) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            Genre genre \u003d new Genre(genreName);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            if (!genreName.isBlank()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                genreSet.add(genre);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            } else if (genreName.isBlank()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                throw new CommandException(SearchMessages.MESSAGE_INVALID_GENRE_COMMAND);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        if (requestedSearchFromInternal()) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            addShowFromWatchListIfIsGenre(genreSet, model);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        } else if (requestedSearchFromOnline()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            addShowFromOnlineIfIsGenre(genreSet); //unable to search for online tv"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        } else if (requestedFromOnline()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            throw new CommandException(SearchMessages.MESSAGE_INVALID_FROM_ONLINE_COMMAND);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        } else { // there\u0027s no restriction on where to search from"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            addShowFromWatchListIfIsGenre(genreSet, model);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            addShowFromOnlineIfIsGenre(genreSet); //unable to search for online tv"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Adds show from list if it has the same name as in {@code showName}."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param showName name of the given show."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param model current model of the program."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private void addShowFromWatchListIfSameNameAs(String showName, Model model) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        if (!showName.isBlank()) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            List\u003cShow\u003e filteredShowList \u003d model.getShowIfHasName(new Name(showName));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            addShowToSearchResult(filteredShowList);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Adds show from list if it has any actor in {@code actorSet}."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param actorSet Set of actors to be searched for."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param model Model used."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private void addShowFromWatchListIfHasActor(Set\u003cActor\u003e actorSet, Model model) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        if (!actorSet.isEmpty()) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            List\u003cShow\u003e filteredShowList \u003d model.getShowIfHasActor(actorSet);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            addShowToSearchResult(filteredShowList);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Adds show from list if it has any genre in {@code genreSet}."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param genreSet Set of actors to be searched for."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param model Model used."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private void addShowFromWatchListIfIsGenre(Set\u003cGenre\u003e genreSet, Model model) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        if (!genreSet.isEmpty()) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            List\u003cShow\u003e filteredShowList \u003d model.getShowIfIsGenre(genreSet);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            addShowToSearchResult(filteredShowList);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Add show to search result."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param showList List of shows to be added."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private void addShowToSearchResult(List\u003cShow\u003e showList) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        for (Show show : showList) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            if (requestedSearchFromWatched() \u0026\u0026 !show.isWatched().getIsWatchedBoolean()) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                continue; // skip if request to be watched but show is not watched"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            } else if (requestedSearchFromWatchList() \u0026\u0026 show.isWatched().getIsWatchedBoolean()) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                continue; // skip if requested to be in watchlist but show is watched"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            } else if (requestedSearchForMovie() \u0026\u0026 !show.getType().equals(\"Movie\")) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                continue; // skip if requested search for movie but show is tv"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            } else if (requestedSearchForTv() \u0026\u0026 !show.getType().equals(\"Tv Show\")) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                continue; // skip if requested search for tv but show is movie"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            searchResult.add(show);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Add shows, both movies and tv series, searched by name from online to the search result list."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param showName Name of the show to be searched."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @throws OnlineConnectionException If online exception occurred."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @throws CommandException If command exception occurred."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private void addShowFromOnlineIfSameNameAs(String showName) throws OnlineConnectionException, CommandException {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        if (!requestedIsWatched() \u0026\u0026 !showName.isBlank()) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            if (requestedSearchForMovie()) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                addOnlineMovieSearchedByNameToResult(showName);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            } else if (requestedSearchForTv()) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                addOnlineTvSearchedByNameToResult(showName);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            } else if (requestedType()) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                throw new CommandException(SearchMessages.MESSAGE_INVALID_TYPE_COMMAND);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                addOnlineMovieSearchedByNameToResult(showName);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                addOnlineTvSearchedByNameToResult(showName);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Add movies, searched by name from online to the search result list."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param showName Name of the show to be searched."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @throws OnlineConnectionException If online exception occurred."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private void addOnlineMovieSearchedByNameToResult(String showName) throws OnlineConnectionException {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "heze8"
        },
        "content": "        List\u003cMovie\u003e movies \u003d onlineSearch.getMovieByName(showName);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        for (Movie movie : movies) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            searchResult.add(movie);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Add tv series, searched by name from online to the search result list."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param showName Name of the show to be searched."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @throws OnlineConnectionException If online exception occurred."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private void addOnlineTvSearchedByNameToResult(String showName) throws OnlineConnectionException {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "heze8"
        },
        "content": "        List\u003cTvShow\u003e tvShows \u003d onlineSearch.getTvShowByName(showName);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "heze8"
        },
        "content": "        for (TvShow tvShow : tvShows) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "heze8"
        },
        "content": "            searchResult.add(tvShow);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns a list of movies from the API search method."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param genreSet the set of genres that the user wants to search."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @throws OnlineConnectionException when not connected to the internet."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private void addShowFromOnlineIfIsGenre(Set\u003cGenre\u003e genreSet) throws OnlineConnectionException {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        if (!genreSet.isEmpty()) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            List\u003cMovie\u003e movies \u003d onlineSearch.getMovieByGenre(genreSet);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            for (Movie movie : movies) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                searchResult.add(movie);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns whether there is any compulsory keyword present."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * One of the following keyword needs to be present: show name, actor or genre."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if all compulsory keyword is empty."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private boolean emptyCompulsoryKeyword() {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return nameList.isEmpty() \u0026\u0026 actorList.isEmpty() \u0026\u0026 genreList.isEmpty();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns true if user requests to search for tv series or movies only."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if user requests to search for tv series or movies only."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private boolean requestedType() {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return !typeList.isEmpty();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns true if user requests to search for movies only."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if user requests to search for movies only."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private boolean requestedSearchForMovie() {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return requestedType() \u0026\u0026 (typeList.get(0).equals(Type.MOVIE.getType()));"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns true if user requests to search for tv series only."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if user requests to search for tv series only."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private boolean requestedSearchForTv() {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return requestedType() \u0026\u0026 (typeList.get(0).equals(Type.TV_SHOW.getType()));"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns true if user requests to search from watch or watched list."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if user requests to search from watch or watched list."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private boolean requestedIsWatched() {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return !isWatchedList.isEmpty();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns true if user requests to search from watched list."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if user requests to search from watched list."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private boolean requestedSearchFromWatched() {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return requestedIsWatched()"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                \u0026\u0026 (isWatchedList.get(0).equals(INPUT_TRUE) || isWatchedList.get(0).equals(INPUT_YES));"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns true if user requests to search from watch list."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if user requests to search from watch list."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private boolean requestedSearchFromWatchList() {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return requestedIsWatched()"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                \u0026\u0026 (isWatchedList.get(0).equals(INPUT_FALSE) || isWatchedList.get(0).equals(INPUT_NO));"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns true if user requests to search from internal or online."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if user requests to search from internal or online."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private boolean requestedFromOnline() throws CommandException {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        for (String input : fromOnlineList) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            if (!(input.equals(INPUT_FALSE) || input.equals(INPUT_NO) || input.equals(INPUT_TRUE)"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                    || input.equals(INPUT_YES))) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                throw new CommandException(SearchMessages.MESSAGE_INVALID_FROM_ONLINE_COMMAND);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return !fromOnlineList.isEmpty();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns true if user requests to search from internal."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if user requests to search from internal."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private boolean requestedSearchFromInternal() throws CommandException {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        boolean requestedFromOnline \u003d requestedFromOnline();"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        for (String input : fromOnlineList) {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            if (requestedFromOnline \u0026\u0026 (input.equals(INPUT_FALSE) || input.equals(INPUT_NO))) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns true if user requests to search from online."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if user requests to search from online."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private boolean requestedSearchFromOnline() throws CommandException {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        boolean requestedFromOnline \u003d requestedFromOnline();"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        for (String input : fromOnlineList) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            if (requestedFromOnline \u0026\u0026 (input.equals(INPUT_TRUE) || input.equals(INPUT_YES))) {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns the list of search results."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return List of search results."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public List\u003cShow\u003e getSearchResult() {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return searchResult;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                || (other instanceof SearchCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                \u0026\u0026 nameList.equals(((SearchCommand) other).nameList)"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                \u0026\u0026 typeList.equals(((SearchCommand) other).typeList)"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                \u0026\u0026 actorList.equals(((SearchCommand) other).actorList)"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                \u0026\u0026 isWatchedList.equals(((SearchCommand) other).isWatchedList)"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                \u0026\u0026 fromOnlineList.equals(((SearchCommand) other).fromOnlineList));"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 12,
      "michelleykw": 390,
      "tswuxia": 4,
      "heze8": 21,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/commands/SyncCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.commons.core.messages.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Syncs a result from the search list into the watch list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class SyncCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sync\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sync a show from IMDB to the watchlist. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sync movie: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SHOW \u003d \"?\"; //\"This show already exists in the watchlist\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static final String MESSAGE_UNSUCCESSFUL \u003d \"No matching name found in local internal storage.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static final String MESSAGE_UNSUCCESFUL2 \u003d \"You may use the add INDEX command to add searched-online shows\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            + \" into Watchlist.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private Index toSync;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public SyncCommand(Index toSync) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(toSync);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.toSync \u003d toSync;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        List\u003cShow\u003e searchResultList \u003d model.getSearchResultList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        List\u003cShow\u003e unWatchedList \u003d model.getUnWatchedShowList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (toSync.getZeroBased() \u003e\u003d searchResultList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SHOW_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show fromImdb \u003d searchResultList.get(toSync.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Name name \u003d fromImdb.getName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        boolean matchingShowName \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        int matchingIndex \u003d -1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        for (int i \u003d 0; i \u003c unWatchedList.size(); i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            Name nameFromUnWatched \u003d unWatchedList.get(i).getName();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            if (name.equals(nameFromUnWatched)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                matchingShowName \u003d true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                matchingIndex \u003d i;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        if (matchingShowName) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            Show fromUnWatchedList \u003d unWatchedList.get(matchingIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            model.setShow(fromUnWatchedList, fromImdb);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, fromImdb), true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new CommandException(MESSAGE_UNSUCCESSFUL + \" \" + MESSAGE_UNSUCCESFUL2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                || (other instanceof SyncCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 toSync.equals(((SyncCommand) other).toSync));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 49,
      "wongchuankai": 22,
      "michelleykw": 1,
      "tswuxia": 1
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/commands/WatchCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_NUM_OF_EPISODES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.model.Model.PREDICATE_ALL_SHOWS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.commons.core.messages.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Genre;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.IsWatched;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Movie;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Poster;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.RunningTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.TvSeason;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.TvShow;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Marks an existing show in the watchlist as watched."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class WatchCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"watch\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Marks an existing show in the watchlist as watched \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \"by the index number used in the displayed show list.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \"[\" + PREFIX_NUM_OF_EPISODES + \"NUMBER OF EPISODES] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + PREFIX_NUM_OF_EPISODES + \"12 \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_WATCH_SHOW_SUCCESS \u003d \"Marked show as watched: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_UNWATCH_SHOW_SUCCESS \u003d \"Unmarked show as watched: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_MARK_EPISODES_SUCCESS \u003d \"Marked %1$s episodes as watched: %2$s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SHOW \u003d \"This show already exists in the watchlist.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_EDITING_MOVIE_EPISODES_OR_SEASONS \u003d \"Movies do not have episodes and seasons.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_INVALID_EPISODE_NUMBER \u003d \"The provided number of episodes is too large, there\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \" are only %1$s episode(s) in %2$s.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_INVALID_SEASON_NUMBER \u003d \"The provided number of seasons is too large, there are\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \" only %1$s season(s) in %2$s.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_INVALID_EPISODE_NUMBER_OF_SEASON \u003d \"Season %1$s of %2$s only has\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \" %3$s episode(s).\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final WatchShowDescriptor watchShowDescriptor;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final boolean isToggle;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final boolean seasonsArePresent;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final boolean episodesArePresent;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param index of the show in the filtered show list to edit"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param watchShowDescriptor details to edit the show with"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public WatchCommand(Index index, WatchShowDescriptor watchShowDescriptor,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                        boolean seasonsArePresent, boolean episodesArePresent) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(watchShowDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(seasonsArePresent);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(episodesArePresent);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.watchShowDescriptor \u003d new WatchShowDescriptor(watchShowDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.seasonsArePresent \u003d seasonsArePresent;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.episodesArePresent \u003d episodesArePresent;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.isToggle \u003d (!seasonsArePresent \u0026\u0026 !episodesArePresent);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        List\u003cShow\u003e lastShownList \u003d model.getFilteredShowList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SHOW_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show showToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show editedShow \u003d createEditedShow(showToEdit, watchShowDescriptor, isToggle,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                seasonsArePresent, episodesArePresent);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!showToEdit.isSameShow(editedShow) \u0026\u0026 model.hasShow(editedShow)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_SHOW);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (showToEdit.getType().equals(\"Movie\") \u0026\u0026 !isToggle) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new CommandException(MESSAGE_EDITING_MOVIE_EPISODES_OR_SEASONS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        model.setShow(showToEdit, editedShow);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        model.updateFilteredShowList(PREDICATE_ALL_SHOWS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        boolean isWatched \u003d editedShow.isWatched().value;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (editedShow.getType().equals(\"Movie\") || isToggle) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            if (isWatched) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_WATCH_SHOW_SUCCESS, editedShow), false);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_UNWATCH_SHOW_SUCCESS, editedShow), false);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return new CommandResult(String.format("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                    MESSAGE_MARK_EPISODES_SUCCESS, editedShow.getNumOfEpisodesWatched(), editedShow), false);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Creates and returns a {@code Show} with the details of {@code showToEdit}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * edited with {@code editShowDescriptor}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private Show createEditedShow(Show showToEdit, WatchShowDescriptor watchShowDescriptor, boolean isToggle,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                                  boolean seasonsArePresent, boolean episodesArePresent) throws CommandException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assert showToEdit !\u003d null;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Name name \u003d showToEdit.getName();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Date dateOfRelease \u003d showToEdit.getDateOfRelease();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Description description \u003d showToEdit.getDescription();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        RunningTime runningTime \u003d showToEdit.getRunningTime();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Set\u003cActor\u003e actors \u003d showToEdit.getActors();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Poster poster \u003d showToEdit.getPoster();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        int totalNumOfEpisodes \u003d showToEdit.getTotalNumOfEpisodes();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        List\u003cTvSeason\u003e seasons \u003d showToEdit.getTvSeasons();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Set\u003cGenre\u003e genres \u003d showToEdit.getGenres();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (showToEdit.getType().equals(\"Movie\")) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            IsWatched updatedIsWatched \u003d new IsWatched(Boolean.toString(!showToEdit.isWatched().value));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            Movie editedShow \u003d new Movie(name, description, updatedIsWatched, dateOfRelease, runningTime, actors);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            editedShow.setPoster(poster);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            editedShow.addGenres(genres);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return editedShow;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        } else { // show is a tv show"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            int numOfEpisodesWatched \u003d watchShowDescriptor.getNumOfEpisodesWatched();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            int numOfSeasonsWatched \u003d watchShowDescriptor.getNumOfSeasonsWatched();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            IsWatched updatedIsWatched \u003d showToEdit.isWatched();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            if (isToggle) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                updatedIsWatched \u003d new IsWatched(Boolean.toString(!showToEdit.isWatched().value));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            checkValidityOfArguments(showToEdit, numOfEpisodesWatched, numOfSeasonsWatched);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            if (seasonsArePresent \u0026\u0026 episodesArePresent) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                numOfEpisodesWatched \u003d calcEpisodesWatched(showToEdit, numOfSeasonsWatched, numOfEpisodesWatched);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            } else if (seasonsArePresent) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                numOfEpisodesWatched \u003d calcEpisodesWatched(showToEdit, numOfSeasonsWatched);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            checkIfValidNumOfEpisodesWatched(showToEdit, numOfEpisodesWatched, totalNumOfEpisodes);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            if (isToggle) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                if (updatedIsWatched.value) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    numOfEpisodesWatched \u003d totalNumOfEpisodes;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    numOfEpisodesWatched \u003d 0;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                if (numOfEpisodesWatched \u003d\u003d totalNumOfEpisodes) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    updatedIsWatched \u003d new IsWatched(\"true\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    updatedIsWatched \u003d new IsWatched(\"false\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            TvShow editedShow \u003d new TvShow(name, description, updatedIsWatched, dateOfRelease, runningTime,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    actors, numOfEpisodesWatched, totalNumOfEpisodes, seasons);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            editedShow.setPoster(poster);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            editedShow.addGenres(genres);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return editedShow;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Checks the validity of {@code numOfEpisodesWatched} and {@code numOfSeasonsWatched} user inputs."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param showToEdit show that is being edited."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param numOfEpisodesWatched number of episodes given by user."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param numOfSeasonsWatched number of seasons given by user."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws CommandException if there is any invalid input."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private void checkValidityOfArguments(Show showToEdit, int numOfEpisodesWatched, int numOfSeasonsWatched)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (seasonsArePresent \u0026\u0026 !isValidSeasonNumber(showToEdit, numOfSeasonsWatched)) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_SEASON_NUMBER,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    showToEdit.getNumOfSeasons(), showToEdit.getName()));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (seasonsArePresent \u0026\u0026 episodesArePresent"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 !isValidEpisodeNumberOfSeason(showToEdit, numOfEpisodesWatched, numOfSeasonsWatched)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_EPISODE_NUMBER_OF_SEASON,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    showToEdit.getTvSeasons().get(numOfSeasonsWatched - 1).getSeasonNum(),"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    showToEdit.getName(),"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    showToEdit.getNumOfEpisodesOfSeason(numOfSeasonsWatched)));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Checks the validity of {@code numOfEpisodesWatched} and {@code numOfSeasonsWatched} user inputs."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param showToEdit show that is being edited."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param numOfEpisodesWatched number of episodes given by user."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param totalNumOfEpisodes total number of episodes."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws CommandException if there is any invalid input."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private void checkIfValidNumOfEpisodesWatched(Show showToEdit, int numOfEpisodesWatched, int totalNumOfEpisodes)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (numOfEpisodesWatched \u003e totalNumOfEpisodes) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_EPISODE_NUMBER,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    totalNumOfEpisodes, showToEdit.getName()));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Calculates the total number of episodes watched given and the season"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * number and number of episodes watched in that particular season."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param show The show to be edited."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param numOfSeasons the number of seasons provided by the user."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param numOfEpisodes the number of episodes of the season provided by the user."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @return the total number of episodes watched."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private int calcEpisodesWatched(Show show, int numOfSeasons, int numOfEpisodes) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        int numOfEpisodesWatched \u003d 0;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        for (int seasonNum \u003d 1; seasonNum \u003c numOfSeasons; seasonNum++) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            numOfEpisodesWatched +\u003d show.getTvSeasons().get(seasonNum - 1).getTotalNumOfEpisodes();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        numOfEpisodesWatched +\u003d numOfEpisodes;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return numOfEpisodesWatched;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Calculates the total number of episodes watched given the number of seasons watched."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param show The show to be edited."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param numOfSeasons the number of seasons provided by the user."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @return the total number of episodes watched."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private int calcEpisodesWatched(Show show, int numOfSeasons) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        int numOfEpisodesWatched \u003d 0;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        for (int seasonNum \u003d 1; seasonNum \u003c\u003d numOfSeasons; seasonNum++) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            numOfEpisodesWatched +\u003d show.getNumOfEpisodesOfSeason(seasonNum);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return numOfEpisodesWatched;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private boolean isValidSeasonNumber(Show showToEdit, int seasonNum) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return showToEdit.getType().equals(\"Tv Show\")"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 (seasonNum \u003c\u003d showToEdit.getNumOfSeasons());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private boolean isValidEpisodeNumberOfSeason(Show showToEdit, int episodeNum, int seasonNum) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return showToEdit.getType().equals(\"Tv Show\")"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 episodeNum \u003c\u003d showToEdit.getTvSeasons().get(seasonNum - 1).getTotalNumOfEpisodes();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!(other instanceof WatchCommand)) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        WatchCommand e \u003d (WatchCommand) other;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 watchShowDescriptor.equals(e.watchShowDescriptor);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Stores the details to edit the show with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * corresponding field value of the show."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static class WatchShowDescriptor {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        private String type;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        private Date dateOfRelease;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        private IsWatched isWatched;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        private RunningTime runningTime;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        private Set\u003cActor\u003e actors;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        private Poster poster;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        private Set\u003cGenre\u003e genres;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        private int numOfEpisodesWatched;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        private int numOfSeasonsWatched;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        private int totalNumOfEpisodes;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        private List\u003cTvSeason\u003e seasons;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public WatchShowDescriptor() {}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * A defensive copy of {@code actors} is used internally."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public WatchShowDescriptor(WatchShowDescriptor toCopy) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            setType(toCopy.type);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            setDateOfRelease(toCopy.dateOfRelease);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            setIsWatched(toCopy.isWatched);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            setRunningTime(toCopy.runningTime);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            setActors(toCopy.actors);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            setPoster(toCopy.poster);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            setGenres(toCopy.genres);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            setNumOfEpisodesWatched(toCopy.numOfEpisodesWatched);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            setNumOfSeasonsWatched(toCopy.numOfSeasonsWatched);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            setTotalNumOfEpisodes(toCopy.totalNumOfEpisodes);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            setSeasons(toCopy.seasons);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void setType(String type) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.type \u003d type;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public Optional\u003cString\u003e getType() {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return Optional.ofNullable(type);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void setDateOfRelease(Date dateOfRelease) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.dateOfRelease \u003d dateOfRelease;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public Optional\u003cDate\u003e getDateOfRelease() {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return Optional.ofNullable(dateOfRelease);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void setIsWatched(IsWatched isWatched) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.isWatched \u003d isWatched;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public Optional\u003cIsWatched\u003e getIsWatched() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return Optional.ofNullable(isWatched);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void setRunningTime(RunningTime runningTime) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.runningTime \u003d runningTime;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public Optional\u003cRunningTime\u003e getRunningTime() {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return Optional.ofNullable(runningTime);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void setPoster(Poster poster) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.poster \u003d poster;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public Optional\u003cPoster\u003e getPoster() {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return Optional.ofNullable(poster);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * Sets {@code genres} to this object\u0027s {@code genres}."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * A defensive copy of {@code genres} is used internally."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         */"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void setGenres(Set\u003cGenre\u003e genres) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.genres \u003d (genres !\u003d null) ? new HashSet\u003c\u003e(genres) : null;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * Returns an unmodifiable genre set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code genre} is null."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         */"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public Optional\u003cSet\u003cGenre\u003e\u003e getGenres() {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return (genres !\u003d null) ? Optional.of(Collections.unmodifiableSet(genres)) : Optional.empty();"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void setNumOfEpisodesWatched(int numOfEpisodesWatched) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.numOfEpisodesWatched \u003d numOfEpisodesWatched;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public int getNumOfEpisodesWatched() {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return numOfEpisodesWatched;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void setTotalNumOfEpisodes(int totalNumOfEpisodes) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.totalNumOfEpisodes \u003d totalNumOfEpisodes;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void setNumOfSeasonsWatched(int numOfSeasonsWatched) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.numOfSeasonsWatched \u003d numOfSeasonsWatched;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public int getNumOfSeasonsWatched() {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return numOfSeasonsWatched;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * Sets {@code actors} to this object\u0027s {@code actors}."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * A defensive copy of {@code actors} is used internally."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         */"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void setActors(Set\u003cActor\u003e actors) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.actors \u003d (actors !\u003d null) ? new HashSet\u003c\u003e(actors) : null;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * Returns an unmodifiable actor set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code actor} is null."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         */"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public Optional\u003cSet\u003cActor\u003e\u003e getActors() {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return (actors !\u003d null) ? Optional.of(Collections.unmodifiableSet(actors)) : Optional.empty();"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * Sets {@code seasons} to this object\u0027s {@code seasons}."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * A defensive copy of {@code seasons} is used internally."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         */"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void setSeasons(List\u003cTvSeason\u003e seasons) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.seasons \u003d (seasons !\u003d null) ? new ArrayList\u003c\u003e(seasons) : null;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * Returns an unmodifiable season set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code season} is null."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         */"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public Optional\u003cList\u003cTvSeason\u003e\u003e getSeasons() {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return (seasons !\u003d null) ? Optional.of(Collections.unmodifiableList(seasons)) : Optional.empty();"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            if (!(other instanceof WatchShowDescriptor)) {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            }"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            WatchShowDescriptor e \u003d (WatchShowDescriptor) other;"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return getNumOfEpisodesWatched() \u003d\u003d e.getNumOfEpisodesWatched()"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    \u0026\u0026 getNumOfSeasonsWatched() \u003d\u003d e.getNumOfSeasonsWatched();"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 467,
      "michelleykw": 1,
      "tswuxia": 3
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_ACTOR;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_DATE_OF_RELEASE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_IS_WATCHED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_RUNNING_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.commons.core.messages.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.IsWatched;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Movie;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.RunningTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.TvShow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public AddCommand parse(String args, String currentPanel) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        if (currentPanel.equals(\"search-list\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            int index \u003d ParserUtil.parseAddIndex(args);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return new AddCommand(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TYPE, PREFIX_DATE_OF_RELEASE, PREFIX_IS_WATCHED,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                        PREFIX_DESCRIPTION, PREFIX_RUNNING_TIME, PREFIX_ACTOR);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_TYPE)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String type \u003d ParserUtil.parseType(argMultimap.getValue(PREFIX_TYPE).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Date dateOfRelease;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        IsWatched isWatched;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Description description;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        RunningTime runningTime;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Set\u003cActor\u003e actorList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE_OF_RELEASE).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            String getDateFromUserInput \u003d argMultimap.getValue(PREFIX_DATE_OF_RELEASE).get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            System.err.println(getDateFromUserInput);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            dateOfRelease \u003d ParserUtil.parseDateAddEditCommand(getDateFromUserInput);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            dateOfRelease \u003d new Date();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (argMultimap.getValue(PREFIX_IS_WATCHED).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            isWatched \u003d ParserUtil.parseIsWatched(argMultimap.getValue(PREFIX_IS_WATCHED).get());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            isWatched \u003d new IsWatched(\"false\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            description \u003d new Description(null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RUNNING_TIME).isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            runningTime \u003d ParserUtil.parseRunningTime(argMultimap.getValue(PREFIX_RUNNING_TIME).get());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            runningTime \u003d new RunningTime();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ACTOR).isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            actorList \u003d ParserUtil.parseActors(argMultimap.getAllValues(PREFIX_ACTOR));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        if (type.equals(\"movie\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            Movie movie \u003d new Movie(name, description, isWatched, dateOfRelease, runningTime, actorList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return new AddCommand(movie);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        } else { // show type is \"tv\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            TvShow tvShow \u003d new TvShow(name, description, isWatched, dateOfRelease, runningTime, actorList,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    0, 0, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return new AddCommand(tvShow);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 61,
      "wongchuankai": 17,
      "michelleykw": 1,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final Prefix PREFIX_ACTOR \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final Prefix PREFIX_DATE_OF_RELEASE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public static final Prefix PREFIX_FROM_ONLINE \u003d new Prefix(\"o/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public static final Prefix PREFIX_GENRE \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final Prefix PREFIX_IS_WATCHED \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final Prefix PREFIX_NUM_OF_EPISODES \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final Prefix PREFIX_NUM_OF_SEASONS \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final Prefix PREFIX_RUNNING_TIME \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final Prefix PREFIX_TYPE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 10,
      "michelleykw": 2,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.commons.core.messages.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.ui.MainWindow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public DeleteCommand parse(String args, String currentPanel) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (currentPanel.equals(MainWindow.SEARCH_TAB) || currentPanel.equals(MainWindow.STATISTICS_TAB)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INVALID_COMMAND);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 11,
      "wongchuankai": 1,
      "michelleykw": 1,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_ACTOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_DATE_OF_RELEASE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_IS_WATCHED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_RUNNING_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.commons.core.messages.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.ui.MainWindow;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public EditCommand parse(String args, String currentPanel) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATE_OF_RELEASE, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                        PREFIX_IS_WATCHED, PREFIX_RUNNING_TIME, PREFIX_ACTOR);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (currentPanel.equals(MainWindow.SEARCH_TAB) || currentPanel.equals(MainWindow.STATISTICS_TAB)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INVALID_COMMAND);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new ParseException(String.format("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        EditCommand.EditShowDescriptor editShowDescriptor \u003d new EditCommand.EditShowDescriptor();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            editShowDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE_OF_RELEASE).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            String getDateFromUserInput \u003d argMultimap.getValue(PREFIX_DATE_OF_RELEASE).get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            editShowDescriptor.setDateOfRelease(ParserUtil.parseDateAddEditCommand(getDateFromUserInput));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (argMultimap.getValue(PREFIX_IS_WATCHED).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            editShowDescriptor.setIsWatched(ParserUtil.parseIsWatched(argMultimap.getValue(PREFIX_IS_WATCHED).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            editShowDescriptor.setDescription("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RUNNING_TIME).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            editShowDescriptor.setRunningTime("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    ParserUtil.parseRunningTime(argMultimap.getValue(PREFIX_RUNNING_TIME).get()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        parseActorsForEdit(argMultimap.getAllValues(PREFIX_ACTOR)).ifPresent(editShowDescriptor::setActors);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!editShowDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return new EditCommand(index, editShowDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e actors} into a {@code Set\u003cActor\u003e} if {@code actors} is non-empty."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * If {@code actors} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * {@code Set\u003cActor\u003e} containing zero actors."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private Optional\u003cSet\u003cActor\u003e\u003e parseActorsForEdit(Collection\u003cString\u003e actors) throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assert actors !\u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (actors.isEmpty()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Collection\u003cString\u003e actorSet \u003d actors.size() \u003d\u003d 1 \u0026\u0026 actors.contains(\"\") ? Collections.emptySet() : actors;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return Optional.of(ParserUtil.parseActors(actorSet));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 43,
      "wongchuankai": 4,
      "michelleykw": 1,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/parser/GoToParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.commands.GoToCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": " * Parses input arguments and creates a new GoToParser object"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class GoToParser implements Parser\u003cGoToCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    //userinput is \"search\" for example"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public GoToCommand parse(String args, String currentPanel) throws ParseException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String goTo \u003d args.toLowerCase();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        if (goToEqualCurrentPanel(args, currentPanel)) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        if (goTo.equals(\"watchlist\") || args.equals(\"1\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return new GoToCommand(\"1\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        if (goTo.equals(\"watched\") || args.equals(\"2\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return new GoToCommand(\"2\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        if (goTo.equals(\"search\") || args.equals(\"3\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return new GoToCommand(\"3\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        if (goTo.equals(\"statistics\") || args.equals(\"4\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return new GoToCommand(\"4\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        throw new ParseException(GoToCommand.MESSAGE_UNSUCCESSFUL_INPUT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * goToEqualCurrentPanel checks if user input is same as the name of current panel user is currently at."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * @param currentPanel"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public boolean goToEqualCurrentPanel(String args, String currentPanel) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String goTo \u003d args.toLowerCase();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        switch (currentPanel) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        case \"watch-list\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return goTo.equals(\"watchlist\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        case \"watched-list\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return goTo.equals(\"watched\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        case \"search-list\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return goTo.equals(\"search\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        case \"statistics tab\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return goTo.equals(\"statistics\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 60
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.api.exceptions.OnlineConnectionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    T parse(String userInput, String currentPanel) throws ParseException, OnlineConnectionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 1,
      "wongchuankai": 1,
      "heze8": 3,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Episode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.IsWatched;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.RunningTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_INVALID_TYPE \u003d \"Type can only be \u0027movie\u0027 or \u0027tv\u0027.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_INVALID_NUM_OF_EPISODES \u003d \"Number of episodes is an unsigned integer.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_INVALID_NUM_OF_SEASONS \u003d \"Number of seasons is a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX2 \u003d \"Index cannot be equal or less than 0, or \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            + \"larger than Java Max Value\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_FORMAT \u003d \"Invalid date format. Must be \u0027dd/MM/yyyy\u0027.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Parses a {@code String type} into a {@code type}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws ParseException if the given {@code type} is invalid."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static String parseType(String type) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        String trimmedType \u003d type.trim().toLowerCase();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!trimmedType.equals(\"movie\") \u0026\u0026 !trimmedType.equals(\"tv\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_TYPE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return trimmedType;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Parses a {@code String date} into a {@code date}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!Date.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new ParseException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String[] dateArr \u003d trimmedDate.split(\"/\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String newDate \u003d dateArr[2] + \"-\" + dateArr[1] + \"-\" + dateArr[0];"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Date resultDate \u003d new Date(newDate);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return resultDate;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Parses a {@code String date} into a {@code date}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static Date parseDateAddEditCommand(String date) throws ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            dateFormat.setLenient(false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            java.util.Date date1 \u003d dateFormat.parse(trimmedDate);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            String output \u003d dateFormat.format(date1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return parseDate(output);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        } catch (java.text.ParseException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Parses a {@code String isWatched} into an {@code IsWatched}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws ParseException if the given {@code isWatched} is invalid."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static IsWatched parseIsWatched(String isWatched) throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(isWatched);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        String trimmedIsWatched \u003d isWatched.trim().toLowerCase();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!IsWatched.isValidIsWatched(trimmedIsWatched)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new ParseException(IsWatched.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return new IsWatched(trimmedIsWatched);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Parses a {@code String description} into an {@code Description}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Parses a {@code String runningTime} into an {@code RunningTIME}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws ParseException if the given {@code runningTime} is invalid."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static RunningTime parseRunningTime(String runningTime) throws ParseException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(runningTime);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        String trimmedRunningTime \u003d runningTime.trim();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            if (!RunningTime.isValidRunningTime(Integer.parseInt(trimmedRunningTime))) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                throw new ParseException(RunningTime.MESSAGE_CONSTRAINTS2);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new ParseException(RunningTime.MESSAGE_CONSTRAINTS2);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return new RunningTime(Integer.parseInt(trimmedRunningTime));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Parses a {@code String actor} into a {@code Actor}."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws ParseException if the given {@code actor} is invalid."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static Actor parseActor(String actor) throws ParseException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(actor);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        String trimmedActor \u003d actor.trim();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!Actor.isValidActorName(trimmedActor)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new ParseException(Actor.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return new Actor(trimmedActor);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e actors} into a {@code Set\u003cActor\u003e}."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static Set\u003cActor\u003e parseActors(Collection\u003cString\u003e actors) throws ParseException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(actors);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        final Set\u003cActor\u003e actorSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        for (String actorName : actors) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            actorSet.add(parseActor(actorName));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return actorSet;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Parses a {@code String numOfEpisodesWatched} into an {@code int}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws ParseException if the given {@code numOfEpisodesWatched} is invalid."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static int parseNumOfEpisodesWatched(String numOfEpisodesWatched) throws ParseException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(numOfEpisodesWatched);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        String trimmedNumOfEpisodesWatched \u003d numOfEpisodesWatched.trim();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        int intNumberOfEpisodesWatched;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            intNumberOfEpisodesWatched \u003d Integer.parseInt(trimmedNumOfEpisodesWatched);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_NUM_OF_EPISODES);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        if (!Episode.isValidEpisodeNum(Integer.parseInt(numOfEpisodesWatched))) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_NUM_OF_EPISODES);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return intNumberOfEpisodesWatched;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Parses a {@code String numOfSeasonsWatched} into an {@code int}."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws ParseException if the given {@code numOfSeasonsWatched} is invalid."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static int parseNumOfSeasonsWatched(String numOfSeasonsWatched) throws ParseException {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(numOfSeasonsWatched);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        String trimmedNumOfSeasonsWatched \u003d numOfSeasonsWatched.trim();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        int intNumberOfSeasonsWatched;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            intNumberOfSeasonsWatched \u003d Integer.parseInt(trimmedNumOfSeasonsWatched);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_NUM_OF_SEASONS);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (intNumberOfSeasonsWatched \u003c\u003d 0) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_NUM_OF_SEASONS);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return intNumberOfSeasonsWatched;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Parses a {@code String args} into an {@code int}."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * @throws ParseException if the given {@code args} is invalid."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static int parseAddIndex(String args) throws ParseException {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String trimmedargs \u003d args.trim();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            index \u003d Integer.parseInt(trimmedargs);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        if (index \u003c\u003d 0 || index \u003e Integer.MAX_VALUE) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX2);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 127,
      "wongchuankai": 60,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michelleykw"
        },
        "content": " * E.g. \u0027n/\u0027 in \u0027add n/Avengers\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michelleykw": 1,
      "heze8": 1,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/parser/SearchCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_ACTOR;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_FROM_ONLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_GENRE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_IS_WATCHED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.commons.core.messages.SearchMessages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Parses input arguments and creates a new SearchCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "public class SearchCommandParser implements Parser\u003cSearchCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private HashMap\u003cSearchKey, List\u003cString\u003e\u003e searchShowsHashMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SearchCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * and returns a SearchCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public SearchCommand parse(String args, String currentPanel) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // checkSyntaxError(args);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                args, PREFIX_NAME, PREFIX_TYPE, PREFIX_ACTOR, PREFIX_GENRE, PREFIX_IS_WATCHED, PREFIX_FROM_ONLINE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        List\u003cString\u003e nameList \u003d argMultimap.getAllValues(PREFIX_NAME);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        Optional\u003cString\u003e typeOptional \u003d argMultimap.getValue(PREFIX_TYPE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        List\u003cString\u003e actorList \u003d argMultimap.getAllValues(PREFIX_ACTOR);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        List\u003cString\u003e genreList \u003d argMultimap.getAllValues(PREFIX_GENRE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        Optional\u003cString\u003e isWatchedOptional \u003d argMultimap.getValue(PREFIX_IS_WATCHED);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        Optional\u003cString\u003e fromOnlineOptional \u003d argMultimap.getValue(PREFIX_FROM_ONLINE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        parseNameToBeSearched(nameList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        parseTypeToBeSearched(typeOptional);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        parseActorToBeSearched(actorList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        parseGenreToBeSearched(genreList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        parseIsWatchedToBeSearched(isWatchedOptional);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        parseIsInternalToBeSearched(fromOnlineOptional);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return new SearchCommand(searchShowsHashMap);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Checks if the user input the command correctly with the correct syntax."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param args User input to be checked for the correct syntax"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private void checkSyntaxError(String args) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        String[] keywordsArray \u003d args.split(\" \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        int length \u003d keywordsArray.length;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        for (int i \u003d 1; i \u003c length; i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            String s \u003d keywordsArray[i].trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            if (s.length() \u003e 2 \u0026\u0026 (!s.substring(0, 2).equals(\"n/\") \u0026\u0026 !s.substring(0, 2).equals(\"a/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                    \u0026\u0026 !s.substring(0, 2).equals(\"g/\") \u0026\u0026 !s.substring(0, 2).equals(\"t/\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                    \u0026\u0026 !s.substring(0, 2).equals(\"w/\") \u0026\u0026 !s.substring(0, 2).equals(\"o/\"))) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                throw new ParseException(\"Invalid syntax.\\n\" + SearchMessages.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Parses the names to be searched."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param nameList List of names to be searched."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private void parseNameToBeSearched(List\u003cString\u003e nameList) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        searchShowsHashMap.put(SearchKey.KEY_NAME, nameList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Parses the type to be searched."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param typeOptional Type to be searched."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private void parseTypeToBeSearched(Optional\u003cString\u003e typeOptional) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        ArrayList\u003cString\u003e listOfType \u003d new ArrayList\u003cString\u003e(); // Empty if can be of any type"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        if (typeOptional.isPresent()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            String type \u003d typeOptional.get().trim().toLowerCase();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            listOfType.add(type);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        searchShowsHashMap.put(SearchKey.KEY_TYPE, listOfType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Parses the actors to be searched."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param actorList List of actors to be searched."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private void parseActorToBeSearched(List\u003cString\u003e actorList) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        searchShowsHashMap.put(SearchKey.KEY_ACTOR, actorList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Parses the genres to be searched."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param genreList List of genres to be searched."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private void parseGenreToBeSearched(List\u003cString\u003e genreList) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        searchShowsHashMap.put(SearchKey.KEY_GENRE, genreList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Parses whether the show is watched."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param isWatchedOptional True/Yes if is watched, else, False/No"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private void parseIsWatchedToBeSearched(Optional\u003cString\u003e isWatchedOptional) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        ArrayList\u003cString\u003e listOfIsWatched \u003d new ArrayList\u003cString\u003e(); // Empty if can be any"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        if (isWatchedOptional.isPresent()) { // true or yes || false or no"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            String isWatched \u003d isWatchedOptional.get().trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            listOfIsWatched.add(isWatched);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        searchShowsHashMap.put(SearchKey.KEY_IS_WATCHED, listOfIsWatched);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Parses whether the show is internal."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param isInternalOptional True/Yes if is internal, else, False/No"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private void parseIsInternalToBeSearched(Optional\u003cString\u003e isInternalOptional) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        ArrayList\u003cString\u003e listOfIsInternal \u003d new ArrayList\u003cString\u003e(); // Empty if can be any"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        if (isInternalOptional.isPresent()) { // true or yes || false or no"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            String isInternal \u003d isInternalOptional.get().trim();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            listOfIsInternal.add(isInternal);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        searchShowsHashMap.put(SearchKey.KEY_FROM_ONLINE, listOfIsInternal);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Return the hash map of the shows to be watched based on the different category."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return Hash map of the shows to be watched based on the different category."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public HashMap\u003cSearchKey, List\u003cString\u003e\u003e getSearchShowsHashMap() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return searchShowsHashMap;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 10,
      "wongchuankai": 11,
      "michelleykw": 119,
      "heze8": 1,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/parser/SearchKey.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michelleykw"
        },
        "content": " * Enumeration for the possible search key in a search command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michelleykw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "public enum SearchKey {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    KEY_NAME(\"name\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    KEY_TYPE(\"type\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    KEY_ACTOR(\"actor\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    KEY_GENRE(\"genre\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    KEY_IS_WATCHED(\"has_watched\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    KEY_FROM_ONLINE(\"from_online\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public final String key;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    SearchKey(String key) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        this.key \u003d key;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public String getKey() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return key;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michelleykw": 23
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/parser/SyncCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.api.exceptions.OnlineConnectionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.commons.core.messages.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.SyncCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Parses input arguments and creates a new SyncCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class SyncCommandParser implements Parser\u003cSyncCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * and returns an SyncCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public SyncCommand parse(String args, String currentPanel) throws ParseException, OnlineConnectionException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return new SyncCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, SyncCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 28,
      "wongchuankai": 1,
      "michelleykw": 1
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/parser/WatchCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_NUM_OF_EPISODES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_NUM_OF_SEASONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.commons.core.messages.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.WatchCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.ui.MainWindow;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Parses input arguments and creates a new WatchCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class WatchCommandParser implements Parser\u003cWatchCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the WatchCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * and returns a WatchCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public WatchCommand parse(String args, String currentPanel) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NUM_OF_EPISODES, PREFIX_NUM_OF_SEASONS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (currentPanel.equals(MainWindow.SEARCH_TAB) || currentPanel.equals(MainWindow.STATISTICS_TAB)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INVALID_COMMAND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, WatchCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        int numOfEpisodesWatched;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        int numOfSeasonsWatched;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        boolean seasonsArePresent \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        boolean episodesArePresent \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        WatchCommand.WatchShowDescriptor watchShowDescriptor \u003d new WatchCommand.WatchShowDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NUM_OF_SEASONS).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            numOfSeasonsWatched \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    ParserUtil.parseNumOfSeasonsWatched(argMultimap.getValue(PREFIX_NUM_OF_SEASONS).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            watchShowDescriptor.setNumOfSeasonsWatched(numOfSeasonsWatched);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            seasonsArePresent \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NUM_OF_EPISODES).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            numOfEpisodesWatched \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    ParserUtil.parseNumOfEpisodesWatched(argMultimap.getValue(PREFIX_NUM_OF_EPISODES).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            watchShowDescriptor.setNumOfEpisodesWatched(numOfEpisodesWatched);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            episodesArePresent \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return new WatchCommand(index, watchShowDescriptor, seasonsArePresent, episodesArePresent);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 61,
      "wongchuankai": 1,
      "michelleykw": 1
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/parser/WatchListParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import static seedu.ezwatchlist.commons.core.messages.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import static seedu.ezwatchlist.commons.core.messages.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.api.exceptions.OnlineConnectionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.commands.SyncCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.commands.WatchCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class WatchListParser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * @param currentTab"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public Command parseCommand(String userInput, String currentTab) throws ParseException, OnlineConnectionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        if (shortCutKey(userInput)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return new GoToParser().parse(userInput, currentTab);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\").toLowerCase();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return new AddCommandParser().parse(arguments, currentTab);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return new EditCommandParser().parse(arguments, currentTab);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return new DeleteCommandParser().parse(arguments, currentTab);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        case WatchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return new WatchCommandParser().parse(arguments, currentTab);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        case SearchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return new SearchCommandParser().parse(arguments, currentTab);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        case SyncCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return new SyncCommandParser().parse(arguments, currentTab);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Check if user input refers to a short cut key"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * @param userInput"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * @return check if is short cut key"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private boolean shortCutKey(String userInput) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            int shortCutKey \u003d Integer.parseInt(userInput);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            boolean isShortCutKey \u003d shortCutKey \u003d\u003d 1 || shortCutKey \u003d\u003d 2 || shortCutKey \u003d\u003d 3 || shortCutKey \u003d\u003d 4;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return isShortCutKey;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            String userInputLowerCase \u003d userInput.toLowerCase();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            boolean stringShortCutKey \u003d userInputLowerCase.equals(\"watchlist\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                    || userInputLowerCase.equals(\"watched\")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                    || userInputLowerCase.equals(\"search\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                    || userInputLowerCase.equals(\"statistics\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return stringShortCutKey;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 62,
      "wongchuankai": 47,
      "michelleykw": 3
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.model.show.Genre;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Movie;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    Predicate\u003cShow\u003e PREDICATE_ALL_SHOWS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /** {@code Predicate} that evaluates to true when a show is not watched*/"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    Predicate\u003cShow\u003e PREDICATE_UNWATCHED_SHOWS \u003d show -\u003e !show.isWatched().value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /** {@code Predicate} that evaluates to true when a show is watched */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    Predicate\u003cShow\u003e PREDICATE_WATCHED_SHOWS \u003d show -\u003e show.isWatched().value;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /** {@code Predicate} that always evaluates to false */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    Predicate\u003cShow\u003e PREDICATE_NO_SHOWS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns the user prefs\u0027 watchlist file path."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    Path getWatchListFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Sets the user prefs\u0027 watchlist file path."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    void setWatchListFilePath(Path watchListFilePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Replaces watchlist data with the data in {@code watchList}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    void setWatchList(ReadOnlyWatchList watchList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns the WatchList"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    ReadOnlyWatchList getWatchList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns true if a show with the same identity as {@code show} exists in the watchlist."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param show The show to be checked."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if a same show exists in the watchlist."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    boolean hasShow(Show show);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns true if a show with the same name as {@code showName} exists in the watchlist."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param showName The name of the show to be searched."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if a show with the same name exists in the watchlist."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    boolean hasShowName(Name showName);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns the list of shows that has the same name as the given argument as the current watch list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param showName The name of the show to be searched."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return The list of shows that has the same name exists in the watchlist."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    List\u003cShow\u003e getShowIfHasName(Name showName);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns true if a show with any of the actor in {@code actorSet} exists in the watchlist."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param actorSet The set of actors to be searched in the watchlist."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if a show with any actor in the {@code actorSet} exists in the watchlist."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    boolean hasActor(Set\u003cActor\u003e actorSet);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns the list of shows that has any of the actor in {@code actorSet}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param actorSet The set of actors to be searched in the watchlist."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return The list of shows that has any of the actor in {@code actorSet}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    List\u003cShow\u003e getShowIfHasActor(Set\u003cActor\u003e actorSet);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns the list of shows that has any of the genre in {@code genreSet}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param genreSet The set of genres to be searched in the watchlist."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return The list of shows that has any of the genre in {@code genreSet}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    List\u003cShow\u003e getShowIfIsGenre(Set\u003cGenre\u003e genreSet);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Deletes the given show."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * The show must exist in the watchlist."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    void deleteShow(Show target);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Adds the given show."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * {@code show} must not already exist in the watchlist."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    void addShow(Show show);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Replaces the given show {@code target} with {@code editedShow}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * {@code target} must exist in the watchlist."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * The show identity of {@code editedShow} must not be the same as another existing show in the watchlist."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    void setShow(Show target, Show editedShow);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /** Returns an unmodifiable view of the filtered show list */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    ObservableList\u003cShow\u003e getFilteredShowList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Updates the filter of the filtered show list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    void updateFilteredShowList(Predicate\u003cShow\u003e predicate);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /** Returns an unmodifiable view of the unwatched show list */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    ObservableList\u003cShow\u003e getUnWatchedShowList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /** Returns an unmodifiable view of the watched show list */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    ObservableList\u003cShow\u003e getWatchedShowList();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Updates the unwatched show list to filter shows that have not been watched."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    void updateUnWatchedShowList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Updates the watched show list to filter shows that have been watched."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    void updateWatchedShowList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /** Returns an unmodifiable view of the search result list */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    ObservableList\u003cShow\u003e getSearchResultList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Updates the filter of the filtered show list to filter by the given {@code searchResult}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws NullPointerException if the {@code searchResult} if null."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void updateSearchResultList(List\u003cShow\u003e searchResult);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Sync a given show."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * {@code syncMovie} must already been retrieved from IMDB database."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void syncMovie(List\u003cMovie\u003e syncMovie);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Returns a string representing the name of the page."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    String getPage(String shortCutKey);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 67,
      "wongchuankai": 7,
      "michelleykw": 44,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.model.show.Genre;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Movie;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Represents the in-memory model of the watchlist data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final WatchList watchList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final WatchList searchResult \u003d new WatchList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final FilteredList\u003cShow\u003e unWatchedList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final FilteredList\u003cShow\u003e watchedList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private FilteredList\u003cShow\u003e filteredShows;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private final String[] pageResult \u003d {\"Watchlist\", \"Watchedlist\", \"Search\", \"Statistics\"};"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Initializes a ModelManager with the given watchList and userPrefs."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ModelManager(ReadOnlyWatchList watchList, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        CollectionUtil.requireAllNonNull(watchList, userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        logger.fine(\"Initializing with watchlist: \" + watchList + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.watchList \u003d new WatchList(watchList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        filteredShows \u003d new FilteredList\u003c\u003e(this.watchList.getShowList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        unWatchedList \u003d new FilteredList\u003c\u003e(this.watchList.getShowList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        updateUnWatchedShowList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        watchedList \u003d new FilteredList\u003c\u003e(this.watchList.getShowList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        updateWatchedShowList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this(new WatchList(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Path getWatchListFilePath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return userPrefs.getWatchListFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void setWatchListFilePath(Path watchListFilePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(watchListFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        userPrefs.setWatchListFilePath(watchListFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d WatchList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void setWatchList(ReadOnlyWatchList watchList) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.watchList.resetData(watchList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ReadOnlyWatchList getWatchList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return watchList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public boolean hasShow(Show show) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(show);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return watchList.hasShow(show);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public boolean hasShowName(Name showName) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        requireNonNull(showName);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return watchList.hasName(showName);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public List\u003cShow\u003e getShowIfHasName(Name showName) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        requireNonNull(showName);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return watchList.getShowIfHasName(showName);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public boolean hasActor(Set\u003cActor\u003e actorSet) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        requireNonNull(actorSet);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return watchList.hasActor(actorSet);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public List\u003cShow\u003e getShowIfHasActor(Set\u003cActor\u003e actorSet) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        requireNonNull(actorSet);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return watchList.getShowIfHasActor(actorSet);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public List\u003cShow\u003e getShowIfIsGenre(Set\u003cGenre\u003e genreSet) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        requireNonNull(genreSet);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return watchList.getShowIfIsGenre(genreSet);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void deleteShow(Show target) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        watchList.removeShow(target);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void addShow(Show show) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        watchList.addShow(show);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void setShow(Show target, Show editedShow) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedShow);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        watchList.setShow(target, editedShow);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void syncMovie(List\u003cMovie\u003e syncMovie) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public String getPage(String shortCutKey) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        int pageNumber \u003d Integer.parseInt(shortCutKey) - 1;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return pageResult[pageNumber];"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Show List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Show} backed by the internal list of"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * {@code versionedWatchList}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ObservableList\u003cShow\u003e getFilteredShowList() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return filteredShows;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void updateFilteredShowList(Predicate\u003cShow\u003e predicate) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        filteredShows.setPredicate(predicate);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns an unmodifiable view of the watched list of {@code Show} backed by the internal list of"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * {@code versionedWatchList}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ObservableList\u003cShow\u003e getUnWatchedShowList() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return unWatchedList;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns an unmodifiable view of the watched list of {@code Show} backed by the internal list of"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * {@code versionedWatchList}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ObservableList\u003cShow\u003e getWatchedShowList() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return watchedList;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void updateUnWatchedShowList() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        unWatchedList.setPredicate(Model.PREDICATE_UNWATCHED_SHOWS);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void updateWatchedShowList() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        watchedList.setPredicate(Model.PREDICATE_WATCHED_SHOWS);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void updateSearchResultList(List\u003cShow\u003e shows) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        searchResult.setShows(shows);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        updateFilteredShowList(PREDICATE_ALL_SHOWS);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ObservableList\u003cShow\u003e getSearchResultList() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return searchResult.getShowList();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return watchList.equals(other.watchList)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 filteredShows.equals(other.filteredShows);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 99,
      "wongchuankai": 9,
      "michelleykw": 34,
      "-": 107
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    Path getWatchListFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/ReadOnlyWatchList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Unmodifiable view of a watchlist"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public interface ReadOnlyWatchList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns an unmodifiable view of the watchlist."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * This list will not contain any duplicate shows."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    ObservableList\u003cShow\u003e getShowList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 13,
      "heze8": 3
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private Path watchListFilePath \u003d Paths.get(\"data\" , \"watchlist.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        setWatchListFilePath(newUserPrefs.getWatchListFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Path getWatchListFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return watchListFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void setWatchListFilePath(Path watchListFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(watchListFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.watchListFilePath \u003d watchListFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 watchListFilePath.equals(o.watchListFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return Objects.hash(guiSettings, watchListFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + watchListFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 12,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/WatchList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.model.show.Genre;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.UniqueShowList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Duplicates are not allowed (by .isSameShow comparison)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class WatchList implements ReadOnlyWatchList {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final UniqueShowList shows;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        shows \u003d new UniqueShowList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public WatchList() {}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Creates an WatchList using the Shows in the {@code toBeCopied}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public WatchList(ReadOnlyWatchList toBeCopied) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Replaces the contents of the watchlist with {@code shows}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * {@code shows} must not contain duplicate shows."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void setShows(List\u003cShow\u003e shows) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.shows.setShows(shows);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Resets the existing data of this {@code WatchList} with {@code newData}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void resetData(ReadOnlyWatchList newData) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        setShows(newData.getShowList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    //// show-level operations"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns true if a show with the same identity as {@code show} exists in the WatchList."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param show The show to be checked if contained in the unique watchlist."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if the show is contained in the unique watchlist."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public boolean hasShow(Show show) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(show);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return shows.contains(show);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns true if a show with the same name as {@code name} exists in the WatchList."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param name The name of the show to be checked."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if the show with the same name as {@code name} exists in the WatchList."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public boolean hasName(Name name) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return shows.hasShowName(name);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns the list of shows that has the same name as {@code showName} as the current watch list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param showName The name of the show to be checked."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return The list of shows that has the same name as {@code showName} as the current watch list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public List\u003cShow\u003e getShowIfHasName(Name showName) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        requireNonNull(showName);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return shows.getShowIfHasName(showName);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns true if a show with any of the actor as that in {@code actorSet} exists in the WatchList."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param actorSet The set of the actors to be checked."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if the show with any of the actor as that in {@code actorSet} exists in the WatchList."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public boolean hasActor(Set\u003cActor\u003e actorSet) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        requireNonNull(actorSet);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return shows.hasActor(actorSet);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns the list of shows that has the same name as {@code actorSet} as the current watch list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param actorSet The set of the actors to be checked."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return The list of shows that has the same name as {@code actorSet} as the current watch list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public List\u003cShow\u003e getShowIfHasActor(Set\u003cActor\u003e actorSet) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        requireNonNull(actorSet);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return shows.getShowIfHasActor(actorSet);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns the list of shows that has the same genre as {@code actorSet} as the current watch list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param genreSet The set of the genres to be checked."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return The list of shows that has the same genre as {@code actorSet} as the current watch list."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public List\u003cShow\u003e getShowIfIsGenre(Set\u003cGenre\u003e genreSet) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        requireNonNull(genreSet);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return shows.getShowIfIsGenre(genreSet);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Adds a show to the watchlist."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * The show must not already exist in the watchlist."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param s The show to be added."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void addShow(Show s) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        shows.add(s);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Replaces the given show {@code target} in the list with {@code editedShow}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * {@code target} must exist in the watchlist."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * The show identity of {@code editedShow} must not be the same as another existing show in the watchlist."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void setShow(Show target, Show editedShow) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(editedShow);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        shows.setShow(target, editedShow);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Removes {@code key} from this {@code WatchList}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * {@code key} must exist in the watchlist."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void removeShow(Show key) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        shows.remove(key);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return shows.asUnmodifiableObservableList().size() + \" shows\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ObservableList\u003cShow\u003e getShowList() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return shows.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                || (other instanceof WatchList // instanceof handles nulls"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 shows.equals(((WatchList) other).shows));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return shows.hashCode();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 120,
      "michelleykw": 56
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/actor/Actor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model.actor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static java.util.Objects.isNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Represents an Actor in a show in the watchlist."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidActorName(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class Actor {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            \"Actor names should only contain characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * The first character of the actor name must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public static final String DEFAULT_VALUE \u003d \"n.a.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public final String actorName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Actor(String name) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": "        if (isNull(name)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": "            name \u003d DEFAULT_VALUE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        actorName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static boolean isValidActorName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public String getActorName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return actorName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return actorName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                || (other instanceof Actor // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 actorName.equals(((Actor) other).actorName)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return actorName.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 53,
      "michelleykw": 3,
      "heze8": 6
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/show/Date.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static java.util.Objects.isNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Represents a Show\u0027s date of release in the watchlist."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Dates can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public static final String DEFAULT_VALUE \u003d \"?\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public Date() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "        value \u003d DEFAULT_VALUE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Constructs an {@code Date}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heze8"
        },
        "content": "        //instead of having constraints perhaps could check if the object is null in the creation"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (isNull(date) || date.equals(\"\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": "            date \u003d DEFAULT_VALUE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        value \u003d date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 value.equals(((Date) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 47,
      "michelleykw": 3,
      "heze8": 6
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/show/Description.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static java.util.Objects.isNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Represents a Show\u0027s description in the watchlist."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Description should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"n.a.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * The first character of the show\u0027s description must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public final String fullDescription;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public Description() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        fullDescription \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": "        if (isNull(description) || description.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": "            description \u003d DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        fullDescription \u003d description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return fullDescription;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 fullDescription.equals(((Description) other).fullDescription)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return fullDescription.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 51,
      "wongchuankai": 3,
      "michelleykw": 4,
      "heze8": 5
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/show/Episode.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Represents an Episode of a TvShow in the watchlist."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class Episode {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_EPISODE_NAME \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            \"Episode names should only contain characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_EPISODE_NUMBER \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            \"Episode numbers should only be integers greater than 0, and it should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * The first character of the episode name must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final String episodeName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final int episodeNum;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Episode(String episodeName, int episodeNum) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.episodeName \u003d episodeName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.episodeNum \u003d episodeNum;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public String getEpisodeName() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return episodeName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int getEpisodeNum() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return episodeNum;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static boolean isValidEpisodeName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns true if a given integer is a valid episode number."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static boolean isValidEpisodeNum(int test) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return test \u003e 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 47,
      "heze8": 1
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/show/Genre.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static java.util.Objects.isNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Represents an Genre of a show in the watchlist."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidGenreName(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class Genre {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            \"Genre names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * The first character of the genre name must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public static final String DEFAULT_VALUE \u003d \"n.a.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public final String genreName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Genre(String name) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (isNull(name)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            name \u003d DEFAULT_VALUE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        genreName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static boolean isValidGenreName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public String getGenreName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return genreName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return genreName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                || (other instanceof Genre // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 genreName.equals(((Genre) other).genreName)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return genreName.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 61,
      "heze8": 1
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/show/IsWatched.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Represents a Show\u0027s watched or not field in the watchlist."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Guarantees: is valid as declared in {@link #isValidIsWatched(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class IsWatched {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            \"The watched value of a show can only be \u0027true\u0027 or \u0027false\u0027 (case in-sensitive)\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * The first character of the show must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public final boolean value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public IsWatched() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        value \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param isWatched A valid boolean."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public IsWatched(String isWatched) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(isWatched);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        checkArgument(isValidIsWatched(isWatched), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        value \u003d Boolean.parseBoolean(isWatched);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns true if a given String is a valid isWatched."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static boolean isValidIsWatched(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return test.equals(\"true\") || test.equals(\"false\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public boolean getIsWatchedBoolean() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return Boolean.toString(value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                || (other instanceof IsWatched // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((IsWatched) other).value); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return value ? 1 : 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 59,
      "michelleykw": 7
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/show/Movie.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Represents a Movie in the watchlist."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class Movie extends Show {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Movie(Name name, Description description, IsWatched isWatched,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                 Date dateOfRelease, RunningTime runningTime, Set\u003cActor\u003e actors) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        super(name, description, isWatched, dateOfRelease, runningTime, actors);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        super.setType(\"Movie\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int getNumOfEpisodesWatched() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int getTotalNumOfEpisodes() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public List\u003cTvSeason\u003e getTvSeasons() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int getLastWatchedSeasonNum() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int getLastWatchedSeasonEpisode() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int getNumOfSeasons() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int getNumOfEpisodesOfSeason(int seasonNum) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 55
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/show/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static java.util.Objects.isNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Represents a Show\u0027s name in the watchlist."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"n.a.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            \"Show names should only contain characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * The first character of the show must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public final String showName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public Name() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        showName \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heze8"
        },
        "content": "        if (isNull(name)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": "            name \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        showName \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return showName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return showName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 showName.equals(((Name) other).showName)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return showName.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 13,
      "michelleykw": 5,
      "heze8": 5,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/show/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Tests that a {@code Show}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cShow\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public boolean test(Show show) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(show.getName().showName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 4,
      "heze8": 2,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/show/Poster.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static java.util.Objects.isNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.embed.swing.SwingFXUtils;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.api.model.ImageRetrieval;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": " * Represents a Show\u0027s poster in the watchlist."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "public class Poster {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(Poster.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private static final String PLACEHOLDER_IMAGE \u003d \"/images/poster-placeholder.png\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private static final String ROOT_LOCATION \u003d ImageRetrieval.IMAGE_CACHE_LOCATION + File.separator;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private Image image;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private String imagePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private boolean isPlaceholder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Constructs a Poster class which defaults to a placeholder image to be displayed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public Poster() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heze8"
        },
        "content": "        isPlaceholder \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": "        imagePath \u003d PLACEHOLDER_IMAGE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Constructs a {@code Poster} with the path of the image given."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param path the path of the image in the save location."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public Poster(String path) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heze8"
        },
        "content": "        if (isNull(path)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heze8"
        },
        "content": "            isPlaceholder \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heze8"
        },
        "content": "            imagePath \u003d PLACEHOLDER_IMAGE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heze8"
        },
        "content": "            isPlaceholder \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heze8"
        },
        "content": "            imagePath \u003d path;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Returns the image path of the image."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return string format of the image path."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public String getImagePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return imagePath;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Returns the image of the Poster."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return the Image to be displayed in the application."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public Image getImage() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "heze8"
        },
        "content": "        if (isPlaceholder) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return new Image(PLACEHOLDER_IMAGE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "heze8"
        },
        "content": "            String url \u003d ROOT_LOCATION + imagePath;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "heze8"
        },
        "content": "            File file \u003d new File(url);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            image \u003d SwingFXUtils.toFXImage(ImageIO.read(file), null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "heze8"
        },
        "content": "            if (image \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "heze8"
        },
        "content": "                throw new NullPointerException(\"image is null in poster with url: \" + url);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return image;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (IOException i) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "heze8"
        },
        "content": "            logger.info(\"Cause: \" + i + \" in Poster class for imagePath \" + imagePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return new Image(PLACEHOLDER_IMAGE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "heze8"
        },
        "content": "            logger.info(\"Cause: \" + e + \" in Poster class for imagePath \" + imagePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return new Image(PLACEHOLDER_IMAGE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 12,
      "heze8": 73
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/show/RunningTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Represents a Show\u0027s Running Time in the watchlist."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class RunningTime {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    // For now the running time will be an integer, since that is what the API returns it as."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            \"Running time cannot be blank and can take only non-negative integers.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS2 \u003d MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            + \"It cannot be more than JAVA max integer value\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public final int value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public RunningTime() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        value \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Constructs an {@code RunningTime}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param runningTime A valid running time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public RunningTime(int runningTime) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(runningTime);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        checkArgument(isValidRunningTime(runningTime), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        value \u003d runningTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns true if a given integer is a valid running time."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static boolean isValidRunningTime(int test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return test \u003e\u003d 0 \u0026\u0026 test \u003c Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return String.valueOf(value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                || (other instanceof RunningTime // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((RunningTime) other).value); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 47,
      "wongchuankai": 7,
      "michelleykw": 4
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/show/Show.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Represents a Show in the watchlist."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public abstract class Show {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    //identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final Date dateOfRelease;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final IsWatched isWatched;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    //data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final RunningTime runningTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final Set\u003cActor\u003e actors \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private Poster poster;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final Set\u003cGenre\u003e genres \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Show(Name name, Description description, IsWatched isWatched, Date dateOfRelease,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                RunningTime runningTime, Set\u003cActor\u003e actors) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": "        this.poster \u003d new Poster();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        CollectionUtil.requireAllNonNull(name, description, isWatched, dateOfRelease, runningTime, actors);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.isWatched \u003d isWatched;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.dateOfRelease \u003d dateOfRelease;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.runningTime \u003d runningTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.actors.addAll(actors);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public void setPoster(Poster poster) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heze8"
        },
        "content": "        this.poster \u003d poster;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public Poster getPoster() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return poster;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void setType(String type) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Date getDateOfRelease() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return dateOfRelease;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public IsWatched isWatched() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return isWatched;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public RunningTime getRunningTime() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return runningTime;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public abstract int getNumOfEpisodesWatched();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public abstract int getTotalNumOfEpisodes();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public abstract List\u003cTvSeason\u003e getTvSeasons();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public abstract int getLastWatchedSeasonNum();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public abstract int getLastWatchedSeasonEpisode();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public abstract int getNumOfSeasons();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public abstract int getNumOfEpisodesOfSeason(int seasonNum);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns an immutable actor set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Set\u003cActor\u003e getActors() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return Collections.unmodifiableSet(actors);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns an immutable genre set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Set\u003cGenre\u003e getGenres() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return Collections.unmodifiableSet(genres);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void addGenres(Set\u003cGenre\u003e genres) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.genres.addAll(genres);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns true if both Shows of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * This defines a weaker notion of equality between two shows."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public boolean isSameShow(Show otherShow) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (otherShow \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return otherShow !\u003d null"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 otherShow.getName().equals(getName())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 otherShow.getType().equals(getType())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 (otherShow.getDateOfRelease().equals(getDateOfRelease()) || otherShow.isWatched() \u003d\u003d (isWatched()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Return true if the other show has name similar to the current show."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param showToBeSearched Show to be compare to this show."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if the other show has name similar to the current show."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public boolean hasNameWithWord(Show showToBeSearched) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        if (isSameName(showToBeSearched)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            return this.getName().getName().toLowerCase().contains(showToBeSearched.getName().getName().toLowerCase());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Checks if two shows have the same name."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param otherShow other show to be checked."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @return boolean whether the 2 shows are the same."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public boolean isSameName(Show otherShow) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        if (otherShow \u003d\u003d this) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return otherShow !\u003d null \u0026\u0026 otherShow.getName().equals(getName());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Return true if the other show has actor similar to the current show."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param showToBeSearched Show to be compare to this show."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if the other show has name similar to the current show."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public boolean hasActorWithName(Show showToBeSearched) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        Set\u003cActor\u003e actorSearchedSet \u003d showToBeSearched.getActors();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        for (Actor actorSearched : actorSearchedSet) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            Set\u003cActor\u003e actorDataSet \u003d this.getActors();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            for (Actor actorData : actorDataSet) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                if (actorData.getActorName().toLowerCase().contains(actorSearched.getActorName().toLowerCase())) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * tba"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param showToBeSearched tba"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return tba"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public boolean hasGenre(Show showToBeSearched) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        Set\u003cGenre\u003e genreSearchedSet \u003d showToBeSearched.getGenres();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        for (Genre genreSearched : genreSearchedSet) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            Set\u003cGenre\u003e genreDataSet \u003d this.getGenres();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            for (Genre genreData : genreDataSet) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                if (genreData.getGenreName().toLowerCase().contains(genreSearched.getGenreName().toLowerCase())) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns true if both shows have the same identity and data fields."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * This defines a stronger notion of equality between two shows."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!(other instanceof Show)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show otherShow \u003d (Show) other;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return otherShow.getName().equals(getName())"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                \u0026\u0026 otherShow.getType().equals(getType())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 otherShow.getDateOfRelease().equals(getDateOfRelease())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                \u0026\u0026 (otherShow.isWatched().equals(isWatched()))"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 otherShow.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 otherShow.getRunningTime().equals(getRunningTime())"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 otherShow.getActors().equals(getActors());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return Objects.hash(name, type, dateOfRelease, isWatched, description, runningTime, actors);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .append(\" Date of Release: \")"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .append(getDateOfRelease())"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .append(\" Running Time: \")"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .append(getRunningTime())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .append(\" Watched: \")"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .append(isWatched().toString())"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .append(\" Actors: \");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        getActors().forEach(builder::append);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 161,
      "wongchuankai": 1,
      "michelleykw": 57,
      "tswuxia": 2,
      "heze8": 15
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/show/TvSeason.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Represents a TvSeason of a TvShow in the watchlist."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class TvSeason {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_SEASON_NUM \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            \"Season numbers should be integers greater than 0.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_TOTAL_EPISODES \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            \"Total number of episodes in a season should be integers greater or equal to 0.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final int seasonNum;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final int totalNumOfEpisodes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final ArrayList\u003cEpisode\u003e episodes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public TvSeason(int seasonNum, int totalNumOfEpisodes, ArrayList\u003cEpisode\u003e episodes) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.seasonNum \u003d seasonNum;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.totalNumOfEpisodes \u003d totalNumOfEpisodes;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.episodes \u003d episodes;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int getSeasonNum() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return seasonNum;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int getTotalNumOfEpisodes() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return totalNumOfEpisodes;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ArrayList\u003cEpisode\u003e getEpisodes() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return episodes;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns true if a given integer is a valid seasonNum."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static boolean isValidTvSeasonNumber(int test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return test \u003e 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns true if a given integer is a valid total number of episodes."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static boolean isValidTotalNumOfEpisodes(int test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return test \u003e\u003d 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 49,
      "heze8": 1
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/show/TvShow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Represents a TvShow in the watchlist."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class TvShow extends Show {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private int numOfEpisodesWatched;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private List\u003cTvSeason\u003e tvSeasons;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final int totalNumOfEpisodes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public TvShow(Name name, Description description, IsWatched isWatched,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                  Date dateOfRelease, RunningTime runningTime, Set\u003cActor\u003e actors,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                  int numOfEpisodesWatched, int totalNumOfEpisodes, List\u003cTvSeason\u003e tvSeasons) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        super(name, description, isWatched, dateOfRelease, runningTime, actors);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.numOfEpisodesWatched \u003d numOfEpisodesWatched;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.totalNumOfEpisodes \u003d totalNumOfEpisodes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.tvSeasons \u003d tvSeasons;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        super.setType(\"Tv Show\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int getNumOfEpisodesWatched() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return numOfEpisodesWatched;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public List\u003cTvSeason\u003e getTvSeasons() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return tvSeasons;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int getTotalNumOfEpisodes() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return totalNumOfEpisodes;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int getLastWatchedSeasonNum() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        int seasonNum \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        int episodeNum \u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        while (episodeNum \u003c numOfEpisodesWatched) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            episodeNum +\u003d tvSeasons.get(seasonNum).getTotalNumOfEpisodes();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            seasonNum++;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return seasonNum;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int getLastWatchedSeasonEpisode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        int cumulativeNumberOfEpisodes \u003d 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        int lastWatchedSeasonNum \u003d getLastWatchedSeasonNum();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        for (int seasonNum \u003d 1; seasonNum \u003c lastWatchedSeasonNum; seasonNum++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            cumulativeNumberOfEpisodes +\u003d tvSeasons.get(seasonNum - 1).getTotalNumOfEpisodes();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        int episodeNum \u003d numOfEpisodesWatched - cumulativeNumberOfEpisodes;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (lastWatchedSeasonNum \u003e 0 \u0026\u0026 episodeNum \u003d\u003d 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            episodeNum \u003d tvSeasons.get(lastWatchedSeasonNum).getTotalNumOfEpisodes();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return episodeNum;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int getNumOfSeasons() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return tvSeasons.size();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int getNumOfEpisodesOfSeason(int seasonNum) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return tvSeasons.get(seasonNum - 1).getTotalNumOfEpisodes();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 77
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/show/Type.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michelleykw"
        },
        "content": " * Enumeration for the possible type of a show, movie or tv."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michelleykw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "public enum Type {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    MOVIE(\"movie\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    TV_SHOW(\"tv\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public final String type;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    Type(String type) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michelleykw": 19
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/show/UniqueShowList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.exceptions.DuplicateShowException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.exceptions.ShowNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * A list of shows that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * A show is considered unique by comparing using {@code show#isSameShow(Show)}. As such, adding and updating of"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * shows uses Show#isSameShow(show) for equality so as to ensure that the show being added or updated is"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * unique in terms of identity in the UniqueShowList. However, the removal of a show uses Show#equals(Object) so"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * as to ensure that the show with exactly the same fields will be removed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * @see Show#isSameShow(Show)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class UniqueShowList implements Iterable\u003cShow\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_SHOW_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            \"The indicated show is not part of your watchlist, please add it first.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final ObservableList\u003cShow\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final ObservableList\u003cShow\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns true if the list contains an equivalent show as the given argument."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param toCheck The show to be checked if present."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if the show to present in the internal list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public boolean contains(Show toCheck) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameShow);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns true if the list contains an equivalent show name as the given argument."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param showName Name of show to be searched."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if a show has the same name as showName."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public boolean hasShowName(Name showName) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        requireNonNull(showName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show movie \u003d new Movie(showName, new Description(), new IsWatched(\"false\"), new Date(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                new RunningTime(), new HashSet\u003c\u003e(new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show tvShow \u003d new TvShow(showName, new Description(), new IsWatched(\"false\"), new Date(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                new RunningTime(), new HashSet\u003c\u003e(new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                0, 0, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return internalList.stream().anyMatch(movie::isSameName) \u0026\u0026 internalList.stream().anyMatch(tvShow::isSameName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns the list of shows that has the same name as showName."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param showName Name of show to be searched."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return List of Show that has the same name as showName."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public List\u003cShow\u003e getShowIfHasName(Name showName) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        requireNonNull(showName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show currentMovie \u003d new Movie(showName, new Description(), new IsWatched(), new Date(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                new RunningTime(), new HashSet\u003c\u003e(new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show currentTvShow \u003d new TvShow(showName, new Description(), new IsWatched(), new Date(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                new RunningTime(), new HashSet\u003c\u003e(new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                0, 0, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return internalList.stream()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .filter(show -\u003e show.hasNameWithWord(currentMovie) || show.hasNameWithWord(currentTvShow))"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns true if the list contains any of the actors in actorSet."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param actorSet Set of actors to be searched."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if a show has the same name as showName."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public boolean hasActor(Set\u003cActor\u003e actorSet) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        requireNonNull(actorSet);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show movie \u003d new Movie(new Name(), new Description(), new IsWatched(), new Date(), new RunningTime(), actorSet);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show tvShow \u003d new TvShow(new Name(), new Description(), new IsWatched(),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                new Date(), new RunningTime(), actorSet, 0, 0, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return internalList.stream().anyMatch(movie::hasActorWithName)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                || internalList.stream().anyMatch(tvShow::hasActorWithName);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns the list of shows that has any of the actor in actorSet."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param actorSet Set of actor(s) to be searched."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return List of shows that has the actor."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public List\u003cShow\u003e getShowIfHasActor(Set\u003cActor\u003e actorSet) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        requireNonNull(actorSet);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show currentMovie \u003d new Movie(new Name(), new Description(), new IsWatched(\"false\"), new Date(),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                new RunningTime(), actorSet);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show currentTvShow \u003d new TvShow(new Name(), new Description(), new IsWatched(\"false\"), new Date(),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                new RunningTime(), actorSet,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                0, 0, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return internalList.stream().filter(show -\u003e show.hasActorWithName(currentMovie)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                || show.hasActorWithName(currentTvShow)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns the list of shows that has any of the genre in genreSet."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param genreSet Set of genre(s) to be searched."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return List of shows that has the genre."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public List\u003cShow\u003e getShowIfIsGenre(Set\u003cGenre\u003e genreSet) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        requireNonNull(genreSet);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show currentMovie \u003d new Movie(new Name(), new Description(), new IsWatched(\"false\"), new Date(),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                new RunningTime(), new HashSet\u003c\u003e(new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        currentMovie.addGenres(genreSet);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show currentTvShow \u003d new TvShow(new Name(), new Description(), new IsWatched(\"false\"), new Date(),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                new RunningTime(), new HashSet\u003c\u003e(new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                0, 0, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        currentTvShow.addGenres(genreSet);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return internalList.stream().filter(show -\u003e show.hasGenre(currentMovie)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                || show.hasGenre(currentTvShow)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Adds a show to the list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * The show must not already exist in the list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param toAdd Show to be added."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void add(Show toAdd) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new DuplicateShowException();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Replaces the show {@code target} in the list with {@code editedShow}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * The show identity of {@code editedShow} must not be the same as another existing show in the list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void setShow(Show target, Show editedShow) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedShow);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new ShowNotFoundException(MESSAGE_SHOW_NOT_FOUND);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!target.isSameShow(editedShow) \u0026\u0026 contains(editedShow)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new DuplicateShowException();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        internalList.set(index, editedShow);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Removes the equivalent show from the list."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * The show must exist in the list."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void remove(Show toRemove) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new ShowNotFoundException(MESSAGE_SHOW_NOT_FOUND);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void setShows(UniqueShowList replacement) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Replaces the contents of this list with {@code shows}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * {@code shows} must not contain duplicate shows."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void setShows(List\u003cShow\u003e shows) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        CollectionUtil.requireAllNonNull(shows);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "heze8"
        },
        "content": "        //currently remove the check if shows are unique"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "heze8"
        },
        "content": "        //if (!showsAreUnique(shows)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "heze8"
        },
        "content": "        //throw new DuplicateShowException();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "heze8"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        internalList.setAll(shows);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ObservableList\u003cShow\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Iterator\u003cShow\u003e iterator() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                || (other instanceof UniqueShowList // instanceof handles nulls"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueShowList) other).internalList));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns true if {@code shows} contains only unique shows."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private boolean showsAreUnique(List\u003cShow\u003e shows) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        for (int i \u003d 0; i \u003c shows.size() - 1; i++) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            for (int j \u003d i + 1; j \u003c shows.size(); j++) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                if (shows.get(i).isSameShow(shows.get(j))) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public boolean showsAreUniquePublic(List\u003cShow\u003e shows) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return showsAreUnique(shows);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public ObservableList\u003cShow\u003e getInternalList() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public ObservableList\u003cShow\u003e getInternalUnmodifiableList() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 158,
      "wongchuankai": 12,
      "michelleykw": 67,
      "heze8": 4
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/show/exceptions/DuplicateShowException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.model.show.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Signals that the operation will result in duplicate Shows (Shows are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class DuplicateShowException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public DuplicateShowException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        super(\"Operation would result in duplicate shows\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 10,
      "heze8": 1
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/show/exceptions/ShowNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.model.show.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Signals that the operation is unable to find the specified show."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class ShowNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ShowNotFoundException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ShowNotFoundException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 16,
      "heze8": 1
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        AppUtil.checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 3,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyWatchList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.WatchList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Genre;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.IsWatched;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Movie;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.RunningTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Contains utility methods for populating {@code WatchList} with sample data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static Show[] getSampleShows() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return new Show[] {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            new Movie(new Name(\"Joker\"), new Description(\"In Gotham City, mentally-troubled comedian Arthur Fleck\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    + \" embarks on a downward-spiral of social revolution and bloody crime. This path brings\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    + \" him face-to-face with his infamous alter-ego: \\\"The Joker\\\".\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    new IsWatched(\"false\"), new Date(\"4 October 2019\"), new RunningTime(122),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    getActorSet(\"Joaquin Phoenix, Robert De Niro\"))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static ReadOnlyWatchList getSampleWatchList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        WatchList sampleWl \u003d new WatchList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        for (Show sampleShow : getSampleShows()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            sampleWl.addShow(sampleShow);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return sampleWl;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns an Actor set containing the list of strings given."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static Set\u003cActor\u003e getActorSet(String... strings) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .map(Actor::new)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns an Genre set containing the list of strings given."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static Set\u003cGenre\u003e getGenreSet(String... strings) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .map(Genre::new)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 37,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/statistics/Statistics.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "package seedu.ezwatchlist.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import seedu.ezwatchlist.api.exceptions.NoRecommendationsException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import seedu.ezwatchlist.api.exceptions.OnlineConnectionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import seedu.ezwatchlist.api.model.ApiInterface;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import seedu.ezwatchlist.api.model.ApiManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import seedu.ezwatchlist.api.util.ApiUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import seedu.ezwatchlist.model.show.Movie;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import seedu.ezwatchlist.model.show.TvShow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import seedu.ezwatchlist.model.show.UniqueShowList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tswuxia"
        },
        "content": " * Represents a Statistics object that contains relevant information."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tswuxia"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "public class Statistics {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private ApiInterface apiManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    public Statistics (Model model) throws OnlineConnectionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            apiManager \u003d new ApiManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        } catch (OnlineConnectionException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            //have to handle"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            apiManager \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     * Gets the movies that are likely to be forgotten by the user."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     * @return an observable list of forgotten shows"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    public ObservableList\u003cShow\u003e getForgotten() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        ObservableList\u003cShow\u003e watchlist \u003d model.getWatchList().getShowList().filtered(show -\u003e !show.isWatched().value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        UniqueShowList forgotten \u003d new UniqueShowList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        if (watchlist.size() \u003e 4) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            forgotten.add(watchlist.get(0));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            forgotten.add(watchlist.get(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            forgotten.add(watchlist.get(2));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        return forgotten.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     * Gets the favourite genre of the user."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     * @return an observable list of genres strings"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    public ObservableMap\u003cString, Integer\u003e getFavouriteGenre() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        HashMap\u003cString, Integer\u003e genreRecords \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        model.getWatchList().getShowList().stream().forEach(show -\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            show.getGenres().stream().forEach(genre -\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                if (genreRecords.containsKey(genre.getGenreName())) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    genreRecords.put(genre.getGenreName(), genreRecords.get(genre.getGenreName()) + 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    genreRecords.put(genre.getGenreName(), 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            });"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        });"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        List\u003cString\u003e keyList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        keyList.addAll(genreRecords.keySet());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        Collections.sort(keyList, (key1, key2) -\u003e genreRecords.get(key2) - genreRecords.get(key1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        ObservableMap\u003cString, Integer\u003e favouriteGenres \u003d FXCollections.observableHashMap();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        for (int i \u003d 0; i \u003c 3 \u0026\u0026 i \u003c keyList.size(); i++) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            favouriteGenres.put(keyList.get(i), genreRecords.get(keyList.get(i)));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        return favouriteGenres;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    public ObservableList\u003cMovie\u003e getMovieRecommendations() throws OnlineConnectionException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        List\u003cMovie\u003e recommendations \u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        if (apiManager \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            apiManager \u003d new ApiManager();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "heze8"
        },
        "content": "        List\u003cMovie\u003e movieList \u003d ApiUtil.filterToMovieFromShow(model.getWatchList().getShowList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        if (movieList.isEmpty()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            System.out.println(\"movie split is empty\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            recommendations \u003d apiManager.getMovieRecommendations(movieList, 3);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            return FXCollections.observableArrayList(recommendations);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        } catch (OnlineConnectionException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        } catch (NoRecommendationsException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    public ObservableList\u003cTvShow\u003e getTvShowRecommendations() throws OnlineConnectionException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        if (apiManager \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            apiManager \u003d new ApiManager();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "heze8"
        },
        "content": "        List\u003cTvShow\u003e tvList \u003d ApiUtil.filterToTvShowsFromShow(model.getWatchList().getShowList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        List\u003cTvShow\u003e recommendations \u003d null;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            recommendations \u003d apiManager.getTvShowRecommendations(tvList, 3);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            return FXCollections.observableArrayList(recommendations);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        } catch (OnlineConnectionException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        } catch (NoRecommendationsException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 3,
      "tswuxia": 116,
      "heze8": 2
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/storage/JsonAdaptedActor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Jackson-friendly version of {@link Actor}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "class JsonAdaptedActor {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final String actorName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Constructs a {@code JsonAdaptedActor} with the given {@code actorName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public JsonAdaptedActor(String actorName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.actorName \u003d actorName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Converts a given {@code Actor} into this class for Jackson use."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public JsonAdaptedActor(Actor source) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        actorName \u003d source.actorName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public String getActorName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return actorName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Converts this Jackson-friendly adapted actor object into the model\u0027s {@code Actor} object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted actor."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Actor toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!Actor.isValidActorName(actorName)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new IllegalValueException(Actor.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return new Actor(actorName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 48
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/storage/JsonAdaptedEpisode.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Episode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Jackson-friendly version of {@link Episode}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "class JsonAdaptedEpisode {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final String episodeName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final int episodeNum;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Constructs a {@code JsonAdaptedEpisode} with the given episode details."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public JsonAdaptedEpisode(@JsonProperty(\"name\") String episodeName,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                              @JsonProperty(\"episode number\") int episodeNum) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.episodeName \u003d episodeName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.episodeNum \u003d episodeNum;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Converts a given {@code Episode} into this class for Jackson use."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public JsonAdaptedEpisode(Episode source) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        episodeName \u003d source.getEpisodeName();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        episodeNum \u003d source.getEpisodeNum();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public String getEpisodeName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return episodeName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int getEpisodeNum() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return episodeNum;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Converts this Jackson-friendly adapted episode object into the model\u0027s {@code Episode} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted episode."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Episode toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!Episode.isValidEpisodeNum(episodeNum)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new IllegalValueException(Episode.MESSAGE_CONSTRAINTS_EPISODE_NUMBER);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return new Episode(episodeName, episodeNum);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 57
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/storage/JsonAdaptedGenre.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Genre;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Jackson-friendly version of {@link Genre}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class JsonAdaptedGenre {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final String genreName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Constructs a {@code JsonAdaptedGenres} with the given {@code Genre}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public JsonAdaptedGenre(String genreName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.genreName \u003d genreName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Converts a given {@code Genre} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public JsonAdaptedGenre(Genre source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        genreName \u003d source.genreName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public String getGenreName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return genreName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Converts this Jackson-friendly adapted genre object into the model\u0027s {@code Genre} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted genre."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Genre toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!Genre.isValidGenreName(genreName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new IllegalValueException(Genre.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return new Genre(genreName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 47
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/storage/JsonAdaptedMovie.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Genre;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.IsWatched;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Movie;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Poster;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.RunningTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Jackson-friendly version of {@link Movie}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class JsonAdaptedMovie {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Show\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final String dateOfRelease;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final String isWatched;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final int runningTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final String poster;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final List\u003cJsonAdaptedActor\u003e actors \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final List\u003cJsonAdaptedGenre\u003e genres \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Constructs a {@code JsonAdaptedMovie} with the given show details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public JsonAdaptedMovie(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                             @JsonProperty(\"type\") String type,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                             @JsonProperty(\"dateOfRelease\") String dateOfRelease,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                             @JsonProperty(\"watched\") String isWatched,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                             @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                             @JsonProperty(\"runningTime\") int runningTime,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                             @JsonProperty(\"actors\") List\u003cJsonAdaptedActor\u003e actors,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                             @JsonProperty(\"poster\") String poster,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                             @JsonProperty(\"genres\") List\u003cJsonAdaptedGenre\u003e genres) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.dateOfRelease \u003d dateOfRelease;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.isWatched \u003d isWatched;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.runningTime \u003d runningTime;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (actors !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.actors.addAll(actors);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.poster \u003d poster;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (genres !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            this.genres.addAll(genres);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Converts a given {@code Movie} into this class for Jackson use."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public JsonAdaptedMovie(Show source) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        name \u003d source.getName().showName;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        type \u003d source.getType();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        dateOfRelease \u003d source.getDateOfRelease().value;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        isWatched \u003d Boolean.toString(source.isWatched().value);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        description \u003d source.getDescription().fullDescription;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        runningTime \u003d source.getRunningTime().value;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        actors.addAll(source.getActors().stream()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .map(JsonAdaptedActor::new)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        poster \u003d source.getPoster().getImagePath();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        genres.addAll(source.getGenres().stream()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .map(JsonAdaptedGenre::new)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Converts this Jackson-friendly adapted tv show object into the model\u0027s {@code TvShow} object."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tv show."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Show toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        final List\u003cActor\u003e showActors \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        for (JsonAdaptedActor actor : actors) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            showActors.add(actor.toModelType());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        final List\u003cGenre\u003e showGenres \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        for (JsonAdaptedGenre genre : genres) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            showGenres.add(genre.toModelType());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (dateOfRelease \u003d\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!Date.isValidDate(dateOfRelease)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        final Date modelDateOfRelease \u003d new Date(dateOfRelease);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!IsWatched.isValidIsWatched(isWatched)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new IllegalValueException(IsWatched.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        final IsWatched modelIsWatched \u003d new IsWatched(isWatched);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!RunningTime.isValidRunningTime(runningTime)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        final RunningTime modelRunningTime \u003d new RunningTime(runningTime);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        final Set\u003cActor\u003e modelActors \u003d new HashSet\u003c\u003e(showActors);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        final Set\u003cGenre\u003e modelGenres \u003d new HashSet\u003c\u003e(showGenres);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show show \u003d new Movie(modelName, modelDescription, modelIsWatched,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                modelDateOfRelease, modelRunningTime, modelActors);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        show.setType(type);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        show.setPoster(new Poster(poster));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        show.addGenres(modelGenres);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return show;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 147,
      "wongchuankai": 4,
      "tswuxia": 2
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/storage/JsonAdaptedShows.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Jackson-friendly version of list of shows."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "class JsonAdaptedShows {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Show\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final List\u003cJsonAdaptedTvShow\u003e tvShows \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final List\u003cJsonAdaptedMovie\u003e movies \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Constructs a {@code JsonAdaptedShows} with the given show details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public JsonAdaptedShows(@JsonProperty(\"tvShows\") List\u003cJsonAdaptedTvShow\u003e tvShows,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                            @JsonProperty(\"movies\") List\u003cJsonAdaptedMovie\u003e movies) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (tvShows !\u003d null) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.tvShows.addAll(tvShows);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (movies !\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.movies.addAll(movies);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Converts a given {@code Show} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public JsonAdaptedShows(List\u003cShow\u003e source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        for (Show show : source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            if (show.getType().equals(\"Movie\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                movies.add(new JsonAdaptedMovie(show));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                tvShows.add(new JsonAdaptedTvShow(show));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public List\u003cJsonAdaptedTvShow\u003e getTvShows() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return tvShows;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public List\u003cJsonAdaptedMovie\u003e getMovies() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return movies;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Converts this Jackson-friendly adapted show object into the model\u0027s {@code Show} object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted show."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public List\u003cShow\u003e toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        final List\u003cShow\u003e shows \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        for (JsonAdaptedTvShow tvShow : tvShows) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            shows.add(tvShow.toModelType());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        for (JsonAdaptedMovie movie : movies) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            shows.add(movie.toModelType());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return shows;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 72
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/storage/JsonAdaptedTvSeason.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Episode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.TvSeason;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Jackson-friendly version of {@link TvSeason}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "class JsonAdaptedTvSeason {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final int seasonNumber;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final int totalNumOfEpisodes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final List\u003cJsonAdaptedEpisode\u003e episodes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Constructs a {@code JsonAdaptedTvSeason} with the given {@code seasonNumber}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public JsonAdaptedTvSeason(@JsonProperty(\"seasonNumber\") int seasonNumber,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                               @JsonProperty(\"totalNumOfEpisodes\") int totalNumOfEpisodes,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                               @JsonProperty(\"episodes\") List\u003cJsonAdaptedEpisode\u003e episodes) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.seasonNumber \u003d seasonNumber;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.totalNumOfEpisodes \u003d totalNumOfEpisodes;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (episodes !\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.episodes.addAll(episodes);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Converts a given {@code TvSeason} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public JsonAdaptedTvSeason(TvSeason source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        seasonNumber \u003d source.getSeasonNum();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        totalNumOfEpisodes \u003d source.getTotalNumOfEpisodes();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        episodes.addAll(source.getEpisodes().stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .map(JsonAdaptedEpisode::new)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int getSeasonNumber() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return seasonNumber;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int getTotalNumOfEpisodes() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return totalNumOfEpisodes;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public List\u003cJsonAdaptedEpisode\u003e getEpisodes() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return episodes;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Converts this Jackson-friendly adapted tv season object into the model\u0027s {@code TvSeason} object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted TvSeason."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public TvSeason toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        final ArrayList\u003cEpisode\u003e seasonEpisodes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        for (JsonAdaptedEpisode episode : episodes) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            seasonEpisodes.add(episode.toModelType());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!TvSeason.isValidTvSeasonNumber(seasonNumber)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new IllegalValueException(TvSeason.MESSAGE_CONSTRAINTS_SEASON_NUM);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!TvSeason.isValidTotalNumOfEpisodes(totalNumOfEpisodes)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new IllegalValueException(TvSeason.MESSAGE_CONSTRAINTS_TOTAL_EPISODES);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return new TvSeason(seasonNumber, totalNumOfEpisodes, seasonEpisodes);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 79
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/storage/JsonAdaptedTvShow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Genre;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.IsWatched;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Poster;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.RunningTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.TvSeason;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.TvShow;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Jackson-friendly version of {@link TvShow}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class JsonAdaptedTvShow {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Show\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final String dateOfRelease;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final String isWatched;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final int runningTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final String poster;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final List\u003cJsonAdaptedActor\u003e actors \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final int numOfEpisodesWatched;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final int totalNumOfEpisodes;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final List\u003cJsonAdaptedTvSeason\u003e tvSeasons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final List\u003cJsonAdaptedGenre\u003e genres \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Constructs a {@code JsonAdaptedShows} with the given show details."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public JsonAdaptedTvShow(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                             @JsonProperty(\"type\") String type,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                             @JsonProperty(\"dateOfRelease\") String dateOfRelease,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                             @JsonProperty(\"watched\") String isWatched,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                             @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                             @JsonProperty(\"runningTime\") int runningTime,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                             @JsonProperty(\"actors\") List\u003cJsonAdaptedActor\u003e actors,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                             @JsonProperty(\"poster\") String poster,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                             @JsonProperty(\"numOfEpisodesWatched\") int numOfEpisodesWatched,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                             @JsonProperty(\"totalNumOfEpisodes\") int totalNumOfEpisodes,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                             @JsonProperty(\"tvSeasons\") List\u003cJsonAdaptedTvSeason\u003e tvSeasons,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                             @JsonProperty(\"genres\") List\u003cJsonAdaptedGenre\u003e genres) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.dateOfRelease \u003d dateOfRelease;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.isWatched \u003d isWatched;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.runningTime \u003d runningTime;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (actors !\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.actors.addAll(actors);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.poster \u003d poster;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.numOfEpisodesWatched \u003d numOfEpisodesWatched;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.totalNumOfEpisodes \u003d totalNumOfEpisodes;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (tvSeasons !\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.tvSeasons.addAll(tvSeasons);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (genres !\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            this.genres.addAll(genres);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Converts a given {@code TvShow} into this class for Jackson use."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public JsonAdaptedTvShow(Show source) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        name \u003d source.getName().showName;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        type \u003d source.getType();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        dateOfRelease \u003d source.getDateOfRelease().value;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        isWatched \u003d Boolean.toString(source.isWatched().value);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        description \u003d source.getDescription().fullDescription;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        runningTime \u003d source.getRunningTime().value;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        actors.addAll(source.getActors().stream()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .map(JsonAdaptedActor::new)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        poster \u003d source.getPoster().getImagePath();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        genres.addAll(source.getGenres().stream()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .map(JsonAdaptedGenre::new)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        numOfEpisodesWatched \u003d source.getNumOfEpisodesWatched();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        totalNumOfEpisodes \u003d source.getTotalNumOfEpisodes();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        tvSeasons.addAll(source.getTvSeasons().stream()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .map(JsonAdaptedTvSeason::new)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Converts this Jackson-friendly adapted tv show object into the model\u0027s {@code TvShow} object."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tv show."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Show toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        final List\u003cActor\u003e showActors \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        for (JsonAdaptedActor actor : actors) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            showActors.add(actor.toModelType());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        final List\u003cTvSeason\u003e showSeasons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        for (JsonAdaptedTvSeason season : tvSeasons) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            showSeasons.add(season.toModelType());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        final List\u003cGenre\u003e showGenres \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        for (JsonAdaptedGenre genre : genres) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            showGenres.add(genre.toModelType());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (dateOfRelease \u003d\u003d null) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!Date.isValidDate(dateOfRelease)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        final Date modelDateOfRelease \u003d new Date(dateOfRelease);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!IsWatched.isValidIsWatched(isWatched)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new IllegalValueException(IsWatched.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        final IsWatched modelIsWatched \u003d new IsWatched(isWatched);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!RunningTime.isValidRunningTime(runningTime)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        final RunningTime modelRunningTime \u003d new RunningTime(runningTime);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        final Set\u003cActor\u003e modelActors \u003d new HashSet\u003c\u003e(showActors);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        final Set\u003cGenre\u003e modelGenres \u003d new HashSet\u003c\u003e(showGenres);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show show \u003d new TvShow(modelName, modelDescription, modelIsWatched,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                modelDateOfRelease, modelRunningTime, modelActors,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                numOfEpisodesWatched, totalNumOfEpisodes, showSeasons);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        show.setType(type);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        show.setPoster(new Poster(poster));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        show.addGenres(modelGenres);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return show;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 169,
      "tswuxia": 2
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/storage/JsonSerializableWatchList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyWatchList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.WatchList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * An Immutable WatchList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "@JsonRootName(value \u003d \"watchlist\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "class JsonSerializableWatchList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SHOW \u003d \"Show list contains duplicate show(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private JsonAdaptedShows shows;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Constructs a {@code JsonSerializableWatchList} with the given shows."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public JsonSerializableWatchList(@JsonProperty(\"shows\") JsonAdaptedShows shows) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.shows \u003d shows;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Converts a given {@code ReadOnlyWatchList} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableWatchList}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public JsonSerializableWatchList(ReadOnlyWatchList source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        ObservableList\u003cShow\u003e showList \u003d source.getShowList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        List\u003cJsonAdaptedMovie\u003e movies \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        List\u003cJsonAdaptedTvShow\u003e tvShows \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        for (Show show : showList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            if (show.getType().equals(\"Movie\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                movies.add(new JsonAdaptedMovie(show));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            } else if (show.getType().equals(\"Tv Show\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                tvShows.add(new JsonAdaptedTvShow(show));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        shows \u003d new JsonAdaptedShows(tvShows, movies);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Converts this watchlist into the model\u0027s {@code WatchList} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public WatchList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        WatchList watchList \u003d new WatchList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        List\u003cShow\u003e list \u003d shows.toModelType();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        for (Show show : list) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            if (watchList.hasShow(show)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_SHOW);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            watchList.addShow(show);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return watchList;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public JsonAdaptedShows getShows() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return shows;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 71,
      "wongchuankai": 3
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/storage/JsonWatchListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyWatchList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * A class to access WatchList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class JsonWatchListStorage implements WatchListStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonWatchListStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public JsonWatchListStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Path getWatchListFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Optional\u003cReadOnlyWatchList\u003e readWatchList() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return readWatchList(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Similar to {@link #readWatchList()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Optional\u003cReadOnlyWatchList\u003e readWatchList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Optional\u003cJsonSerializableWatchList\u003e jsonWatchList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                filePath, JsonSerializableWatchList.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!jsonWatchList.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return Optional.of(jsonWatchList.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void saveWatchList(ReadOnlyWatchList watchList) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        saveWatchList(watchList, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Similar to {@link #saveWatchList(ReadOnlyWatchList)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void saveWatchList(ReadOnlyWatchList watchList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(watchList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableWatchList(watchList), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 81
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyWatchList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public interface Storage extends WatchListStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    Path getWatchListFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    Optional\u003cReadOnlyWatchList\u003e readWatchList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    void saveWatchList(ReadOnlyWatchList watchList) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 9,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyWatchList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Manages storage of WatchList data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private WatchListStorage watchListStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public StorageManager(WatchListStorage watchListStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.watchListStorage \u003d watchListStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d WatchList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Path getWatchListFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return watchListStorage.getWatchListFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Optional\u003cReadOnlyWatchList\u003e readWatchList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return readWatchList(watchListStorage.getWatchListFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Optional\u003cReadOnlyWatchList\u003e readWatchList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return watchListStorage.readWatchList(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void saveWatchList(ReadOnlyWatchList watchList) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        saveWatchList(watchList, watchListStorage.getWatchListFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void saveWatchList(ReadOnlyWatchList watchList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        watchListStorage.saveWatchList(watchList, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 21,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/storage/WatchListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyWatchList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.WatchList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Represents a storage for {@link WatchList}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public interface WatchListStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    Path getWatchListFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns WatchList data as a {@link ReadOnlyWatchList}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    Optional\u003cReadOnlyWatchList\u003e readWatchList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @see #getWatchListFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    Optional\u003cReadOnlyWatchList\u003e readWatchList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Saves the given {@link ReadOnlyWatchList} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param watchList cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    void saveWatchList(ReadOnlyWatchList watchList) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @see #saveWatchList(ReadOnlyWatchList)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    void saveWatchList(ReadOnlyWatchList watchList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 46
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.api.exceptions.NoRecommendationsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.api.exceptions.OnlineConnectionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     * Sets the main window of the command box."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     * @param mainWindow"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    public void setMainWindow(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        } catch (NullPointerException | CommandException | ParseException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                | OnlineConnectionException | NoRecommendationsException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException, OnlineConnectionException,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                NoRecommendationsException;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 5,
      "wongchuankai": 6,
      "tswuxia": 8,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    public static final String USERGUIDE_URL \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \"https://github.com/AY1920S1-CS2103T-F13-4/main/blob/master/docs/UserGuide.adoc\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tswuxia": 2,
      "heze8": 2,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/ui/LoadingPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "package seedu.ezwatchlist.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tswuxia"
        },
        "content": " * A ui for the loading panel that is displayed while api is loading."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tswuxia"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "public class LoadingPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private static final String FXML \u003d \"LoadingPanel.fxml\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private StackPane loadingView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    public LoadingPanel() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tswuxia": 19
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.concurrent.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import javafx.scene.input.KeyCodeCombination;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import seedu.ezwatchlist.api.exceptions.NoRecommendationsException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.api.exceptions.OnlineConnectionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.Logic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import seedu.ezwatchlist.statistics.Statistics;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MAIN_TAB \u003d \"watch-list\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String WATCHED_TAB \u003d \"watched-list\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String SEARCH_TAB \u003d \"search-list\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String STATISTICS_TAB \u003d \"statistics tab\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private static final String ACCELERATOR_ERROR \u003d \"setAccelerator must be called when button is attached to a scene\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private String currentTab;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private Boolean isSearchLoading \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private Boolean isChangedList \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private Statistics statistics;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private ShowListPanel showListPanel;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private WatchedPanel watchedPanel;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private SearchPanel searchPanel;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private StatisticsPanel statisticsPanel;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private LoadingPanel loadingPanel;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private StackPane resultDisplayPlaceHolder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private StackPane contentPanelPlaceholder;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private Button watchlistButton;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private Button watchedButton;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private Button searchButton;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private Button statisticsButton;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private Button currentButton;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic, Statistics statistics) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        this.primaryStage.setTitle(\"Ezwatchlist\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.currentTab \u003d MAIN_TAB;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        this.statistics \u003d statistics;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ShowListPanel getShowListPanel() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return showListPanel;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Logic getLogic() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return logic;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     * Fills up all the placeholders of main window."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        showListPanel \u003d new ShowListPanel(logic.getUnWatchedList());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        showListPanel.setMainWindow(this);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        watchedPanel \u003d new WatchedPanel(logic.getWatchedList());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        watchedPanel.setMainWindow(this);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        searchPanel \u003d new SearchPanel(logic.getSearchResultList());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        searchPanel.setMainWindow(this);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        loadingPanel \u003d new LoadingPanel();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        contentPanelPlaceholder.getChildren().add(showListPanel.getRoot());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        resultDisplayPlaceHolder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        commandBox.setMainWindow(this);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        watchlistButton.getStyleClass().removeAll(\"button\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        watchlistButton.getStyleClass().add(\"button-current\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        currentButton \u003d watchlistButton;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        setSearchAccelerator(searchButton);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        setWatchListAccelerator(watchlistButton);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        setWatchedAccelerator(watchedButton);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        setStatisticsAccelerator(statisticsButton);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private void setSearchAccelerator(final Button button) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Scene scene \u003d button.getScene();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        if (scene \u003d\u003d null) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new IllegalArgumentException(ACCELERATOR_ERROR);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        scene.getAccelerators().put("
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                new KeyCodeCombination(KeyCode.DIGIT3),"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                new Runnable() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                    @Override public void run() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                        goToSearch();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        );"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private void setWatchListAccelerator(final Button button) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Scene scene \u003d button.getScene();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        if (scene \u003d\u003d null) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new IllegalArgumentException(ACCELERATOR_ERROR);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        scene.getAccelerators().put("
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                new KeyCodeCombination(KeyCode.DIGIT1),"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                new Runnable() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                    @Override public void run() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                        goToWatchlist();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        );"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private void setWatchedAccelerator(final Button button) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Scene scene \u003d button.getScene();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        if (scene \u003d\u003d null) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new IllegalArgumentException(ACCELERATOR_ERROR);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        scene.getAccelerators().put("
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                new KeyCodeCombination(KeyCode.DIGIT2),"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                new Runnable() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                    @Override public void run() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                        goToWatched();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        );"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private void setStatisticsAccelerator(final Button button) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Scene scene \u003d button.getScene();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        if (scene \u003d\u003d null) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new IllegalArgumentException(ACCELERATOR_ERROR);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        scene.getAccelerators().put("
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                new KeyCodeCombination(KeyCode.DIGIT4),"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                new Runnable() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                    @Override public void run() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                            goToStatistics();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                        } catch (NoRecommendationsException e) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                            e.printStackTrace();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                        } catch (OnlineConnectionException e) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                            e.printStackTrace();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        );"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ResultDisplay getResultDisplay() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * @see Logic#execute(String, MainWindow, String)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public CommandResult executeCommand(String commandText)"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throws CommandException, ParseException, OnlineConnectionException, NoRecommendationsException {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            switch (currentTab) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            case (MAIN_TAB):"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                logic.updateFilteredShowList(Model.PREDICATE_UNWATCHED_SHOWS);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            case (WATCHED_TAB):"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                logic.updateFilteredShowList(Model.PREDICATE_WATCHED_SHOWS);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            case (SEARCH_TAB):"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                logic.updateFilteredShowList(Model.PREDICATE_NO_SHOWS);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            case (STATISTICS_TAB):"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                logic.updateFilteredShowList(Model.PREDICATE_NO_SHOWS);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText, this, currentTab);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            if (!isSearchLoading) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "                resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "                if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "                    handleHelp();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "                if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "                    handleExit();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                if (commandResult.isShortCutKey()) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                    handleShortCutKey(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                if (commandResult.isChangedList()) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                    isChangedList \u003d true;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                return commandResult;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "heze8"
        },
        "content": "        //catch ParseException here to implement spellcheck"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        } catch (CommandException | ParseException | OnlineConnectionException | NoRecommendationsException e) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        } catch (NullPointerException | InterruptedException e) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * execute short cut key on UI"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * @param feedbackToUser"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * @throws NoRecommendationsException"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * @throws OnlineConnectionException"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private void handleShortCutKey(String feedbackToUser) throws NoRecommendationsException, OnlineConnectionException {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        switch (feedbackToUser) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        case \"Watchlist\":"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            goToWatchlist();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        case \"Watchedlist\":"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            goToWatched();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        case \"Search\":"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            goToSearch();"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        case \"Statistics\":"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            goToStatistics();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     * Populates the contentPanel with watchlist content"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    public void goToWatchlist() {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        contentPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        contentPanelPlaceholder.getChildren().add(showListPanel.getRoot());"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        logic.updateFilteredShowList(Model.PREDICATE_UNWATCHED_SHOWS);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        currentTab \u003d MAIN_TAB;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        move(currentButton, watchlistButton);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        currentButton \u003d watchlistButton;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     * Populates the contentPanel with watched list content"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    public void goToWatched() {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        contentPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        contentPanelPlaceholder.getChildren().add(watchedPanel.getRoot());"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        logic.updateFilteredShowList(Model.PREDICATE_WATCHED_SHOWS);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        currentTab \u003d WATCHED_TAB;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        move(currentButton, watchedButton);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        currentButton \u003d watchedButton;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     * Populates the contentPanel with search content"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    public void goToSearch() {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        if (isSearchLoading) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            contentPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            contentPanelPlaceholder.getChildren().add(loadingPanel.getRoot());"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            contentPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            contentPanelPlaceholder.getChildren().add(searchPanel.getRoot());"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        currentTab \u003d SEARCH_TAB;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        move(currentButton, searchButton);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        currentButton \u003d searchButton;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     * Populates the contentPanel with statistics content"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    public void goToStatistics() throws NoRecommendationsException, OnlineConnectionException {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        if (isChangedList) {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                contentPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                contentPanelPlaceholder.getChildren().add(loadingPanel.getRoot());"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                Task\u003cVoid\u003e task \u003d new Task\u003cVoid\u003e() {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                    protected Void call() throws Exception {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                            statisticsPanel \u003d new StatisticsPanel(statistics.getForgotten(),"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                    statistics.getFavouriteGenre(), statistics.getMovieRecommendations(),"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                    statistics.getTvShowRecommendations());"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                        } catch (OnlineConnectionException e) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                            statisticsPanel \u003d new StatisticsPanel(statistics.getForgotten(),"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                    statistics.getFavouriteGenre(),"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                    null, null);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                            resultDisplay.setFeedbackToUser(\"Note: You are not connected to the internet!\");"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                        return null;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                };"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                task.setOnSucceeded(evt -\u003e {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                    contentPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                    contentPanelPlaceholder.getChildren().add(statisticsPanel.getRoot());"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                    isChangedList \u003d false;"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    currentTab \u003d STATISTICS_TAB;"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                    move(currentButton, statisticsButton);"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                    currentButton \u003d statisticsButton;"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                });"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                new Thread(task).start();"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            contentPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            contentPanelPlaceholder.getChildren().add(statisticsPanel.getRoot());"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            isChangedList \u003d false;"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            currentTab \u003d STATISTICS_TAB;"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            move(currentButton, statisticsButton);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            currentButton \u003d statisticsButton;"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     * Changes the style of the button when changing panels."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     * @param a the button representing the current panel"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     * @param b the button representing the button clicked"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    public void move(Button a, Button b) {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        a.getStyleClass().removeAll(\"button-current\");"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        a.getStyleClass().add(\"button\");"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        b.getStyleClass().removeAll(\"button\");"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        b.getStyleClass().add(\"button-current\");"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    public String getCurrentTab() {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        return currentTab;"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * For logic manager. If command is search, searchResultLogger will be called so logic can update this UI (Main"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Window)"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * @param commandResult"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void searchResultLogger(CommandResult commandResult) {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void setIsSearchLoading() {"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        isSearchLoading \u003d !isSearchLoading;"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 69,
      "wongchuankai": 130,
      "tswuxia": 144,
      "michelleykw": 1,
      "heze8": 1,
      "-": 157
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/ui/NavigationBar.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * A ui for the navigation bar that is displayed at the side of the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "public class NavigationBar extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private static final String FXML \u003d \"NavigationBar.fxml\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    public NavigationBar() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 4,
      "tswuxia": 11
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/ui/RecommendationCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "package seedu.ezwatchlist.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import seedu.ezwatchlist.model.show.Poster;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tswuxia"
        },
        "content": " * An UI component that displays information of a recommended {@code Show}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tswuxia"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "public class RecommendationCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private static final String FXML \u003d \"RecommendationCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    public final Show show;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private ImageView poster;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    public RecommendationCard(Show show) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        this.show \u003d show;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        name.setText(show.getName().showName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        Poster poster \u003d show.getPoster();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        Image image \u003d poster.getImage();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        this.poster.setImage(image);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tswuxia": 40
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/ui/SearchPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * A ui for the search panel that is displayed at the side of the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "public class SearchPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private static final String FXML \u003d \"SearchPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(SearchPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private ShowListPanel showListPanel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private ListView\u003cShow\u003e searchListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public SearchPanel(ObservableList\u003cShow\u003e searchList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        searchListView.setItems(searchList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        searchListView.setCellFactory(listView -\u003e new SearchListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void setMainWindow(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.showListPanel \u003d mainWindow.getShowListPanel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Show} using a {@code SearchShowCard}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    class SearchListViewCell extends ListCell\u003cShow\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        protected void updateItem(Show show, boolean empty) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            super.updateItem(show, empty);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            if (empty || show \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                SearchShowCard searchShowCard \u003d new SearchShowCard(show, getIndex() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                setGraphic(searchShowCard.getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 14,
      "tswuxia": 11,
      "michelleykw": 29
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/ui/SearchShowCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "package seedu.ezwatchlist.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import seedu.ezwatchlist.model.show.Poster;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tswuxia"
        },
        "content": " * An UI component that displays information of a {@code Show}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tswuxia"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "public class SearchShowCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private static final String FXML \u003d \"SearchShowListCard.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    public final Show show;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private int displayedIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private Label type;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private Label dateOfRelease;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private Label runningTime;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private Label lastWatched;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private HBox actors;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private ImageView poster;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private HBox genres;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private VBox information;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    public SearchShowCard(Show show, int displayedIndex) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        this.show \u003d show;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        this.displayedIndex \u003d displayedIndex;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        name.setText(show.getName().showName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        type.setText(\"Type: \" + show.getType());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        dateOfRelease.setText(\"Date of Release: \" + show.getDateOfRelease().value);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        description.setText(\"Description: \" + show.getDescription().fullDescription);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        runningTime.setText(\"Running Time: \" + Integer.toString(show.getRunningTime().value) + \" minutes\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        Poster poster \u003d show.getPoster();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        Image image \u003d poster.getImage();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        this.poster.setImage(image);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        actors.getChildren().add(new Label(\"Actors: \"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        show.getActors().stream().limit(4)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                .sorted(Comparator.comparing(actor -\u003e actor.actorName))"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                .forEach(actor -\u003e actors.getChildren().add(new Label(actor.actorName)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        actors.getChildren().stream().forEach(node -\u003e node.getStyleClass().add(\"cell_small_label\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        show.getGenres().stream()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                .forEach(genre -\u003e genres.getChildren().add(new Label(genre.getGenreName())));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        setLastWatched();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    public int getDisplayedIndex() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        return displayedIndex;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        if (!(other instanceof SearchShowCard)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        SearchShowCard card \u003d (SearchShowCard) other;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                \u0026\u0026 show.equals(card.show);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private void setLastWatched() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        if (show.getType().equals(\"Tv Show\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            if (show.getLastWatchedSeasonNum() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                lastWatched.setText(\"\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                lastWatched.setText(\"Last Watched: \\nSeason \" + show.getLastWatchedSeasonNum()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                        + \" Episode \" + show.getLastWatchedSeasonEpisode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            lastWatched.setText(\"\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tswuxia": 122
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/ui/ShowCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.scene.control.CheckBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.show.Poster;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * An UI component that displays information of a {@code Show}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class ShowCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private static final String FXML \u003d \"ShowListCard.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public final Show show;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private int displayedIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private Label type;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private Label dateOfRelease;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private Label runningTime;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private Label lastWatched;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private HBox actors;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private CheckBox watched;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private ImageView poster;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private HBox genres;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private VBox information;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ShowCard(Show show, int displayedIndex) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.show \u003d show;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.displayedIndex \u003d displayedIndex;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        name.setText(show.getName().showName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        type.setText(\"Type: \" + show.getType());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        dateOfRelease.setText(\"Date of Release: \" + show.getDateOfRelease().value);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        description.setText(\"Description: \" + show.getDescription().fullDescription);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        runningTime.setText(\"Running Time: \" + Integer.toString(show.getRunningTime().value) + \" minutes\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "heze8"
        },
        "content": "        Poster poster \u003d show.getPoster();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "heze8"
        },
        "content": "        Image image \u003d poster.getImage();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "heze8"
        },
        "content": "        this.poster.setImage(image);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        actors.getChildren().add(new Label(\"Actors: \"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        show.getActors().stream().limit(4)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .sorted(Comparator.comparing(actor -\u003e actor.actorName))"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .forEach(actor -\u003e actors.getChildren().add(new Label(actor.actorName)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        actors.getChildren().stream().forEach(node -\u003e node.getStyleClass().add(\"cell_small_label\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        show.getGenres().stream()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .forEach(genre -\u003e genres.getChildren().add(new Label(genre.getGenreName())));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //sets the checkbox selected value to be equal to the watched value of the show"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        watched.setSelected(show.isWatched().value);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        setLastWatched();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void setWatchedListener(ChangeListener changeListener) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.watched.selectedProperty().addListener(changeListener);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public CheckBox getWatched() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return watched;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int getDisplayedIndex() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return displayedIndex;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!(other instanceof ShowCard)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        ShowCard card \u003d (ShowCard) other;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 show.equals(card.show);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private void setLastWatched() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (show.getType().equals(\"Tv Show\")) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            if (show.getLastWatchedSeasonNum() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                lastWatched.setText(\"\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                lastWatched.setText(\"Last Watched: \\nSeason \" + show.getLastWatchedSeasonNum()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                        + \" Episode \" + show.getLastWatchedSeasonEpisode());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            lastWatched.setText(\"\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 110,
      "wongchuankai": 3,
      "tswuxia": 18,
      "heze8": 6
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/ui/ShowListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.api.exceptions.NoRecommendationsException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.api.exceptions.OnlineConnectionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Panel containing the list of shows."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class ShowListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private static final String FXML \u003d \"ShowListPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ShowListPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private ListView\u003cShow\u003e showListView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ShowListPanel(ObservableList\u003cShow\u003e showList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        showListView.setItems(showList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        showListView.setCellFactory(listView -\u003e new ShowListViewCell());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void setMainWindow(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Show} using a {@code ShowCard}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    class ShowListViewCell extends ListCell\u003cShow\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        protected void updateItem(Show show, boolean empty) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            super.updateItem(show, empty);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            if (empty || show \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                ShowCard showCard \u003d new ShowCard(show, getIndex() + 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                setGraphic(showCard.getRoot());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                showCard.setWatchedListener(new ChangeableCheckBox(showCard.getDisplayedIndex()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * This class prevents the user from marking the checkbox by clicking"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @author AxxG \"How to make checkbox or combobox readonly in JavaFX\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    class ChangeableCheckBox implements ChangeListener\u003cBoolean\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        private int displayedIndex;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        ChangeableCheckBox(int displayedIndex) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            super();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.displayedIndex \u003d displayedIndex;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void changed(ObservableValue\u003c? extends Boolean\u003e ov, Boolean oldVal, Boolean newVal) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                mainWindow.executeCommand(\"watch \" + displayedIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            } catch (CommandException | ParseException | OnlineConnectionException | NoRecommendationsException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                mainWindow.getResultDisplay().setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 79,
      "wongchuankai": 2
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/ui/StatisticsPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "package seedu.ezwatchlist.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.scene.control.CheckBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import seedu.ezwatchlist.model.show.Movie;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import seedu.ezwatchlist.model.show.TvShow;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * An UI for the statistics panel."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "public class StatisticsPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private static final String FXML \u003d \"StatisticsPanel.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private ListView\u003cShow\u003e forgottenView;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private HBox favouriteGenres;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private StackPane forgottenPlaceHolder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private ListView\u003cMovie\u003e movieRecommendationView;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private ListView\u003cTvShow\u003e tvRecommendationView;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private StackPane recommendationPlaceHolder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    public StatisticsPanel(ObservableList\u003cShow\u003e forgotten, ObservableMap\u003cString, Integer\u003e favourite,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                           ObservableList\u003cMovie\u003e movieRecommendations, ObservableList\u003cTvShow\u003e tvRecommendations) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        //forgotten"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        if (forgotten.size() \u003e 0) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            forgottenView.setItems(forgotten);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            forgottenView.setCellFactory(listView -\u003e new StatisticsViewCell());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            forgottenPlaceHolder.getChildren().add(new Label(\"You currently do not have any forgotten entry!\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        //favourite"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        List\u003cString\u003e favouriteKeys \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        favouriteKeys.addAll(favourite.keySet());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        Collections.sort(favouriteKeys, (key1, key2) -\u003e favourite.get(key2) - favourite.get(key1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        favouriteKeys.stream().forEach(genre -\u003e favouriteGenres.getChildren()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                .add(new Label(genre + \" (\" + favourite.get(genre) + \" entries) \")));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        if (movieRecommendations \u003d\u003d null \u0026\u0026 tvRecommendations \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            recommendationPlaceHolder.getChildren().add(new Label(\"You currently do not have any recommendation!\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            if (movieRecommendations.size() \u003e 0) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                movieRecommendationView.setItems(movieRecommendations);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                movieRecommendationView.setCellFactory(listView -\u003e new MovieRecommendationViewCell());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            if (tvRecommendations.size() \u003e 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                tvRecommendationView.setItems(tvRecommendations);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                tvRecommendationView.setCellFactory(listView -\u003e new TvRecommendationViewCell());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Show} using a {@code ShowCard}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    class StatisticsViewCell extends ListCell\u003cShow\u003e {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        protected void updateItem(Show show, boolean empty) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            super.updateItem(show, empty);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            if (empty || show \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                ShowCard showCard \u003d new ShowCard(show, getIndex() + 1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                setGraphic(showCard.getRoot());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                showCard.setWatchedListener(new NonChangeableCheckBox(showCard.getWatched(), show));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Movie} using a {@code RecommendationCard}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    class MovieRecommendationViewCell extends ListCell\u003cMovie\u003e {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        protected void updateItem(Movie movie, boolean empty) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            super.updateItem(movie, empty);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            if (empty || movie \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                setGraphic(new RecommendationCard(movie).getRoot());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Movie} using a {@code RecommendationCard}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    class TvRecommendationViewCell extends ListCell\u003cTvShow\u003e {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        protected void updateItem(TvShow tv, boolean empty) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            super.updateItem(tv, empty);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            if (empty || tv \u003d\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                setGraphic(new RecommendationCard(tv).getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * This class prevents the user from marking the checkbox by clicking"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @author AxxG \"How to make checkbox or combobox readonly in JavaFX\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    class NonChangeableCheckBox implements ChangeListener\u003cBoolean\u003e {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        private CheckBox checkBox;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        private Show show;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public NonChangeableCheckBox (CheckBox checkBox, Show show) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.show \u003d show;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.checkBox \u003d checkBox;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void changed(ObservableValue\u003c? extends Boolean\u003e ov, Boolean oldVal, Boolean newVal) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.checkBox.setSelected(show.isWatched().value);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 29,
      "tswuxia": 115
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import seedu.ezwatchlist.statistics.Statistics;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/applogo.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private Statistics statistics;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    public UiManager(Logic logic, Statistics statistics) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        this.statistics \u003d statistics;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic, statistics);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tswuxia": 6,
      "heze8": 5,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    protected void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    protected static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tswuxia": 2,
      "heze8": 2,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/ui/WatchedPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.api.exceptions.NoRecommendationsException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.api.exceptions.OnlineConnectionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Panel containing the list of shows."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "public class WatchedPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private static final String FXML \u003d \"WatchedPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(WatchedPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private ListView\u003cShow\u003e watchedListView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public WatchedPanel(ObservableList\u003cShow\u003e showList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        watchedListView.setItems(showList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        watchedListView.setCellFactory(listView -\u003e new WatchedListViewCell());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void setMainWindow(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Show} using a {@code ShowCard}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    class WatchedListViewCell extends ListCell\u003cShow\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        protected void updateItem(Show show, boolean empty) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            super.updateItem(show, empty);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            if (empty || show \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                ShowCard showCard \u003d new ShowCard(show, getIndex() + 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                setGraphic(showCard.getRoot());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                showCard.setWatchedListener(new ChangeableCheckBox(showCard.getDisplayedIndex()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * This class prevents the user from marking the checkbox by clicking"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @author AxxG \"How to make checkbox or combobox readonly in JavaFX\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    class ChangeableCheckBox implements ChangeListener\u003cBoolean\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        private int displayedIndex;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        ChangeableCheckBox(int displayedIndex) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            super();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.displayedIndex \u003d displayedIndex;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void changed(ObservableValue\u003c? extends Boolean\u003e ov, Boolean oldVal, Boolean newVal) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                mainWindow.executeCommand(\"watch \" + displayedIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            } catch (CommandException | ParseException | OnlineConnectionException | NoRecommendationsException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                mainWindow.getResultDisplay().setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 70,
      "wongchuankai": 2,
      "tswuxia": 11
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "   \u003cHBox\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\" styleClass\u003d\"text-field\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003cStackPane styleClass\u003d\"stack-pane\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "               \u003cButton alignment\u003d\"BASELINE_RIGHT\" contentDisplay\u003d\"RIGHT\" mnemonicParsing\u003d\"false\" nodeOrientation\u003d\"RIGHT_TO_LEFT\" onAction\u003d\"#handleCommandEntered\" text\u003d\"Go!\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                  \u003cStackPane.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                     \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                  \u003c/StackPane.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "   \u003c/HBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "tswuxia": 18,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-background-color: derive(black, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-text-fill: #eeeeee;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-base: black;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-control-inner-background: black;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ".v-box {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "h-box {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     -fx-background-color: black;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     -fx-border-color: transparent;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ".scroll-pane {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     -fx-background-color: black;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     -fx-border-color: transparent;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     -fx-background-color: black;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     -fx-border-color: black;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-background-color: derive(black, 20%);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-cursor: hand;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-alignment: center-right;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-font-style: italic"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-cursor: hand"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ".button-current {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-text-fill: grey;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-cursor: DEFAULT;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-alignment: center-right;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-font-style: italic"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-background-color: derive(white, 20%);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-border-color: black black #ffffff black;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "#filterField, #showListPanel, #showWebpage {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-background-color: black, black, black, black;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ".check-box {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    /*-fx-selected-box-color: white;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-box-color: white;*/"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-mark-color: black;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ".check-box:selected \u003e .box {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    /* background color for selected checkbox */"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ".check-box \u003e .box {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    /* background color of unselected checkbox */"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ".genre-tag .label {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-background-color: #bc0d3e;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-padding: 1 4 1 4;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ".favourite-genre-tag .label {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-background-color: #bc0d3e;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-padding: 1 4 3 4;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-font-size: 14;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 1,
      "tswuxia": 91,
      "-": 291
    }
  },
  {
    "path": "src/main/resources/view/LoadingPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003cStackPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003cVBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cImageView fitHeight\u003d\"80.0\" fitWidth\u003d\"80.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "               \u003cimage\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                  \u003cImage url\u003d\"@../images/loading.gif\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "               \u003c/image\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                  \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cLabel styleClass\u003d\"label-bright\" text\u003d\"Plz give me some time...\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "tswuxia": 26
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"1000.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Address App\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                      \u003cMenuBar fx:id\u003d\"menuBar\" minWidth\u003d\"-Infinity\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                              \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                              \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                  \u003cImageView fitHeight\u003d\"35.2\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                     \u003cimage\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                        \u003cImage url\u003d\"@../images/clapper.png\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                     \u003c/image\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                  \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                \u003cHBox styleClass\u003d\"h-box\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                        \u003cStackPane minWidth\u003d\"-Infinity\" prefWidth\u003d\"108.0\" styleClass\u003d\"stack-pane\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                \u003cVBox alignment\u003d\"CENTER_RIGHT\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"v-box\" StackPane.alignment\u003d\"CENTER\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                        \u003cVBox layoutX\u003d\"10.0\" layoutY\u003d\"144.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                        \u003cButton fx:id\u003d\"watchlistButton\" minWidth\u003d\"-Infinity\" mnemonicParsing\u003d\"false\" onAction\u003d\"#goToWatchlist\" text\u003d\"Watchlist.\" textAlignment\u003d\"RIGHT\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                        \u003cVBox VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                        \u003cButton fx:id\u003d\"watchedButton\" minWidth\u003d\"-Infinity\" mnemonicParsing\u003d\"false\" onAction\u003d\"#goToWatched\" text\u003d\"Watched.\" textAlignment\u003d\"RIGHT\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                        \u003cVBox layoutX\u003d\"10.0\" layoutY\u003d\"111.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                        \u003cButton fx:id\u003d\"searchButton\" minWidth\u003d\"-Infinity\" mnemonicParsing\u003d\"false\" onAction\u003d\"#goToSearch\" text\u003d\"Search.\" textAlignment\u003d\"RIGHT\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                        \u003cVBox layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                        \u003cButton fx:id\u003d\"statisticsButton\" minWidth\u003d\"-Infinity\" mnemonicParsing\u003d\"false\" onAction\u003d\"#goToStatistics\" text\u003d\"Statistics.\" textAlignment\u003d\"RIGHT\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                        \u003cVBox layoutX\u003d\"10.0\" layoutY\u003d\"44.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                    \u003cStackPane.margin\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                    \u003c/StackPane.margin\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                        \u003cVBox HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                \u003cVBox fx:id\u003d\"showList\" minWidth\u003d\"340\" styleClass\u003d\"v-box\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"contentPanelPlaceholder\" styleClass\u003d\"stack-pane\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"stack-pane\"\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                        \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"resultDisplayPlaceHolder\" styleClass\u003d\"stack-pane\" /\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "tswuxia": 52,
      "-": 41
    }
  },
  {
    "path": "src/main/resources/view/NavigationBar.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003cVBox styleClass\u003d\"v-box\" StackPane.alignment\u003d\"CENTER\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cVBox layoutX\u003d\"10.0\" layoutY\u003d\"144.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cButton fx:id\u003d\"watchlistButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#goToWatchlist\" text\u003d\"Watchlist\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cVBox VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cButton fx:id\u003d\"watchedButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#goToWatched\" prefWidth\u003d\"108.0\" text\u003d\"Watched\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cVBox layoutX\u003d\"10.0\" layoutY\u003d\"111.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cButton fx:id\u003d\"searchButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#goToSearch\" prefWidth\u003d\"108.0\" text\u003d\"Search\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cVBox layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cButton fx:id\u003d\"statisticsButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#goToStatistics\" prefWidth\u003d\"108.0\" text\u003d\"Statistics\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cVBox layoutX\u003d\"10.0\" layoutY\u003d\"44.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003cStackPane.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003c/StackPane.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "   \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "   \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "tswuxia": 32
    }
  },
  {
    "path": "src/main/resources/view/RecommendationCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003cVBox alignment\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003cImageView fx:id\u003d\"poster\" fitHeight\u003d\"120.0\" fitWidth\u003d\"90.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_small_label\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cInsets bottom\u003d\"3.0\" left\u003d\"3.0\" right\u003d\"3.0\" top\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tswuxia": 20
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003cStackPane fx:id\u003d\"resultDisplayPlaceHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" prefHeight\u003d\"90.0\" styleClass\u003d\"result-display\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003cInsets bottom\u003d\"3.0\" left\u003d\"3.0\" right\u003d\"3.0\" top\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003c/padding\u003e\u003c/TextArea\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "tswuxia": 6,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/SearchPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    \u003cListView fx:id\u003d\"searchListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tswuxia": 8
    }
  },
  {
    "path": "src/main/resources/view/SearchShowListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    \u003cHBox HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cImageView fx:id\u003d\"poster\" fitHeight\u003d\"160.0\" fitWidth\u003d\"120.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                    \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                \u003c/HBox.margin\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cVBox fx:id\u003d\"information\" prefWidth\u003d\"600.0\" spacing\u003d\"3.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                    \u003cInsets left\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                    \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                        \u003cminWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                        \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                    \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                    \u003cHBox prefWidth\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                    \u003cHBox fx:id\u003d\"genres\" alignment\u003d\"CENTER_LEFT\" spacing\u003d\"7.0\" styleClass\u003d\"genre-tag\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                \u003cFlowPane maxWidth\u003d\"500.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                \u003cLabel fx:id\u003d\"type\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$type\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                \u003cVBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                        \u003cHBox fx:id\u003d\"actors\" spacing\u003d\"7.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                \u003cLabel fx:id\u003d\"dateOfRelease\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date of release\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                \u003cLabel fx:id\u003d\"description\" maxHeight\u003d\"50.0\" maxWidth\u003d\"550.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                \u003cLabel fx:id\u003d\"runningTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$running time\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        \u003c/children\u003e\u003c/HBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    \u003cGridPane prefHeight\u003d\"150.0\" prefWidth\u003d\"125.0\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cLabel fx:id\u003d\"lastWatched\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$lastWatched\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tswuxia": 65
    }
  },
  {
    "path": "src/main/resources/view/ShowListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.control.CheckBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "   \u003cHBox HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003cImageView fx:id\u003d\"poster\" fitHeight\u003d\"160.0\" fitWidth\u003d\"120.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "               \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003c/HBox.margin\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "           \u003cVBox fx:id\u003d\"information\" prefWidth\u003d\"600.0\" spacing\u003d\"3.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                   \u003cInsets left\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "               \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                   \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                       \u003cminWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                           \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                           \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                       \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                   \u003c/Label\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                   \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "               \u003cHBox prefWidth\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "               \u003cHBox fx:id\u003d\"genres\" alignment\u003d\"CENTER_LEFT\" spacing\u003d\"7.0\" styleClass\u003d\"genre-tag\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "               \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "               \u003cFlowPane maxWidth\u003d\"500.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "               \u003cLabel fx:id\u003d\"type\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$type\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                  \u003cHBox fx:id\u003d\"actors\" spacing\u003d\"7.0\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "               \u003cLabel fx:id\u003d\"dateOfRelease\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date of release\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "               \u003cLabel fx:id\u003d\"description\" maxHeight\u003d\"50.0\" maxWidth\u003d\"550.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "               \u003cLabel fx:id\u003d\"runningTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$running time\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "           \u003c/VBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003c/children\u003e\u003c/HBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "   \u003cGridPane prefHeight\u003d\"150.0\" prefWidth\u003d\"125.0\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "       \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "       \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003cCheckBox fx:id\u003d\"watched\" mnemonicParsing\u003d\"false\" styleClass\u003d\"check-box\" text\u003d\"Watched\" textFill\u003d\"WHITE\" GridPane.halignment\u003d\"RIGHT\" GridPane.valignment\u003d\"BOTTOM\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "               \u003cInsets bottom\u003d\"20.0\" left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003c/CheckBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "          \u003cLabel fx:id\u003d\"lastWatched\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$lastWatched\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "   \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 26,
      "tswuxia": 45
    }
  },
  {
    "path": "src/main/resources/view/ShowListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    \u003cListView fx:id\u003d\"showListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 2,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/StatisticsPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003cStackPane xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003cScrollPane fitToHeight\u003d\"true\" fitToWidth\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cVBox styleClass\u003d\"v-box\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                  \u003cLabel minHeight\u003d\"25.0\" styleClass\u003d\"label-bright\" text\u003d\"What you might have forgotten to watch:\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"forgottenPlaceHolder\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                        \u003cListView fx:id\u003d\"forgottenView\" maxHeight\u003d\"250.0\" minHeight\u003d\"250.0\" minWidth\u003d\"700.0\" prefHeight\u003d\"250.0\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                           \u003cStackPane.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                              \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                           \u003c/StackPane.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                        \u003c/ListView\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                  \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                  \u003cLabel minHeight\u003d\"25.0\" styleClass\u003d\"label-bright\" text\u003d\"Your favourite genres:\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                  \u003cHBox fx:id\u003d\"favouriteGenres\" spacing\u003d\"15.0\" styleClass\u003d\"favourite-genre-tag\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                        \u003cInsets bottom\u003d\"2.0\" left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                  \u003cVBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                        \u003cLabel minHeight\u003d\"25.0\" styleClass\u003d\"label-bright\" text\u003d\"You might be interested in:\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                           \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                              \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                           \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"recommendationPlaceHolder\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                              \u003cHBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                    \u003cHBox HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                    \u003cListView fx:id\u003d\"movieRecommendationView\" maxHeight\u003d\"200.0\" minHeight\u003d\"155.0\" minWidth\u003d\"350.0\" orientation\u003d\"HORIZONTAL\" prefHeight\u003d\"155.0\" prefWidth\u003d\"350.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                    \u003cHBox HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                    \u003cListView fx:id\u003d\"tvRecommendationView\" maxHeight\u003d\"200.0\" minHeight\u003d\"155.0\" minWidth\u003d\"350.0\" nodeOrientation\u003d\"LEFT_TO_RIGHT\" orientation\u003d\"HORIZONTAL\" prefHeight\u003d\"155.0\" prefWidth\u003d\"350.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                    \u003cHBox HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                              \u003c/HBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "tswuxia": 71
    }
  },
  {
    "path": "src/main/resources/view/WatchedPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "   \u003cListView fx:id\u003d\"watchedListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 5,
      "tswuxia": 3
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/AppParametersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/api/model/ImageRetrievalTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.api.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "class ImageRetrievalTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "    void constructor_nullPath_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "        String validFileName \u003d \"john_wick\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "                new ImageRetrieval(null, null, validFileName));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 15
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/api/model/RecommendationEngineTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.api.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.show.Movie;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.show.TvShow;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "class RecommendationEngineTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "    void constructor_null_passes() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "        List\u003cTvShow\u003e validTvList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "        List\u003cMovie\u003e validMovieList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "                new RecommendationEngine(validMovieList, validTvList, null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "                new RecommendationEngine(null, validTvList, null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heze8"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heze8"
        },
        "content": "                new RecommendationEngine(validMovieList, null, null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heze8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heze8"
        },
        "content": "    void getMovieRecommendations() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heze8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heze8"
        },
        "content": "    void getTvShowRecommendations() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 38
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/commons/core/ConfigTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertEquals(original, readBack);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertEquals(original, readBack);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 1,
      "jcjjjared": 3,
      "heze8": 4,
      "-": 109
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import static seedu.ezwatchlist.commons.core.messages.Messages.MESSAGE_INVALID_SHOW_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import static seedu.ezwatchlist.commons.core.messages.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyWatchList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.storage.JsonWatchListStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.storage.StorageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.ui.MainWindow;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private final String currentTab \u003d \"watchlist\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        JsonWatchListStorage watchListStorage \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                new JsonWatchListStorage(temporaryFolder.resolve(\"watchList.json\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        StorageManager storage \u003d new StorageManager(watchListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_SHOW_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // Setup LogicManager with JsonWatchListIoExceptionThrowingStub"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        JsonWatchListStorage watchListStorage \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                new JsonWatchListIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionWatchList.json\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        StorageManager storage \u003d new StorageManager(watchListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String description \u003d \"Forever alone in a crowd, failed comedian Arthur Fleck"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        seeks connection as he walks the streets of Gotham \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + \"City. Arthur wears two masks -- the one he paints for his day job as a clown, and the guise he \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + \"projects in a futile attempt to feel like he\u0027s part of the world around him. Isolated, bullied \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + \"and disregarded by society, Fleck begins a slow descent into madness as he transforms into the \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + \"criminal mastermind known as the Joker.\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + \" n/Joker\" + \" s/\" + description"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + \" w/false\" + \" d/3/10/2019\" + \" t/movie\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + \" r/122\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show expectedShow \u003d new ShowBuilder(JOKER).withActors().build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        expectedModel.addShow(expectedShow);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "*/"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void getFilteredShowList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredShowList().remove(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getWatchList(), new UserPrefs());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        MainWindow mainWindow \u003d null;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand, mainWindow, currentTab));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static class JsonWatchListIoExceptionThrowingStub extends JsonWatchListStorage {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        private JsonWatchListIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public void saveWatchList(ReadOnlyWatchList watchList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 34,
      "jcjjjared": 4,
      "michelleykw": 2,
      "heze8": 10,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalShows.getTypicalWatchList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.testutil.ShowBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        model \u003d new ModelManager(getTypicalWatchList(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void execute_newShow_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show validShow \u003d new ShowBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getWatchList(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        expectedModel.addShow(validShow);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertCommandSuccess(new AddCommand(validShow), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validShow), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void execute_duplicateShow_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show showInList \u003d model.getWatchList().getShowList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertCommandFailure(new AddCommand(showInList), model, AddCommand.MESSAGE_DUPLICATE_SHOW);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 13,
      "jcjjjared": 1,
      "heze8": 6,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_ACTOR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_DATE_OF_RELEASE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_IS_WATCHED;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_RUNNING_TIME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyWatchList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.WatchList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.model.show.Genre;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Movie;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.testutil.ShowBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void constructor_nullShow_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show show \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(show));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void check_static_fields() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        final String messageusage \u003d \"add\" + \": Adds a show to the watchlist. \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + \"Parameters: \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + PREFIX_TYPE + \"TYPE (\u0027movie\u0027 or \u0027tv\u0027) \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + \"[\" + PREFIX_DATE_OF_RELEASE + \"DATE OF RELEASE] \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + \"[\" + PREFIX_IS_WATCHED + \"WATCHED (\u0027true\u0027 or \u0027false\u0027)] \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + \"[\" + PREFIX_RUNNING_TIME + \"RUNNING TIME] \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + \"[\" + PREFIX_ACTOR + \"ACTOR]...\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + \"Example: \" + \"add\" + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + PREFIX_NAME + \"Joker \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + PREFIX_TYPE + \"movie \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + PREFIX_DATE_OF_RELEASE + \"4 October 2019 \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + PREFIX_IS_WATCHED + \"true \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + PREFIX_RUNNING_TIME + \"122 \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + PREFIX_DESCRIPTION + \"Joker is funny \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + PREFIX_ACTOR + \"Joaquin Phoenix \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + PREFIX_ACTOR + \"Robert De Niro\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(AddCommand.MESSAGE_USAGE, messageusage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void execute_showAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        ModelStubAcceptingShowAdded modelStub \u003d new ModelStubAcceptingShowAdded();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show validShow \u003d new ShowBuilder().build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validShow).execute(modelStub);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validShow), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(Arrays.asList(validShow), modelStub.showsAdded);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void execute_duplicateShow_throwsCommandException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show validShow \u003d new ShowBuilder().build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validShow);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithShow(validShow);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_SHOW, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void fromSearch() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void testExecute() throws CommandException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        ModelStubAcceptingShowAdded modelStub \u003d new ModelStubAcceptingShowAdded();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show validShow \u003d new ShowBuilder().build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validShow).execute(modelStub);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validShow), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(Arrays.asList(validShow), modelStub.showsAdded);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show validShow2 \u003d new ShowBuilder().build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validShow2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        ModelStub modelStub2 \u003d new ModelStubWithShow(validShow2);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        AddCommand fromsearch \u003d new AddCommand(1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        //assertEquals();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void testFromSearch() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show avenger \u003d new ShowBuilder().withName(\"Avenger\").build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show bobthebuilder \u003d new ShowBuilder().withName(\"Bob The Builder\").build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        AddCommand addAvengerCommand \u003d new AddCommand(avenger);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bobthebuilder);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        AddCommand addIndex0 \u003d new AddCommand(1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        AddCommand addIndex1 \u003d new AddCommand(2);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // same object -\u003e returns true test using \u003d\u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(addAvengerCommand \u003d\u003d addAvengerCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(addAvengerCommand.equals(addAvengerCommand));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        AddCommand addShowCommandCopy \u003d new AddCommand(avenger);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(addAvengerCommand.equals(addAvengerCommand));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(addAvengerCommand.equals(1));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(addAvengerCommand.equals(null));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different show -\u003e returns false"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(addAvengerCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // same index -\u003e returns true"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(addIndex0.equals(addIndex0));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(addIndex0.equals(null));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public Path getWatchListFilePath() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public void setWatchListFilePath(Path watchListFilePath) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public void addShow(Show show) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public void setWatchList(ReadOnlyWatchList newData) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public ReadOnlyWatchList getWatchList() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public boolean hasShow(Show show) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        public boolean hasShowName(Name showName) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        public List\u003cShow\u003e getShowIfHasName(Name showName) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        public boolean hasActor(Set\u003cActor\u003e actorSet) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        public List\u003cShow\u003e getShowIfIsGenre(Set\u003cGenre\u003e genreSet) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        public List\u003cShow\u003e getShowIfHasActor(Set\u003cActor\u003e actorSet) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public void deleteShow(Show target) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public void setShow(Show target, Show editedShow) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public ObservableList\u003cShow\u003e getFilteredShowList() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public void updateFilteredShowList(Predicate\u003cShow\u003e predicate) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public ObservableList\u003cShow\u003e getUnWatchedShowList() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public ObservableList\u003cShow\u003e getWatchedShowList() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void updateUnWatchedShowList() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void updateWatchedShowList() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public ObservableList\u003cShow\u003e getSearchResultList() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public void updateSearchResultList(List\u003cShow\u003e searchResult) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void syncMovie(List\u003cMovie\u003e syncMovie) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public String getPage(String shortCutKey) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * A Model stub that contains a single show."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private class ModelStubWithShow extends ModelStub {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        private final Show show;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        ModelStubWithShow(Show show) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            requireNonNull(show);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            this.show \u003d show;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public boolean hasShow(Show show) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            requireNonNull(show);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return this.show.isSameShow(show);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * A Model stub that always accept the show being added."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private class ModelStubAcceptingShowAdded extends ModelStub {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        final ArrayList\u003cShow\u003e showsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public boolean hasShow(Show show) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            requireNonNull(show);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return showsAdded.stream().anyMatch(show::isSameShow);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public void addShow(Show show) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            requireNonNull(show);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            showsAdded.add(show);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public ReadOnlyWatchList getWatchList() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return new WatchList();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 144,
      "jcjjjared": 31,
      "michelleykw": 21,
      "heze8": 6,
      "-": 137
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalShows.getTypicalWatchList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.WatchList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void execute_emptyWatchList_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void execute_nonEmptyWatchList_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalWatchList(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalWatchList(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        expectedModel.setWatchList(new WatchList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 6,
      "jcjjjared": 1,
      "heze8": 5,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\", false);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false)));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\", false)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false, false)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(commandResult.isExit() \u003d\u003d false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(commandResult.isShowHelp() \u003d\u003d false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(commandResult.isShortCutKey() \u003d\u003d false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\", false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false).hashCode());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\", false).hashCode());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false, false).hashCode());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false, false).hashCode());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 1,
      "wongchuankai": 5,
      "tswuxia": 11,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_DATE_OF_RELEASE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_IS_WATCHED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_NUM_OF_EPISODES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_NUM_OF_SEASONS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_RUNNING_TIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.WatchList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.show.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.testutil.EditShowDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.testutil.WatchShowDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String VALID_NAME_ANNABELLE \u003d \"Annabelle\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String VALID_NAME_BOB_THE_BUILDER \u003d \"Bob the Builder\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String VALID_TYPE_ANNABELLE \u003d \"movie\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String VALID_TYPE_BOB_THE_BUILDER \u003d \"tv\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String VALID_DATE_ANNABELLE \u003d \"10/10/2014\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String VALID_DATE_BOB_THE_BUILDER \u003d \"1998\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String VALID_WATCHED_ANNABELLE \u003d \"true\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String VALID_WATCHED_BOB_THE_BUILDER \u003d \"false\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String VALID_DESCRIPTION_ANNABELLE \u003d \"Horror film\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String VALID_DESCRIPTION_BOB_THE_BUILDER \u003d \"Cartoon about building things\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final int VALID_RUNNING_TIME_ANNABELLE \u003d 99;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final int VALID_RUNNING_TIME_BOB_THE_BUILDER \u003d 10;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String VALID_ACTOR_ANNABELLE \u003d \"Annabelle Wallis\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String VALID_ACTOR_BOB_THE_BUILDER \u003d \"Rob Rackstraw\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final int VALID_NUM_OF_EPISODES_BOB_THE_BUILDER \u003d 3;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final int VALID_NUM_OF_SEASONS_BOB_THE_BUILDER \u003d 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String NAME_DESC_ANNABELLE \u003d \" \" + PREFIX_NAME + VALID_NAME_ANNABELLE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String NAME_DESC_BOB_THE_BUILDER \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String TYPE_DESC_ANNABELLE \u003d \" \" + PREFIX_TYPE + VALID_TYPE_ANNABELLE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String TYPE_DESC_BOB_THE_BUILDER \u003d \" \" + PREFIX_TYPE + VALID_TYPE_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String DATE_DESC_ANNABELLE \u003d \" \" + PREFIX_DATE_OF_RELEASE + VALID_DATE_ANNABELLE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String DATE_DESC_BOB_THE_BUILDER \u003d \" \" + PREFIX_DATE_OF_RELEASE + VALID_DATE_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String WATCHED_DESC_ANNABELLE \u003d \" \" + PREFIX_IS_WATCHED + VALID_WATCHED_ANNABELLE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String WATCHED_DESC_BOB_THE_BUILDER \u003d \" \" + PREFIX_IS_WATCHED + VALID_WATCHED_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String RUNNING_TIME_DESC_ANNABELLE \u003d \" \" + PREFIX_RUNNING_TIME + VALID_RUNNING_TIME_ANNABELLE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String RUNNING_TIME_DESC_BOB_THE_BUILDER \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            \" \" + PREFIX_RUNNING_TIME + VALID_RUNNING_TIME_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String DESCRIPTION_DESC_ANNABELLE \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_ANNABELLE;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String DESCRIPTION_DESC_BOB_THE_BUILDER \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String ACTOR_DESC_ANNABELLE \u003d \" \" + PREFIX_TYPE + VALID_ACTOR_ANNABELLE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String ACTOR_DESC_BOB_THE_BUILDER \u003d \" \" + PREFIX_TYPE + VALID_ACTOR_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String EPISODES_DESC_BOB_THE_BUILDER \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            \" \" + PREFIX_NUM_OF_EPISODES + VALID_NUM_OF_EPISODES_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String SEASONS_DESC_BOB_THE_BUILDER \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            \" \" + PREFIX_NUM_OF_SEASONS + VALID_NUM_OF_SEASONS_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String INVALID_TYPE_DESC \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            \" \" + PREFIX_TYPE + \"TV show\"; // types can only be \"movie\" or \"tv\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String INVALID_IS_WATCHED_DESC \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            \" \" + PREFIX_IS_WATCHED + null; //null not allowed"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String INVALID_RUNNING_TIME_DESC \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            \" \" + PREFIX_RUNNING_TIME; // empty string not allowed for running time"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String INVALID_DESCRIPTION_DESC \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            \" \" + PREFIX_DESCRIPTION; // empty string not allowed for description"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final EditCommand.EditShowDescriptor DESC_ANNABELLE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final EditCommand.EditShowDescriptor DESC_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final WatchCommand.WatchShowDescriptor WATCH_DESC_ANNABELLE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final WatchCommand.WatchShowDescriptor WATCH_DESC_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        DESC_ANNABELLE \u003d new EditShowDescriptorBuilder().withName(VALID_NAME_ANNABELLE).withType(VALID_TYPE_ANNABELLE)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_ANNABELLE).withIsWatched(VALID_WATCHED_ANNABELLE)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withDateOfRelease(VALID_DATE_ANNABELLE)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withRunningTime(VALID_RUNNING_TIME_ANNABELLE).withActors(VALID_ACTOR_ANNABELLE).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        DESC_BOB_THE_BUILDER \u003d new EditShowDescriptorBuilder().withName(VALID_NAME_BOB_THE_BUILDER)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withType(VALID_TYPE_BOB_THE_BUILDER)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_BOB_THE_BUILDER).withIsWatched(VALID_WATCHED_BOB_THE_BUILDER)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withDateOfRelease(VALID_DATE_BOB_THE_BUILDER)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withRunningTime(VALID_RUNNING_TIME_BOB_THE_BUILDER).withActors(VALID_ACTOR_BOB_THE_BUILDER).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        WATCH_DESC_ANNABELLE \u003d new WatchShowDescriptorBuilder().withName(VALID_NAME_ANNABELLE)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withType(VALID_TYPE_ANNABELLE)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_ANNABELLE).withIsWatched(VALID_WATCHED_ANNABELLE)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withDateOfRelease(VALID_DATE_ANNABELLE)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withRunningTime(VALID_RUNNING_TIME_ANNABELLE).withActors(VALID_ACTOR_ANNABELLE).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        WATCH_DESC_BOB_THE_BUILDER \u003d new WatchShowDescriptorBuilder().withName(VALID_NAME_BOB_THE_BUILDER)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withType(VALID_TYPE_BOB_THE_BUILDER)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_BOB_THE_BUILDER).withIsWatched(VALID_WATCHED_BOB_THE_BUILDER)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withDateOfRelease(VALID_DATE_BOB_THE_BUILDER).withTotalNumOfEpisodes(100).withNumOfEpisodesWatched(40)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withRunningTime(VALID_RUNNING_TIME_BOB_THE_BUILDER).withActors(VALID_ACTOR_BOB_THE_BUILDER).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * - the watch list, filtered show list and selected show in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        WatchList expectedWatchList \u003d new WatchList(actualModel.getWatchList());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "heze8"
        },
        "content": "        List\u003cShow\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredShowList());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(expectedWatchList, actualModel.getWatchList());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "heze8"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredShowList());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the show at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * {@code model}\u0027s watch list."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static void showShowAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "heze8"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredShowList().size());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "heze8"
        },
        "content": "        Show show \u003d model.getFilteredShowList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "heze8"
        },
        "content": "        final String[] splitName \u003d show.getName().showName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "heze8"
        },
        "content": "        model.updateFilteredShowList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "heze8"
        },
        "content": "        assertEquals(1, model.getFilteredShowList().size());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 151,
      "wongchuankai": 8,
      "tswuxia": 1,
      "heze8": 10
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.showShowAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalIndexes.INDEX_FIRST_SHOW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalIndexes.INDEX_SECOND_SHOW;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalShows.getTypicalWatchList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.commons.core.messages.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalWatchList(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show showToDelete \u003d model.getFilteredShowList().get(INDEX_FIRST_SHOW.getZeroBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_SHOW);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_SHOW_SUCCESS, showToDelete);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getWatchList(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        expectedModel.deleteShow(showToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredShowList().size() + 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_SHOW_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        showShowAtIndex(model, INDEX_FIRST_SHOW);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show showToDelete \u003d model.getFilteredShowList().get(INDEX_FIRST_SHOW.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_SHOW);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_SHOW_SUCCESS, showToDelete);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getWatchList(), new UserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        expectedModel.deleteShow(showToDelete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        showNoShow(expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        showShowAtIndex(model, INDEX_FIRST_SHOW);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_SHOW;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of watch list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getWatchList().getShowList().size());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_SHOW_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_SHOW);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_SHOW);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_SHOW);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different show -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private void showNoShow(Model model) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        model.updateFilteredShowList(p -\u003e false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(model.getFilteredShowList().isEmpty());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 32,
      "michelleykw": 1,
      "heze8": 7,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.DESC_ANNABELLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.DESC_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.VALID_ACTOR_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.VALID_NAME_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalIndexes.INDEX_FIRST_SHOW;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalIndexes.INDEX_SECOND_SHOW;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalShows.getTypicalWatchList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.commons.core.messages.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.commands.EditCommand.EditShowDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.WatchList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.testutil.EditShowDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.testutil.ShowBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalWatchList(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show editedShow \u003d new ShowBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        EditShowDescriptor descriptor \u003d new EditShowDescriptorBuilder(editedShow).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_SHOW, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_SHOW_SUCCESS, editedShow);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new WatchList(model.getWatchList()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        expectedModel.setShow(model.getFilteredShowList().get(0), editedShow);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(expectedModel.getFilteredShowList().get(0).equals(editedShow));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Index indexLastShow \u003d Index.fromOneBased(model.getFilteredShowList().size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show lastShow \u003d model.getFilteredShowList().get(indexLastShow.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        ShowBuilder showInList \u003d new ShowBuilder(lastShow);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show editedShow \u003d showInList.withName(VALID_NAME_BOB_THE_BUILDER)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_BOB_THE_BUILDER)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withActors(VALID_ACTOR_BOB_THE_BUILDER).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        EditShowDescriptor descriptor \u003d new EditShowDescriptorBuilder().withName(VALID_NAME_BOB_THE_BUILDER)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_BOB_THE_BUILDER).withActors(VALID_ACTOR_BOB_THE_BUILDER).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastShow, descriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_SHOW_SUCCESS, editedShow);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new WatchList(model.getWatchList()), new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        expectedModel.setShow(lastShow, editedShow);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_SHOW, new EditShowDescriptor());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show editedShow \u003d model.getFilteredShowList().get(INDEX_FIRST_SHOW.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_SHOW_SUCCESS, editedShow);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new WatchList(model.getWatchList()), new UserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        showShowAtIndex(model, INDEX_FIRST_SHOW);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show showInFilteredList \u003d model.getFilteredShowList().get(INDEX_FIRST_SHOW.getZeroBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show editedShow \u003d new ShowBuilder(showInFilteredList).withName(VALID_NAME_BOB_THE_BUILDER).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_SHOW,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                new EditShowDescriptorBuilder().withName(VALID_NAME_BOB_THE_BUILDER).build());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_SHOW_SUCCESS, editedShow);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new WatchList(model.getWatchList()), new UserPrefs());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        expectedModel.setShow(model.getFilteredShowList().get(0), editedShow);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void execute_duplicateShowUnfilteredList_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show firstShow \u003d model.getFilteredShowList().get(INDEX_FIRST_SHOW.getZeroBased());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        EditShowDescriptor descriptor \u003d new EditShowDescriptorBuilder(firstShow).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_SHOW, descriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_SHOW);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void execute_duplicateShowFilteredList_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        showShowAtIndex(model, INDEX_FIRST_SHOW);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // edit show in filtered list into a duplicate in watch list"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show showInList \u003d model.getWatchList().getShowList().get(INDEX_SECOND_SHOW.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_SHOW,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                new EditShowDescriptorBuilder(showInList).build());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_SHOW);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void execute_invalidShowIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredShowList().size() + 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        EditShowDescriptor descriptor \u003d new EditShowDescriptorBuilder().withName(VALID_NAME_BOB_THE_BUILDER).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_SHOW_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private void assertCommandFailure(EditCommand editCommand, Model model, String messageInvalidShowDisplayedIndex) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * but smaller than size of watch list"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void execute_invalidShowIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        showShowAtIndex(model, INDEX_FIRST_SHOW);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_SHOW;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of watch list"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getWatchList().getShowList().size());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                new EditShowDescriptorBuilder().withName(VALID_NAME_BOB_THE_BUILDER).build());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_SHOW_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private void showShowAtIndex(Model model, Index indexFirstShow) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_SHOW, DESC_ANNABELLE);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        EditShowDescriptor copyDescriptor \u003d new EditShowDescriptor(DESC_ANNABELLE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_SHOW, copyDescriptor);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_SHOW, DESC_ANNABELLE)));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_SHOW, DESC_BOB_THE_BUILDER)));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void testCreateEditedShow() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        //Show to edit is MOVIE"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show avengers \u003d new ShowBuilder().withName(\"Avengers\").build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        EditShowDescriptor editShowDescriptor \u003d new EditShowDescriptor();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        editShowDescriptor.setName(new Name(\"Hello Kitty\"));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_SHOW, editShowDescriptor);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show hellokitty \u003d new ShowBuilder().withName(\"Hello Kitty\").build();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(hellokitty.equals(editCommand.createEditedShowTest(avengers, editShowDescriptor)));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        //Show to edit is TV"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show friends \u003d new ShowBuilder().withName(\"Friends\").withType(\"tv\").build();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        EditShowDescriptor editTv \u003d new EditShowDescriptor();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        editTv.setName(new Name(\"Flash\"));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        EditCommand editCommand1 \u003d new EditCommand(INDEX_FIRST_SHOW, editTv);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show flash \u003d new ShowBuilder().withName(\"Flash\").withType(\"tv\").build();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(flash.equals(editCommand1.createEditedShowTest(friends, editTv)));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 18,
      "wongchuankai": 99,
      "michelleykw": 1,
      "heze8": 5,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/commands/EditShowDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.DESC_ANNABELLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.DESC_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.VALID_ACTOR_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.VALID_DATE_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.VALID_NAME_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.VALID_RUNNING_TIME_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.commands.EditCommand.EditShowDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.testutil.EditShowDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class EditShowDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        EditShowDescriptor descriptorWithSameValues \u003d new EditShowDescriptor(DESC_ANNABELLE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertTrue(DESC_ANNABELLE.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertTrue(DESC_ANNABELLE.equals(DESC_ANNABELLE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse(DESC_ANNABELLE.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse(DESC_ANNABELLE.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse(DESC_ANNABELLE.equals(DESC_BOB_THE_BUILDER));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        EditShowDescriptor editedAmy \u003d new EditShowDescriptorBuilder(DESC_ANNABELLE)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withName(VALID_NAME_BOB_THE_BUILDER).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse(DESC_ANNABELLE.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different show -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        editedAmy \u003d new EditShowDescriptorBuilder(DESC_ANNABELLE).withDateOfRelease(VALID_DATE_BOB_THE_BUILDER).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse(DESC_ANNABELLE.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        editedAmy \u003d new EditShowDescriptorBuilder(DESC_ANNABELLE).withDateOfRelease(VALID_DATE_BOB_THE_BUILDER).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse(DESC_ANNABELLE.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different running time -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        editedAmy \u003d new EditShowDescriptorBuilder(DESC_ANNABELLE)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withRunningTime(VALID_RUNNING_TIME_BOB_THE_BUILDER).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse(DESC_ANNABELLE.equals(editedAmy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different actors -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        editedAmy \u003d new EditShowDescriptorBuilder(DESC_ANNABELLE).withActors(VALID_ACTOR_BOB_THE_BUILDER).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse(DESC_ANNABELLE.equals(editedAmy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 35,
      "jcjjjared": 24
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                true, false, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tswuxia": 2,
      "heze8": 5,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/commands/GoToCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class GoToCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void execute() throws CommandException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        ModelManager expectedManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String pageTitle \u003d \"1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        GoToCommand goToCommand \u003d new GoToCommand(pageTitle);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String expectedMessage \u003d goToCommand.execute(modelManager).getFeedbackToUser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertCommandSuccess(goToCommand, modelManager, expectedMessage, expectedManager);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String one \u003d \"one\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String two \u003d \"two\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        GoToCommand goToCommand \u003d new GoToCommand(one);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        GoToCommand goToCommand1 \u003d new GoToCommand(two);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // same object -\u003e returns true test using \u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(goToCommand \u003d\u003d goToCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(goToCommand.equals(goToCommand));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        GoToCommand goToCommandCopy \u003d new GoToCommand(one);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(goToCommandCopy.equals(goToCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(goToCommand1.equals(1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(goToCommand1.equals(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different show -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(goToCommand.equals(goToCommand1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 52
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tswuxia": 1,
      "heze8": 5,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.WatchList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        WatchList watchList \u003d new WatchList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        model \u003d new ModelManager(watchList, userPrefs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heze8"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getWatchList(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        //showShowAtIndex(model, INDEX_FIRST_SHOW);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        //assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 28,
      "wongchuankai": 12,
      "heze8": 1
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/commands/SearchCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalShows.getTypicalWatchList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.logic.parser.SearchKey;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "public class SearchCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalWatchList(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalWatchList(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        /*NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));*/"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        HashMap\u003cSearchKey, List\u003cString\u003e\u003e firstHash \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        HashMap\u003cSearchKey, List\u003cString\u003e\u003e secondHash \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        ArrayList\u003cString\u003e firstList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        ArrayList\u003cString\u003e secondList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        firstList.add(\"first\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        secondList.add(\"second\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        firstHash.put(SearchKey.KEY_NAME, firstList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        secondHash.put(SearchKey.KEY_NAME, secondList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        SearchCommand searchFirstCommand \u003d new SearchCommand(firstHash);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        SearchCommand searchSecondCommand \u003d new SearchCommand(secondHash);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        assertTrue(searchFirstCommand.equals(searchFirstCommand));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        SearchCommand findFirstCommandCopy \u003d new SearchCommand(firstHash);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertTrue(searchFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        assertFalse(searchFirstCommand.equals(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        assertFalse(searchFirstCommand.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different show -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        assertFalse(searchFirstCommand.equals(searchSecondCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void execute_zeroKeywords_noShowFound() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        /*String expectedMessage \u003d String.format(MESSAGE_SHOWS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        HashMap\u003cString, List\u003cString\u003e\u003e emptyHash \u003d new HashMap\u003cString, List\u003cString\u003e\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        ArrayList\u003cString\u003e emptyList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        emptyList.add(\" \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        emptyHash.put(\"name\", emptyList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        SearchCommand command \u003d new SearchCommand(emptyHash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        expectedModel.updateFilteredShowList(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredShowList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void execute_multipleKeywords_multipleShowsFound() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SHOWS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Avengers: Saving God\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        SearchCommand command \u003d new SearchCommand(Optional.of(\"Avengers: Saving God\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        expectedModel.updateFilteredShowList(predicate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertEquals(Arrays.asList(AVENGERSENDGAME, SAVINGPRIVATERYAN, GODFATHER2), model.getFilteredShowList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 9,
      "wongchuankai": 9,
      "michelleykw": 29,
      "heze8": 4,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/commands/SyncCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.SyncCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.SyncCommand.MESSAGE_UNSUCCESFUL2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.SyncCommand.MESSAGE_UNSUCCESSFUL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalIndexes.INDEX_FIRST_SHOW;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalIndexes.INDEX_SECOND_SHOW;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyWatchList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.WatchList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Genre;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Movie;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.testutil.ShowBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class SyncCommandTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void constructor_nullShow_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Index index \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SyncCommand(index));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Index index \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Index index1 \u003d INDEX_FIRST_SHOW;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Index index2 \u003d INDEX_SECOND_SHOW;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        SyncCommand syncCommand1 \u003d new SyncCommand(index1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        SyncCommand syncCommand2 \u003d new SyncCommand(index2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // same object -\u003e returns true test using \u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(syncCommand1 \u003d\u003d syncCommand1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(syncCommand1.equals(syncCommand1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        SyncCommand addSyncCommandCopy \u003d new SyncCommand(index1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(addSyncCommandCopy.equals(syncCommand1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(syncCommand1.equals(1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(syncCommand1.equals(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different show -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(syncCommand1.equals(syncCommand2));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void execute() throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        //check for null model"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Model model \u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SyncCommand(INDEX_FIRST_SHOW).execute(model));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        //check for sync command error: User input index is greater than search list size"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        SyncCommand syncCommand \u003d new SyncCommand(INDEX_FIRST_SHOW);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        WatchList watchList \u003d new WatchList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager(watchList, userPrefs);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e syncCommand.execute(modelManager));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show superman \u003d new ShowBuilder().withName(\"Superman\").build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        modelManager.addShow(superman);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        List\u003cShow\u003e search \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show supermanSync \u003d new ShowBuilder().withName(\"Superman\").withRunningTime(125).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        search.add(new ShowBuilder().withName(\"Superman\").withRunningTime(125).build());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        modelManager.updateSearchResultList(search);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        CommandResult commandResult \u003d syncCommand.execute(modelManager);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Assertions.assertEquals(String.format(MESSAGE_SUCCESS, supermanSync), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        SyncCommand syncCommand1 \u003d new SyncCommand(INDEX_FIRST_SHOW);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        List\u003cShow\u003e search2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        search2.add(new ShowBuilder().build());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        modelManager.updateSearchResultList(search2);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_UNSUCCESSFUL + \" \" + MESSAGE_UNSUCCESFUL2, ()-\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                syncCommand1.execute(modelManager));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public Path getWatchListFilePath() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public void setWatchListFilePath(Path watchListFilePath) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public void addShow(Show show) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public void setWatchList(ReadOnlyWatchList newData) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public ReadOnlyWatchList getWatchList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public boolean hasShow(Show show) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public boolean hasShowName(Name showName) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public List\u003cShow\u003e getShowIfHasName(Name showName) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public boolean hasActor(Set\u003cActor\u003e actorSet) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public List\u003cShow\u003e getShowIfIsGenre(Set\u003cGenre\u003e genreSet) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public List\u003cShow\u003e getShowIfHasActor(Set\u003cActor\u003e actorSet) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public void deleteShow(Show target) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public void setShow(Show target, Show editedShow) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public ObservableList\u003cShow\u003e getFilteredShowList() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public void updateFilteredShowList(Predicate\u003cShow\u003e predicate) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public ObservableList\u003cShow\u003e getUnWatchedShowList() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public ObservableList\u003cShow\u003e getWatchedShowList() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public void updateUnWatchedShowList() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public void updateWatchedShowList() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public ObservableList\u003cShow\u003e getSearchResultList() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public void updateSearchResultList(List\u003cShow\u003e searchResult) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public void syncMovie(List\u003cMovie\u003e syncMovie) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public String getPage(String shortCutKey) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private class ModelStubAcceptingShow extends ModelStub {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        private ArrayList\u003cShow\u003e showArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public boolean hasShow(Show show) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            requireNonNull(show);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return showArrayList.stream().anyMatch(show::isSameShow);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public void addShow(Show show) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            requireNonNull(show);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            showArrayList.add(show);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public ReadOnlyWatchList getWatchList() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return new WatchList();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 271
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/commands/WatchCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.VALID_NAME_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.WATCH_DESC_ANNABELLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.WATCH_DESC_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalIndexes.INDEX_FIFTH_SHOW;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalIndexes.INDEX_FIRST_SHOW;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalIndexes.INDEX_SECOND_SHOW;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalShows.getTypicalWatchList2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.messages.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.WatchList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.testutil.ShowBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.testutil.TypicalShows;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.testutil.WatchShowDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "class WatchCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalWatchList2(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private int validSeasonNum \u003d 6;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private int validEpisodeNum \u003d 4;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private int invalidSeasonNum \u003d 100;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private int invalidEpisodeNum \u003d 1000;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    void execute_noFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //testing marking a show"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show watchedShow \u003d TypicalShows.WATCHEDJOKER;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        WatchCommand.WatchShowDescriptor descriptor \u003d new WatchShowDescriptorBuilder(watchedShow).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        WatchCommand watchCommand \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                new WatchCommand(INDEX_FIRST_SHOW, descriptor, false, false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        String expectedMarkMessage \u003d String.format(WatchCommand.MESSAGE_WATCH_SHOW_SUCCESS, watchedShow);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new WatchList(model.getWatchList()), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //Replacing the unwatched Joker in the list with the watched Joker"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        expectedModel.setShow(model.getFilteredShowList().get(0), watchedShow);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //Check that the Joker movie in the model is now marked as watched."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertCommandSuccess(watchCommand, model, expectedMarkMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //Testing un-marking a show"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show unwatchedShow \u003d TypicalShows.JOKER;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor \u003d new WatchShowDescriptorBuilder(unwatchedShow).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        watchCommand \u003d new WatchCommand(INDEX_FIRST_SHOW, descriptor, false, false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        String expectedUnmarkMessage \u003d String.format(WatchCommand.MESSAGE_UNWATCH_SHOW_SUCCESS, unwatchedShow);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        expectedModel.setShow(model.getFilteredShowList().get(0), unwatchedShow);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertCommandSuccess(watchCommand, model, expectedUnmarkMessage, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void execute_invalidShowIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredShowList().size() + 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        WatchCommand.WatchShowDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                new WatchShowDescriptorBuilder().withName(VALID_NAME_BOB_THE_BUILDER).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        WatchCommand watchCommand \u003d new WatchCommand(outOfBoundIndex, descriptor, false, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertCommandFailure(watchCommand, model, Messages.MESSAGE_INVALID_SHOW_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void execute_editingEpisodesWatchedOfMovie_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show watchedShow \u003d TypicalShows.WATCHEDJOKER;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        WatchCommand.WatchShowDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                new WatchShowDescriptorBuilder(watchedShow).withNumOfEpisodesWatched(validEpisodeNum).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        WatchCommand watchCommand \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                new WatchCommand(INDEX_FIRST_SHOW, descriptor, false, true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        String expectedMessage \u003d WatchCommand.MESSAGE_EDITING_MOVIE_EPISODES_OR_SEASONS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new WatchList(model.getWatchList()), new UserPrefs());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //Replacing the unwatched Joker in the list with the watched Joker"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        expectedModel.setShow(model.getFilteredShowList().get(0), watchedShow);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //Check that the Joker movie in the model is now marked as watched."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertCommandFailure(watchCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void execute_validEpisodeNumber_pass() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show show \u003d TypicalShows.THEOFFICE;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show markedShow \u003d new ShowBuilder(TypicalShows.THEOFFICE).withNumOfEpisodesWatched(validEpisodeNum).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        WatchCommand.WatchShowDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                new WatchShowDescriptorBuilder(show).withNumOfEpisodesWatched(validEpisodeNum).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        WatchCommand watchCommand \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                new WatchCommand(INDEX_FIFTH_SHOW, descriptor, false, true);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        String expectedMessage \u003d String.format(WatchCommand.MESSAGE_MARK_EPISODES_SUCCESS,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                markedShow.getNumOfEpisodesWatched(), markedShow);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new WatchList(model.getWatchList()), new UserPrefs());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        expectedModel.setShow(model.getFilteredShowList().get(4), markedShow);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertCommandSuccess(watchCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void execute_validEpisodeNumberAndSeasonNumber_pass() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show show \u003d TypicalShows.THEOFFICE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show markedShow \u003d new ShowBuilder(TypicalShows.THEOFFICE).withNumOfEpisodesWatched(100).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        WatchCommand.WatchShowDescriptor descriptor \u003d new WatchShowDescriptorBuilder(show)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withNumOfSeasonsWatched(validSeasonNum).withNumOfEpisodesWatched(validEpisodeNum).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        WatchCommand watchCommand \u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                new WatchCommand(INDEX_FIFTH_SHOW, descriptor, true, true);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        String expectedMessage \u003d String.format(WatchCommand.MESSAGE_MARK_EPISODES_SUCCESS,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                markedShow.getNumOfEpisodesWatched(), markedShow);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new WatchList(model.getWatchList()), new UserPrefs());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        expectedModel.setShow(model.getFilteredShowList().get(4), markedShow);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertCommandSuccess(watchCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void execute_invalidSeasonNumber_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show show \u003d TypicalShows.THEOFFICE;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show markedShow \u003d new ShowBuilder(TypicalShows.THEOFFICE).withNumOfEpisodesWatched(validEpisodeNum).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        WatchCommand.WatchShowDescriptor descriptor \u003d new WatchShowDescriptorBuilder(show)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withNumOfSeasonsWatched(invalidSeasonNum).withNumOfEpisodesWatched(validEpisodeNum).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        WatchCommand watchCommand \u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                new WatchCommand(INDEX_FIFTH_SHOW, descriptor, true, true);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        String expectedMessage \u003d String.format(WatchCommand.MESSAGE_INVALID_SEASON_NUMBER,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                markedShow.getNumOfSeasons(), markedShow.getName());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new WatchList(model.getWatchList()), new UserPrefs());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        expectedModel.setShow(model.getFilteredShowList().get(4), markedShow);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertCommandFailure(watchCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void execute_invalidEpisodeNumber_failure() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show show \u003d TypicalShows.THEOFFICE;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show markedShow \u003d new ShowBuilder(TypicalShows.THEOFFICE).withNumOfEpisodesWatched(invalidEpisodeNum).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        WatchCommand.WatchShowDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                new WatchShowDescriptorBuilder(show).withNumOfEpisodesWatched(invalidEpisodeNum).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        WatchCommand watchCommand \u003d"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                new WatchCommand(INDEX_FIFTH_SHOW, descriptor, false, true);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        String expectedMessage \u003d String.format(WatchCommand.MESSAGE_INVALID_EPISODE_NUMBER,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                markedShow.getTotalNumOfEpisodes(), markedShow.getName());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new WatchList(model.getWatchList()), new UserPrefs());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        expectedModel.setShow(model.getFilteredShowList().get(4), markedShow);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertCommandFailure(watchCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void execute_invalidEpisodeNumberOfSeason_failure() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show show \u003d TypicalShows.THEOFFICE;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show markedShow \u003d new ShowBuilder(TypicalShows.THEOFFICE).withNumOfEpisodesWatched(invalidEpisodeNum).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        WatchCommand.WatchShowDescriptor descriptor \u003d new WatchShowDescriptorBuilder(show)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withNumOfSeasonsWatched(validSeasonNum).withNumOfEpisodesWatched(invalidEpisodeNum).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        WatchCommand watchCommand \u003d"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                new WatchCommand(INDEX_FIFTH_SHOW, descriptor, true, true);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        String expectedMessage \u003d String.format(WatchCommand.MESSAGE_INVALID_EPISODE_NUMBER_OF_SEASON,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                markedShow.getTvSeasons().get(validSeasonNum - 1).getSeasonNum(),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                markedShow.getName(),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                markedShow.getNumOfEpisodesOfSeason(validSeasonNum));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new WatchList(model.getWatchList()), new UserPrefs());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        expectedModel.setShow(model.getFilteredShowList().get(4), markedShow);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertCommandFailure(watchCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        final WatchCommand standardCommand \u003d"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                new WatchCommand(INDEX_FIRST_SHOW, WATCH_DESC_ANNABELLE, false, false);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        WatchCommand.WatchShowDescriptor copyDescriptor \u003d new WatchCommand.WatchShowDescriptor(WATCH_DESC_ANNABELLE);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        WatchCommand commandWithSameValues \u003d"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                new WatchCommand(INDEX_FIRST_SHOW, copyDescriptor, false, false);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse(standardCommand.equals(new WatchCommand("
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                INDEX_SECOND_SHOW, WATCH_DESC_ANNABELLE, false, false)));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse(standardCommand.equals(new WatchCommand("
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                INDEX_FIRST_SHOW, WATCH_DESC_BOB_THE_BUILDER, false, false)));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 207,
      "wongchuankai": 2
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void parse() throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 10,
      "heze8": 2,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        /*try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        /*try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 4,
      "heze8": 2,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import static seedu.ezwatchlist.commons.core.messages.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalIndexes.INDEX_FIRST_SHOW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_SHOW));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void parse() throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(ParseException.class, ()-\u003e parser.parse(\"-1\", \"1\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 9,
      "michelleykw": 1,
      "heze8": 4,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import static seedu.ezwatchlist.commons.core.messages.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.NAME_DESC_ANNABELLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_ACTOR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalIndexes.INDEX_FIRST_SHOW;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private static final String ACTOR_EMPTY \u003d \" \" + PREFIX_ACTOR;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_ANNABELLE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_ANNABELLE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_ANNABELLE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void parseInvalidIndex() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(ParseException.class, ()-\u003e parser.parse(\"-1\", \"1\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void parseNoEditField() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        EditCommand.EditShowDescriptor editShowDescriptor \u003d new EditCommand.EditShowDescriptor();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_SHOW, editShowDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\"1\", \"1\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 18,
      "jcjjjared": 2,
      "michelleykw": 1,
      "heze8": 3,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/parser/GoToParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.commands.GoToCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "class GoToParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private GoToParser goToParser \u003d new GoToParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void parse() throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String watchlist \u003d \"watchlist\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        GoToCommand goToCommand \u003d new GoToCommand(\"1\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String watched \u003d \"watched\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        GoToCommand goToCommand2 \u003d new GoToCommand(\"2\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String search \u003d \"search\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        GoToCommand goToCommand3 \u003d new GoToCommand(\"3\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String statistics \u003d \"statistics\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        GoToCommand goToCommand4 \u003d new GoToCommand(\"4\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(goToCommand.equals(goToParser.parse(watchlist, \"1\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(goToCommand2.equals(goToParser.parse(watched, \"1\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(goToCommand3.equals(goToParser.parse(search, \"1\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(goToCommand4.equals(goToParser.parse(statistics, \"1\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e goToParser.parse(\"123\", \"1\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void goToEqualCurrentPanel() throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(goToParser.goToEqualCurrentPanel(\"watchlist\", \"watch-list\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(goToParser.goToEqualCurrentPanel(\"watched\", \"watched-list\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(goToParser.goToEqualCurrentPanel(\"search\", \"search-list\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(goToParser.goToEqualCurrentPanel(\"statistics\", \"statistics tab\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 42
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalIndexes.INDEX_FIRST_SHOW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final String INVALID_NAME \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final String INVALID_IS_WATCHED \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final String INVALID_DATE \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final int INVALID_RUNNING_TIME \u003d -1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final String INVALID_ACTORS \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final String VALID_NAME \u003d \"Titanic\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"Ship\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final boolean VALID_IS_WATCHED \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final String VALID_DATE \u003d \"24/9/1997\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final int VALID_RUNNING_TIME \u003d 122;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final String VALID_ACTORS_1 \u003d \"Leonardo Di Caprio\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final String VALID_ACTORS_2 \u003d \"Kate Winslet\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(INDEX_FIRST_SHOW, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(INDEX_FIRST_SHOW, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((String) null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void parseDescription_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDescription(INVALID_DESCRIPTION));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void parseDate_validValueWithoutWhitespace_returnsDate() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Date expectedDate \u003d new Date(\"1997-9-24\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(VALID_DATE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void parseType() throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, ()-\u003e ParserUtil.parseType(null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(ParseException.class, ()-\u003e ParserUtil.parseType(\"wrong type\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(ParserUtil.parseType(\"movie\").equals(\"movie\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void parseDateInvalid() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(INVALID_DATE));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void parseDateAddEditCommandInvalidTest() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDateAddEditCommand(\"240997\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void parseRunningTimeTest() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRunningTime(\"A\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRunningTime(\"-1\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRunningTime(\"10000000000000000\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void parseActorTest() throws ParseException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseActor(null));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseActor(\"\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(new Actor(\"May\"), ParserUtil.parseActor(\"May\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void parseActorsTest() throws ParseException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        final Set\u003cActor\u003e actorSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        actorSet.add(new Actor(\"May\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Collection\u003cString\u003e actors \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        actors.add(\"May\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(actorSet, ParserUtil.parseActors(actors));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void parseNumOfEpisodesWatchedTest() throws ParseException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseNumOfEpisodesWatched(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNumOfEpisodesWatched(\"-1\"));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNumOfEpisodesWatched(\"0\"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNumOfEpisodesWatched(\"A\"));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(ParserUtil.parseNumOfEpisodesWatched(\"1\"), 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void parseNumOfSeasonsWatchedTest() throws ParseException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseNumOfSeasonsWatched(null));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNumOfSeasonsWatched(\"-1\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNumOfSeasonsWatched(\"0\"));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNumOfSeasonsWatched(\"A\"));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(ParserUtil.parseNumOfSeasonsWatched(\"1\"), 1);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void parseIndexTest() throws ParseException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddIndex(null));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddIndex(\"-1\"));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddIndex(\"0\"));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddIndex(\"A\"));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(ParserUtil.parseAddIndex(\"1\"), 1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void parseIsWatchedInvalidTest() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIsWatched(\"INVALID\"));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 105,
      "jcjjjared": 1,
      "heze8": 4,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/parser/SearchCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import static seedu.ezwatchlist.commons.core.messages.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.commons.core.messages.SearchMessages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "public class SearchCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private SearchCommandParser parser \u003d new SearchCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        assertParseFailure(parser, \"    \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchMessages.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        HashMap\u003cSearchKey, List\u003cString\u003e\u003e searchHash \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        ArrayList\u003cString\u003e nameList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        nameList.add(\"Alice\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        searchHash.put(SearchKey.KEY_NAME, nameList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        SearchCommand expectedSearchCommand \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                new SearchCommand(searchHash);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        assertParseSuccess(parser, \"Alice\", expectedSearchCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n\", expectedSearchCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 7,
      "michelleykw": 13,
      "heze8": 3,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/parser/SearchKeyTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "class SearchKeyTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private SearchKey searchKey \u003d SearchKey.KEY_ACTOR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void getKey() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(searchKey.getKey(), \"actor\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 13
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/parser/SyncCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalIndexes.INDEX_FIRST_SHOW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.api.exceptions.OnlineConnectionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.commands.SyncCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "class SyncCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private SyncCommandParser syncCommandParser \u003d new SyncCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void parse() throws ParseException, OnlineConnectionException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e syncCommandParser.parse(\"INVALID\", \"search\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(syncCommandParser.parse(\"1\", \"search\"), new SyncCommand(INDEX_FIRST_SHOW));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 23
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/parser/WatchCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import static seedu.ezwatchlist.commons.core.messages.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.EPISODES_DESC_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_NUM_OF_EPISODES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_NUM_OF_SEASONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.WatchCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class WatchCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private static final String SEASONS_EMPTY \u003d \" \" + PREFIX_NUM_OF_SEASONS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private static final String EPISODES_EMPTY \u003d \" \" + PREFIX_NUM_OF_EPISODES;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, WatchCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private WatchCommandParser parser \u003d new WatchCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void parse_missingIndex_failure() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertParseFailure(parser, EPISODES_DESC_BOB_THE_BUILDER, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertParseFailure(parser, \"-5\" + EPISODES_DESC_BOB_THE_BUILDER, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertParseFailure(parser, \"0\" + EPISODES_DESC_BOB_THE_BUILDER, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void parse_invalidEpisode_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // negative episode number"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertParseFailure(parser, \"1 \" + \"e/-3\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void parse_invalidSeason_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // negative season number"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertParseFailure(parser, \"1 \" + \"s/-3\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 54,
      "michelleykw": 1
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/parser/WatchListParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import static seedu.ezwatchlist.commons.core.messages.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import static seedu.ezwatchlist.commons.core.messages.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalIndexes.INDEX_FIRST_SHOW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.commands.EditCommand.EditShowDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.commands.GoToCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.commands.SyncCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.commands.WatchCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.testutil.EditShowDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.testutil.ShowBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.testutil.ShowUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.testutil.TypicalShows;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.testutil.WatchShowDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class WatchListParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private final WatchListParser parser \u003d new WatchListParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private final String currentTab \u003d \"watchlist\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD, currentTab) instanceof ClearCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\", currentTab) instanceof ClearCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_SHOW.getOneBased(), currentTab);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_SHOW), command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show show \u003d new ShowBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        EditShowDescriptor descriptor \u003d new EditShowDescriptorBuilder(show).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + INDEX_FIRST_SHOW.getOneBased() + \" \" + ShowUtil.getEditShowDescriptorDetails(descriptor), currentTab);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertEquals(new EditCommand(INDEX_FIRST_SHOW, descriptor), command);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD, currentTab) instanceof ExitCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\", currentTab) instanceof ExitCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void parseCommand_watch() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show show \u003d TypicalShows.THEOFFICE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        WatchCommand.WatchShowDescriptor descriptor \u003d new WatchShowDescriptorBuilder(show).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        WatchCommand command \u003d (WatchCommand) parser.parseCommand(WatchCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                + INDEX_FIRST_SHOW.getOneBased() + \" e/3\", currentTab);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                new WatchCommand(INDEX_FIRST_SHOW, descriptor, false, true), command);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public void parseCommand_search() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        /*List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        SearchCommand command \u003d (SearchCommand) parser.parseCommand("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                SearchCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        assertEquals(new SearchCommand(new NameContainsKeywordsPredicate(keywords)), command);*/"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD, currentTab) instanceof HelpCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\", currentTab) instanceof HelpCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD, currentTab) instanceof ListCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\", currentTab) instanceof ListCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void parseCommand_watchCommand() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(parser.parseCommand(WatchCommand.COMMAND_WORD + \" 3\", currentTab) instanceof WatchCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void parseCommand_searchCommand() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(parser.parseCommand(SearchCommand.COMMAND_WORD + \" n/Potter\", currentTab) instanceof SearchCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            -\u003e parser.parseCommand(\"\", currentTab));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\", currentTab));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void parseCommand_syncCommand() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(parser.parseCommand(SyncCommand.COMMAND_WORD + \" 3\", currentTab) instanceof SyncCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void parseCommand_shortCutKey() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(parser.parseCommand(\"1\", currentTab) instanceof GoToCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void parseCommand_addCommand() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(parser.parseCommand(AddCommand.COMMAND_WORD + \" n/Cars t/movie\", currentTab) instanceof AddCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 50,
      "jcjjjared": 13,
      "michelleykw": 8,
      "heze8": 9,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.model.Model.PREDICATE_ALL_SHOWS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalShows.AVENGERSENDGAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalShows.FIGHTCLUB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.testutil.ShowBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.testutil.WatchListBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(new WatchList(), new WatchList(modelManager.getWatchList()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        userPrefs.setWatchListFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        userPrefs.setWatchListFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void setWatchListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setWatchListFilePath(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void setWatchListFilePath_validPath_setsWatchListFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        modelManager.setWatchListFilePath(path);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(path, modelManager.getWatchListFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void hasShow_nullShow_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasShow(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void hasShow_showNotInWatchList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(modelManager.hasShow(AVENGERSENDGAME));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void hasShow_showInWatchList_returnsTrue() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        modelManager.addShow(AVENGERSENDGAME);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(modelManager.hasShow(AVENGERSENDGAME));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void getFilteredShowList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredShowList().remove(0));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        WatchList watchList \u003d new WatchListBuilder().withShow(AVENGERSENDGAME).withShow(FIGHTCLUB).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        WatchList differentWatchList \u003d new WatchList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        modelManager \u003d new ModelManager(watchList, userPrefs);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(watchList, userPrefs);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different watchlist -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentWatchList, userPrefs)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String[] keywords \u003d AVENGERSENDGAME.getName().showName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        modelManager.updateFilteredShowList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(watchList, userPrefs)));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        modelManager.updateFilteredShowList(PREDICATE_ALL_SHOWS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        differentUserPrefs.setWatchListFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(watchList, differentUserPrefs)));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void hasShowNameTest() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show show \u003d new ShowBuilder(AVENGERSENDGAME).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        modelManager.addShow(show);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(modelManager.hasShowName(show.getName()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void getShowIfHasNameTest() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show show \u003d new ShowBuilder(AVENGERSENDGAME).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        modelManager.addShow(show);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        List\u003cShow\u003e showList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        showList.add(show);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(modelManager.getShowIfHasName(show.getName()), showList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void hasActorTest() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show show \u003d new ShowBuilder(AVENGERSENDGAME).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        modelManager.addShow(show);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(modelManager.hasActor(show.getActors()));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void getShowIfHasActorTest() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show show \u003d new ShowBuilder(AVENGERSENDGAME).build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        modelManager.addShow(show);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        List\u003cShow\u003e showList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        showList.add(show);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(modelManager.getShowIfHasActor(show.getActors()), showList);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void getShowIfIsGenreTest() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show show \u003d new ShowBuilder(AVENGERSENDGAME).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        modelManager.addShow(show);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        List\u003cShow\u003e showList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        showList.add(show);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(modelManager.getShowIfIsGenre(show.getGenres()), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void getWatchedShowListTest() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(modelManager.getWatchedShowList() instanceof ObservableList);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 13,
      "wongchuankai": 77,
      "heze8": 1,
      "-": 90
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void setWatchListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setWatchListFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 1,
      "wongchuankai": 3,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/model/WatchListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalShows.AVENGERSENDGAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalShows.getTypicalWatchList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.testutil.ShowBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class WatchListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private final WatchList watchList \u003d new WatchList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(Collections.emptyList(), watchList.getShowList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e watchList.resetData(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void resetData_withValidReadOnlyWatchList_replacesData() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        WatchList newData \u003d getTypicalWatchList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        watchList.resetData(newData);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(newData, watchList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void resetData_withDuplicateShows_throwsDuplicateShowException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // Two Shows with the same identity fields"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show editedAvengersEndgame \u003d new ShowBuilder(AVENGERSENDGAME).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        List\u003cShow\u003e newShows \u003d Arrays.asList(AVENGERSENDGAME, editedAvengersEndgame);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        WatchListStub newData \u003d new WatchListStub(newShows);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertThrows(DuplicateShowException.class, () -\u003e watchList.resetData(newData));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void hasShow_nullShow_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e watchList.hasShow(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void hasShow_showNotInWatchList_returnsFalse() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(watchList.hasShow(AVENGERSENDGAME));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void hasShow_showInWatchList_returnsTrue() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        watchList.addShow(AVENGERSENDGAME);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(watchList.hasShow(AVENGERSENDGAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void hasShow_showWithSameIdentityFieldsInWatchList_returnsTrue() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        watchList.addShow(AVENGERSENDGAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show editedAvenger \u003d new ShowBuilder(AVENGERSENDGAME).withType(\"Movie\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(watchList.hasShow(editedAvenger));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void getShowList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e watchList.getShowList().remove(0));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * A stub ReadOnlyWatchList whose shows list can violate interface constraints."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static class WatchListStub implements ReadOnlyWatchList {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        private final ObservableList\u003cShow\u003e shows \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        WatchListStub(Collection\u003cShow\u003e shows) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            this.shows.setAll(shows);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public ObservableList\u003cShow\u003e getShowList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return shows;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 83,
      "jcjjjared": 14
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/model/actor/ActorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.model.actor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class ActorTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public void constructor_null_passes() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "        assert(new Actor(null).equals(new Actor(null)));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void constructor_invalidActorName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String invalidActorName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "        //assertThrows(IllegalArgumentException.class, () -\u003e new Actor(invalidActorName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void isValidActorName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // null Actor name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Actor.isValidActorName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 21,
      "jcjjjared": 2,
      "heze8": 3
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/model/show/DateOfReleaseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class DateOfReleaseTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void isValidDateofRelease() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // null Date"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // invalid Date"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(Date.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(Date.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // valid Date"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(Date.isValidDate(\"24 September 1997\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(Date.isValidDate(\"1998\")); // year only"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void hashCode_test() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(new Date(\"1/2/2019\").hashCode(), \"1/2/2019\".hashCode());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 27,
      "jcjjjared": 2
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/model/show/DescriptionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public void constructor_null_passes() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "        assert(new Description(null).equals(new Description(null)));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // valid description"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(Description.isValidDescription(\"A magical Yeti must return to his family.\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(Description.isValidDescription(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(Description.isValidDescription(\"In Gotham City, mentally-troubled comedian Arthur Fleck is \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + \"disregarded and mistreated by society. He then embarks on a downward spiral of revolution\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + \" and bloody crime. This path brings him face-to-face with \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + \"his alter-ego: The Joker.\")); // long description"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void descriptionConstructorTest() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(new Description().fullDescription, \"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void hashCode_test() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(new Description(\"A fine day\").hashCode(), \"A fine day\".hashCode());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 45,
      "jcjjjared": 3,
      "heze8": 2
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/model/show/EpisodeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class EpisodeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private static Episode validEpisode \u003d new Episode(\"Episode 1\", 1);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void isValidEpisodeName() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // invalid Episode name"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse(Episode.isValidEpisodeName(\"\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse(Episode.isValidEpisodeName(\" \"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // valid Episode name"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertTrue(Episode.isValidEpisodeName(\"Episode 1\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void isValidEpisodeNumber() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // negative episode number"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse(Episode.isValidEpisodeNum(-1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // 0 episode number"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse(Episode.isValidEpisodeNum(0));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // valid Episode number"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertTrue(Episode.isValidEpisodeNum(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void episodeConstructorTest() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(new Episode(\"Episode name\", 3).getEpisodeName(), \"Episode name\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(new Episode(\"Episode name\", 3).getEpisodeNum(), 3);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 34,
      "wongchuankai": 7
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/model/show/GenreTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class GenreTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void constructor_null_passes() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assert(new Genre(null).equals(new Genre(null)));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void isValidGenreName() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // null Genre name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Genre.isValidGenreName(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void genreConstructorTest() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(new Genre(\"Action\").genreName, \"Action\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(new Genre(\"Action\").getGenreName(), \"Action\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(new Genre(\"Action\").toString(), \"Action\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 20,
      "wongchuankai": 7
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/model/show/IsWatchedTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class IsWatchedTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void defaultConstructor() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse((new IsWatched()).value);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void constructorWithParameter() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertTrue(new IsWatched(\"true\").value);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void isValidIsWatched() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // null value"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e IsWatched.isValidIsWatched(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //invalid values"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse(() -\u003e IsWatched.isValidIsWatched(\" \"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse(() -\u003e IsWatched.isValidIsWatched(\"False\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse(() -\u003e IsWatched.isValidIsWatched(\"TRUE\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //valid values"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertTrue(() -\u003e IsWatched.isValidIsWatched(\"true\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertTrue(() -\u003e IsWatched.isValidIsWatched(\"false\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(new IsWatched(\"true\").hashCode(), 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(new IsWatched(\"true\").getIsWatchedBoolean(), true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void getIsWatchedBoolean() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertTrue(new IsWatched(\"true\").getIsWatchedBoolean());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse(new IsWatched(\"false\").getIsWatchedBoolean());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 38,
      "wongchuankai": 9
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/model/show/MovieTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "class MovieTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private Set\u003cActor\u003e actors \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private Movie movie \u003d new Movie(new Name(\"test\"), new Description(\"test\"), new IsWatched(\"false\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            new Date(\"1/1/1\"), new RunningTime(), actors);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void getNumOfEpisodesWatched() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(movie.getNumOfEpisodesWatched(), 0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void getTotalNumOfEpisodes() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(movie.getTotalNumOfEpisodes(), 0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void getTvSeasons() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(movie.getTvSeasons(), null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void getLastWatchedSeasonNum() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(movie.getLastWatchedSeasonNum(), 0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void getLastWatchedSeasonEpisode() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(movie.getLastWatchedSeasonEpisode(), 0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void getNumOfSeasons() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(movie.getNumOfSeasons(), 0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void getNumOfEpisodesOfSeason() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(movie.getNumOfEpisodesOfSeason(1), 0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 50
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/model/show/NameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.testutil.ShowBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(predicate.test(new ShowBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(predicate.test(new ShowBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(predicate.test(new ShowBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(predicate.test(new ShowBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(predicate.test(new ShowBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(predicate.test(new ShowBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // Keywords match description, dateofrelease, and actors, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"description\", \"2019\", \"Tony\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(predicate.test(new ShowBuilder().withName(\"Alice\").withDescription(\"description\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                .withDateOfRelease(\"2019\").withActors(\"Tony Stark\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 13,
      "jcjjjared": 1,
      "-": 63
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/model/show/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void nameConstructorTest() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(new Name().showName, \"n.a.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(new Name().getName(), \"n.a.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void hashCode_test() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(new Name(\"A fine day\").hashCode(), \"A fine day\".hashCode());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 12,
      "jcjjjared": 4,
      "tswuxia": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/model/show/PosterTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "class PosterTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "    void constructor_anyParam_willWork() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "        assertAll(() -\u003e new Poster(null), () -\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "                new Poster(\"-123\"), () -\u003e new Poster(\"\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "    void getImagePathPlaceholder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "        Poster placeholderImage \u003d new Poster();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "        Poster invalidImage \u003d new Poster(\"-123\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "        assertTrue(new Poster(null).getImagePath().equals(placeholderImage.getImagePath()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": "        assertFalse(invalidImage.getImagePath().equals(placeholderImage.getImagePath()));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 24
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/model/show/RunningTimeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class RunningTimeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void constructor_invalidRunningTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        int invalidRunningTime \u003d -1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertThrows(IllegalArgumentException.class, () -\u003e new RunningTime(invalidRunningTime));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void isValidRunningTime() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // invalid running time"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(RunningTime.isValidRunningTime(-1)); // negative number"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // valid running time"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(RunningTime.isValidRunningTime(123)); // exactly 3 numbers"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(RunningTime.isValidRunningTime(12033123)); // long phone numbers"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void testHashCode() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(new RunningTime(1).hashCode(), 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 29,
      "jcjjjared": 3
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/model/show/ShowTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalShows.AVENGERSENDGAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalShows.FIGHTCLUB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.testutil.ShowBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class ShowTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show show \u003d new ShowBuilder().build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e show.getActors().remove(0));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void isSameShow() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(AVENGERSENDGAME.isSameShow(AVENGERSENDGAME));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(AVENGERSENDGAME.isSameShow(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different isWatched and RunningTime -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show editedAvengersEndGame \u003d new ShowBuilder(AVENGERSENDGAME)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withIsWatched(\"true\").withRunningTime(122).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertFalse(AVENGERSENDGAME.isSameShow(editedAVENGERSENDGAME));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        editedAvengersEndGame \u003d new ShowBuilder(AVENGERSENDGAME).withName(\"FIGHTCLUB\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse(AVENGERSENDGAME.isSameShow(editedAvengersEndGame));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // same name, same description, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        editedAvengersEndGame \u003d new ShowBuilder(AVENGERSENDGAME).withIsWatched(\"true\").withDateOfRelease(\"2019\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                .withRunningTime(122).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertTrue(AVENGERSENDGAME.isSameShow(editedAVENGERSENDGAME));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // same name, same dateofrelease, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        editedAvengersEndGame \u003d new ShowBuilder(AVENGERSENDGAME).withRunningTime(122).withDescription(\"DESCRIPTION\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withIsWatched(\"true\").withType(\"Movie\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertTrue(AVENGERSENDGAME.isSameShow(editedAvengersEndGame));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // same name, same dateofrelease, same description, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        editedAvengersEndGame \u003d new ShowBuilder(AVENGERSENDGAME).withIsWatched(\"true\").withRunningTime(122).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertTrue(AVENGERSENDGAME.isSameShow(editedAvengersEndGame));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show avengerendgameCopy \u003d new ShowBuilder(AVENGERSENDGAME).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertTrue(AVENGERSENDGAME.equals(avengerendgameCopy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(AVENGERSENDGAME.equals(AVENGERSENDGAME));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(AVENGERSENDGAME.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(AVENGERSENDGAME.equals(5));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different shows -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(AVENGERSENDGAME.equals(FIGHTCLUB));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show editedAvengersendgame \u003d new ShowBuilder(AVENGERSENDGAME).withName(\"FIGHTCLUB\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(AVENGERSENDGAME.equals(editedAvengersendgame));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        editedAvengersendgame \u003d new ShowBuilder(AVENGERSENDGAME).withDescription(\"DESCRIPTION\").build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(AVENGERSENDGAME.equals(editedAvengersendgame));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different iswatched -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        editedAvengersendgame \u003d new ShowBuilder(AVENGERSENDGAME).withIsWatched(\"true\").build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(AVENGERSENDGAME.equals(editedAvengersendgame));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different dateofrelease -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        editedAvengersendgame \u003d new ShowBuilder(AVENGERSENDGAME).withDateOfRelease(\"2019\").build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(AVENGERSENDGAME.equals(editedAvengersendgame));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different Actors -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        editedAvengersendgame \u003d new ShowBuilder(AVENGERSENDGAME).withActors(\"actors\").build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(AVENGERSENDGAME.equals(editedAvengersendgame));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 71,
      "jcjjjared": 20
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/model/show/TvSeasonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "class TvSeasonTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void isValidTvSeasonNumber() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // Negative Season number"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse(TvSeason.isValidTvSeasonNumber(-1));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // Season number is 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse(TvSeason.isValidTvSeasonNumber(0));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void isValidTotalNumberOfEpisodes() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // Total Number of Episodes is a negative number"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse(TvSeason.isValidTotalNumOfEpisodes(-1));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void getSeasonNum() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        ArrayList\u003cEpisode\u003e arr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Episode episode \u003d new Episode(\"testName\", 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        arr.add(episode);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        TvSeason tvSeason \u003d new TvSeason(1, 1, arr);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(tvSeason.getSeasonNum(), 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void getTotalNumOfEpisodes() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        ArrayList\u003cEpisode\u003e arr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Episode episode \u003d new Episode(\"testName\", 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        arr.add(episode);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        TvSeason tvSeason \u003d new TvSeason(1, 1, arr);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(tvSeason.getTotalNumOfEpisodes(), 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void getEpisodes() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        ArrayList\u003cEpisode\u003e arr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Episode episode \u003d new Episode(\"testName\", 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        arr.add(episode);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        TvSeason tvSeason \u003d new TvSeason(1, 1, arr);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(tvSeason.getEpisodes(), arr);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 23,
      "wongchuankai": 30
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/model/show/TvShowTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "class TvShowTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void getNumOfEpisodesWatched() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Set\u003cActor\u003e actors \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        List\u003cTvSeason\u003e episodeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        ArrayList\u003cEpisode\u003e episodeList1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Episode episodee \u003d new Episode(\"test\", 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        episodeList1.add(episodee);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        TvSeason tvSeason \u003d new TvSeason(1, 1, episodeList1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        episodeList.add(tvSeason);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        TvShow tvShow \u003d new TvShow(new Name(\"test\"), new Description(\"des\"), new IsWatched(\"false\"), new Date(\"1/1/1\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                new RunningTime(1), actors, 1, 1, episodeList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(tvShow.getNumOfEpisodesWatched(), 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void getTvSeasons() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Set\u003cActor\u003e actors \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        List\u003cTvSeason\u003e episodeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        ArrayList\u003cEpisode\u003e episodeList1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Episode episodee \u003d new Episode(\"test\", 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        episodeList1.add(episodee);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        TvSeason tvSeason \u003d new TvSeason(1, 1, episodeList1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        episodeList.add(tvSeason);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        TvShow tvShow \u003d new TvShow(new Name(\"test\"), new Description(\"des\"), new IsWatched(\"false\"), new Date(\"1/1/1\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                new RunningTime(1), actors, 1, 1, episodeList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(tvShow.getTvSeasons(), episodeList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void getTotalNumOfEpisodes() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Set\u003cActor\u003e actors \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        List\u003cTvSeason\u003e episodeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        ArrayList\u003cEpisode\u003e episodeList1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Episode episodee \u003d new Episode(\"test\", 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        episodeList1.add(episodee);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        TvSeason tvSeason \u003d new TvSeason(1, 1, episodeList1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        episodeList.add(tvSeason);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        TvShow tvShow \u003d new TvShow(new Name(\"test\"), new Description(\"des\"), new IsWatched(\"false\"), new Date(\"1/1/1\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                new RunningTime(1), actors, 1, 1, episodeList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(tvShow.getTotalNumOfEpisodes(), 1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void getLastWatchedSeasonNum() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Set\u003cActor\u003e actors \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        List\u003cTvSeason\u003e episodeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        ArrayList\u003cEpisode\u003e episodeList1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Episode episodee \u003d new Episode(\"test\", 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        episodeList1.add(episodee);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        TvSeason tvSeason \u003d new TvSeason(1, 1, episodeList1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        episodeList.add(tvSeason);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        TvShow tvShow \u003d new TvShow(new Name(\"test\"), new Description(\"des\"), new IsWatched(\"false\"), new Date(\"1/1/1\"),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                new RunningTime(1), actors, 1, 1, episodeList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(tvShow.getLastWatchedSeasonNum(), 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void getLastWatchedSeasonEpisode() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Set\u003cActor\u003e actors \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        List\u003cTvSeason\u003e episodeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        ArrayList\u003cEpisode\u003e episodeList1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Episode episodee \u003d new Episode(\"test\", 1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        episodeList1.add(episodee);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        TvSeason tvSeason \u003d new TvSeason(1, 1, episodeList1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        episodeList.add(tvSeason);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        TvShow tvShow \u003d new TvShow(new Name(\"test\"), new Description(\"des\"), new IsWatched(\"false\"), new Date(\"1/1/1\"),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                new RunningTime(1), actors, 1, 1, episodeList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(tvShow.getLastWatchedSeasonEpisode(), 1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void getNumOfSeasons() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Set\u003cActor\u003e actors \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        List\u003cTvSeason\u003e episodeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        ArrayList\u003cEpisode\u003e episodeList1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Episode episodee \u003d new Episode(\"test\", 1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        episodeList1.add(episodee);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        TvSeason tvSeason \u003d new TvSeason(1, 1, episodeList1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        episodeList.add(tvSeason);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        TvShow tvShow \u003d new TvShow(new Name(\"test\"), new Description(\"des\"), new IsWatched(\"false\"), new Date(\"1/1/1\"),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                new RunningTime(1), actors, 1, 1, episodeList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(tvShow.getNumOfSeasons(), 1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 126
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/model/show/TypeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "class TypeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void getType() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 11
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/model/show/UniqueShowListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalShows.AVENGERSENDGAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalShows.FIGHTCLUB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.exceptions.DuplicateShowException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.exceptions.ShowNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.testutil.ShowBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class UniqueShowListTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private final UniqueShowList uniqueShowList \u003d new UniqueShowList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void contains_nullShow_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueShowList.contains(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void contains_showNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(uniqueShowList.contains(AVENGERSENDGAME));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void contains_showInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        uniqueShowList.add(AVENGERSENDGAME);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(uniqueShowList.contains(AVENGERSENDGAME));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void contains_showWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        uniqueShowList.add(AVENGERSENDGAME);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show editedAlice \u003d new ShowBuilder(AVENGERSENDGAME).withIsWatched(\"true\").withType(\"Movie\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(uniqueShowList.contains(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void add_nullShow_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueShowList.add(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void add_duplicateShow_throwsDuplicateShowException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        uniqueShowList.add(AVENGERSENDGAME);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(DuplicateShowException.class, () -\u003e uniqueShowList.add(AVENGERSENDGAME));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void setShow_nullTargetShow_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueShowList.setShow(null, AVENGERSENDGAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void setShow_nullEditedShow_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueShowList.setShow(AVENGERSENDGAME, null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void setShow_targetShowNotInList_throwsShowNotFoundException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(ShowNotFoundException.class, () -\u003e uniqueShowList.setShow(AVENGERSENDGAME, AVENGERSENDGAME));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void setShow_editedShowIsSameShow_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        uniqueShowList.add(AVENGERSENDGAME);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void setShow_editedShowHasSameIdentity_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        uniqueShowList.add(AVENGERSENDGAME);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show editedAvengersEndGame \u003d new ShowBuilder(AVENGERSENDGAME).withIsWatched(\"true\").build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        uniqueShowList.setShow(AVENGERSENDGAME, editedAvengersEndGame);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        UniqueShowList expectedUniqueShowList \u003d new UniqueShowList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        expectedUniqueShowList.add(editedAvengersEndGame);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(expectedUniqueShowList, expectedUniqueShowList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void setShow_editedShowHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        uniqueShowList.add(AVENGERSENDGAME);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        uniqueShowList.setShow(AVENGERSENDGAME, FIGHTCLUB);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        UniqueShowList expectedUniqueShowList \u003d new UniqueShowList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        expectedUniqueShowList.add(FIGHTCLUB);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(expectedUniqueShowList, uniqueShowList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void setShow_editedShowHasNonUniqueIdentity_throwsDuplicateShowException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        uniqueShowList.add(AVENGERSENDGAME);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        uniqueShowList.add(FIGHTCLUB);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(DuplicateShowException.class, () -\u003e uniqueShowList.setShow(AVENGERSENDGAME, FIGHTCLUB));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void remove_nullShow_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueShowList.remove(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void remove_showDoesNotExist_throwsShowNotFoundException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(ShowNotFoundException.class, () -\u003e uniqueShowList.remove(AVENGERSENDGAME));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void remove_existingShow_removesShow() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        uniqueShowList.add(AVENGERSENDGAME);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        uniqueShowList.remove(AVENGERSENDGAME);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        UniqueShowList expectedUniqueShowList \u003d new UniqueShowList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(expectedUniqueShowList, uniqueShowList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void setShows_nullUniqueShowList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueShowList.setShows((UniqueShowList) null));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void setShows_uniqueShowList_replacesOwnListWithProvidedUniqueShowList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        uniqueShowList.add(AVENGERSENDGAME);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        UniqueShowList expectedUniqueShowList \u003d new UniqueShowList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        expectedUniqueShowList.add(FIGHTCLUB);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        uniqueShowList.setShows(expectedUniqueShowList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(expectedUniqueShowList, uniqueShowList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void setShows_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueShowList.setShows((List\u003cShow\u003e) null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void setShows_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        uniqueShowList.add(AVENGERSENDGAME);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        List\u003cShow\u003e showsList \u003d Collections.singletonList(FIGHTCLUB);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        uniqueShowList.setShows(showsList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        UniqueShowList expectedUniqueShowList \u003d new UniqueShowList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        expectedUniqueShowList.add(FIGHTCLUB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(expectedUniqueShowList, uniqueShowList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void setShows_listWithDuplicateShows_throwsDuplicateShowException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        List\u003cShow\u003e listWithDuplicateShows \u003d Arrays.asList(AVENGERSENDGAME, AVENGERSENDGAME);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertThrows(DuplicateShowException.class, () -\u003e uniqueShowList.setShows(listWithDuplicateShows));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            -\u003e uniqueShowList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void hasShowNameTest() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show test \u003d new ShowBuilder(AVENGERSENDGAME).withName(\"test\").build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        uniqueShowList.add(test);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        List\u003cShow\u003e showList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        showList.add(test);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(uniqueShowList.hasShowName(new Name(\"test\")), true);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void getShowIfHasNameTest() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show test \u003d new ShowBuilder(AVENGERSENDGAME).withName(\"test\").build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        uniqueShowList.add(test);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        List\u003cShow\u003e showList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        showList.add(test);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(uniqueShowList.getShowIfHasName(new Name(\"test\")), showList);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void hasActorTest() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show test \u003d new ShowBuilder(AVENGERSENDGAME).withActors(\"test\").build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show test2 \u003d (TvShow) new ShowBuilder(AVENGERSENDGAME).withType(\"tv\").build();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        uniqueShowList.add(test);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        List\u003cShow\u003e showList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        showList.add(test);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Set\u003cActor\u003e actors \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        actors.add(new Actor(\"test\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(uniqueShowList.hasActor(actors), true);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        showList.clear();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show tvShow \u003d new TvShow(new Name(), new Description(), new IsWatched(),"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                new Date(), new RunningTime(), actors, 0, 0, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(uniqueShowList.hasActor(actors), true);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void getShowIfHasActorTest() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show test \u003d new ShowBuilder(AVENGERSENDGAME).withActors(\"test\").build();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        uniqueShowList.add(test);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        List\u003cShow\u003e showList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        showList.add(test);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Set\u003cActor\u003e actors \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        actors.add(new Actor(\"test\"));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(uniqueShowList.getShowIfHasActor(actors), showList);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void getShowIfIsGenreTest() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show test \u003d new ShowBuilder(AVENGERSENDGAME).build();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        uniqueShowList.add(test);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        List\u003cShow\u003e showList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        showList.add(test);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Set\u003cGenre\u003e genres \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        genres.add(new Genre(\"test\"));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(uniqueShowList.getShowIfIsGenre(genres), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void iteratorTest() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(uniqueShowList.iterator() instanceof Iterator);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(uniqueShowList.hashCode(), uniqueShowList.getInternalList().hashCode());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void getInternalUnmodifiableListTest() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(uniqueShowList.getInternalUnmodifiableList() instanceof ObservableList);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void showsAreUniqueTest() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show show \u003d new ShowBuilder(AVENGERSENDGAME).build();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show show1 \u003d new ShowBuilder(FIGHTCLUB).build();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        List\u003cShow\u003e showList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        showList.add(show);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        showList.add(show1);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(uniqueShowList.showsAreUniquePublic(showList));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        showList.add(show);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(uniqueShowList.showsAreUniquePublic(showList));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 233,
      "jcjjjared": 16
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/model/util/SampleDataUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyWatchList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "class SampleDataUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void getSampleShows() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(SampleDataUtil.getSampleShows() instanceof Show[]);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void getSampleWatchList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(SampleDataUtil.getSampleWatchList() instanceof ReadOnlyWatchList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 22
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/storage/JsonAdaptedActorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "class JsonAdaptedActorTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void getActorName() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        JsonAdaptedActor jsonAdaptedActor \u003d new JsonAdaptedActor(\"TEST NAME\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(jsonAdaptedActor.getActorName(), \"TEST NAME\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        JsonAdaptedActor jsonAdaptedActor \u003d new JsonAdaptedActor(\"\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e jsonAdaptedActor.toModelType());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        JsonAdaptedActor jsonAdaptedActor2 \u003d new JsonAdaptedActor(\"Test name\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(jsonAdaptedActor2.toModelType(), new Actor(\"Test name\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 27
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/storage/JsonAdaptedEpisodeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Episode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "class JsonAdaptedEpisodeTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void getEpisodeName() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        JsonAdaptedEpisode jsonAdaptedEpisode \u003d new JsonAdaptedEpisode(\"Episode 1\" , 1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Episode episode \u003d new Episode(\"Episode 2\", 2);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        JsonAdaptedEpisode jsonAdaptedEpisode2 \u003d new JsonAdaptedEpisode(\"Episode 2\" , -1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(jsonAdaptedEpisode.getEpisodeName(), \"Episode 1\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(new JsonAdaptedEpisode(episode).getEpisodeNum(), 2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void getEpisodeNum() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        JsonAdaptedEpisode jsonAdaptedEpisode \u003d new JsonAdaptedEpisode(\"Episode 1\" , 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        JsonAdaptedEpisode jsonAdaptedEpisode2 \u003d new JsonAdaptedEpisode(\"Episode 2\" , -1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(jsonAdaptedEpisode.getEpisodeNum(), 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        JsonAdaptedEpisode jsonAdaptedEpisode \u003d new JsonAdaptedEpisode(\"Episode 1\" , 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        JsonAdaptedEpisode jsonAdaptedEpisode2 \u003d new JsonAdaptedEpisode(\"Episode 2\" , -1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e jsonAdaptedEpisode2.toModelType());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(jsonAdaptedEpisode.toModelType() instanceof Episode);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 37
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/storage/JsonAdaptedGenreTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Genre;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "class JsonAdaptedGenreTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void getGenreName() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        JsonAdaptedGenre jsonAdaptedGenre \u003d new JsonAdaptedGenre(\"Action\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Genre genre \u003d new Genre(\"Action\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(jsonAdaptedGenre.getGenreName(), \"Action\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(new JsonAdaptedGenre(genre).getGenreName(), \"Action\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void toModelType() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        JsonAdaptedGenre jsonAdaptedGenre \u003d new JsonAdaptedGenre(\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e jsonAdaptedGenre.toModelType());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 26
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/storage/JsonAdaptedMovieTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalShows.JOKER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.testutil.ShowBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "class JsonAdaptedMovieTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show show \u003d new ShowBuilder(JOKER).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(new JsonAdaptedMovie(show).getName(), \"Joker\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show name \u003d new ShowBuilder(JOKER).withName(\"\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new JsonAdaptedMovie(name).toModelType());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new JsonAdaptedMovie(\"NAME\", \"Movie\", \"\", \"false\", \"des\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                1, new ArrayList\u003cJsonAdaptedActor\u003e(), \"poster\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                new ArrayList\u003cJsonAdaptedGenre\u003e()).toModelType());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new JsonAdaptedMovie(\"NAME\", \"Movie\", \"24/09/1997\", \"\", \"des\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                1, new ArrayList\u003cJsonAdaptedActor\u003e(), \"poster\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                new ArrayList\u003cJsonAdaptedGenre\u003e()).toModelType());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new JsonAdaptedMovie(\"NAME\", \"Movie\", \"24/09/1997\", \"false\", \"\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                1, new ArrayList\u003cJsonAdaptedActor\u003e(), \"poster\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                new ArrayList\u003cJsonAdaptedGenre\u003e()).toModelType());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new JsonAdaptedMovie(\"NAME\", \"Movie\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                \"24/09/1997\", \"false\", \"1\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                -1, new ArrayList\u003cJsonAdaptedActor\u003e(), \"poster\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                new ArrayList\u003cJsonAdaptedGenre\u003e()).toModelType());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new JsonAdaptedMovie(\"NAME\", \"Movie\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                \"24/09/1997\", \"false\", null,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                1, new ArrayList\u003cJsonAdaptedActor\u003e(), \"poster\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                new ArrayList\u003cJsonAdaptedGenre\u003e()).toModelType());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new JsonAdaptedMovie(\"NAME\", \"Movie\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                null, \"false\", \"des\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                1, new ArrayList\u003cJsonAdaptedActor\u003e(), \"poster\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                new ArrayList\u003cJsonAdaptedGenre\u003e()).toModelType());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 45
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/storage/JsonAdaptedShowsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalShows.AVENGERSENDGAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.IsWatched;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Movie;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.RunningTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.TvSeason;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.TvShow;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.testutil.ShowBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class JsonAdaptedShowsTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final String INVALID_NAME \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final String INVALID_DATE_OF_RELEASE \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final int INVALID_RUNNINGTIME \u003d -1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final String INVALID_ACTOR \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final String VALID_NAME \u003d AVENGERSENDGAME.getName().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d AVENGERSENDGAME.getDescription().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final String VALID_DATEOFRELEASE \u003d AVENGERSENDGAME.getDateOfRelease().value;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final int VALID_RUNNINGTIME \u003d AVENGERSENDGAME.getRunningTime().value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final List\u003cJsonAdaptedActor\u003e VALID_ACTOR \u003d AVENGERSENDGAME.getActors().stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            .map(JsonAdaptedActor::new)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void toModelType_validShowDetails_returnsShow() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        JsonAdaptedShows show \u003d new JsonAdaptedShows(AVENGERSENDGAME);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(AVENGERSENDGAME, show.toModelType());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        /*JsonAdaptedShows show \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                new JsonAdaptedShows(INVALID_NAME, \"Movie\", VALID_DATEOFRELEASE, true, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                        VALID_RUNNINGTIME, VALID_ACTOR);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, show::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        /*JsonAdaptedShows show \u003d new JsonAdaptedShows(null, \"Movie\", VALID_DATEOFRELEASE,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                true, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                VALID_RUNNINGTIME, VALID_ACTOR);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, show::toModelType);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void toModelType_invalidDateOfRelease_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        JsonAdaptedShows show \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                new JsonAdaptedShows(VALID_NAME, \"MOVIE\", INVALID_DATE_OF_RELEASE, false,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                        VALID_DESCRIPTION, VALID_RUNNINGTIME, VALID_ACTOR);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, show::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void toModelType_nullDateOfRelease_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        JsonAdaptedShows show \u003d new JsonAdaptedShows(VALID_NAME, \"Movie\", null,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                false, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                VALID_RUNNINGTIME, VALID_ACTOR);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, show::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void toModelType_invalidRunningTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        JsonAdaptedShows show \u003d new JsonAdaptedShows(VALID_NAME, \"Movie\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                VALID_DATEOFRELEASE, false, \"hello\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                INVALID_RUNNINGTIME, VALID_ACTOR);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String expectedMessage \u003d RunningTime.MESSAGE_CONSTRAINTS2;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, show::toModelType);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void toModelType_invalidActors_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        List\u003cJsonAdaptedActor\u003e invalidActors \u003d new ArrayList\u003c\u003e(VALID_ACTOR);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        invalidActors.add(new JsonAdaptedActor(INVALID_ACTOR));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        JsonAdaptedShows show \u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                new JsonAdaptedShows(VALID_NAME, \"Movie\", VALID_DATEOFRELEASE, false , VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                        VALID_RUNNINGTIME, invalidActors);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(IllegalValueException.class, show::toModelType);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void jsonAdaptedShowsConstructorTest() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        List\u003cShow\u003e shows \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        List\u003cJsonAdaptedTvShow\u003e jsonAdaptedTvShowList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Set\u003cActor\u003e actors \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        List\u003cJsonAdaptedMovie\u003e jsonAdaptedMovieList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Movie movie \u003d new Movie(new Name(\"test\"), new Description(\"123\"), new IsWatched(\"false\"),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                new Date(\"24/09/1997\"), new RunningTime(1), actors);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        TvShow tvShow \u003d new TvShow(new Name(\"test\"), new Description(\"123\"), new IsWatched(\"false\"),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                new Date(\"24/09/1997\"), new RunningTime(1), actors, 1, 1,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                new ArrayList\u003cTvSeason\u003e());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show show \u003d new ShowBuilder(AVENGERSENDGAME).withType(\"Movie\").build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        shows.add(movie);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        shows.add(tvShow);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        jsonAdaptedMovieList.add(new JsonAdaptedMovie(show));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(new JsonAdaptedShows(shows).getMovies() instanceof List);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(new JsonAdaptedShows(shows).getTvShows() instanceof List);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 112,
      "jcjjjared": 26
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/storage/JsonAdaptedTvSeasonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Episode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.TvSeason;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "class JsonAdaptedTvSeasonTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void getSeasonNumber() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Set\u003cActor\u003e actors \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        actors.add(new Actor(\"Test\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Episode episode \u003d new Episode(\"Test\", 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        ArrayList\u003cEpisode\u003e episodeArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        episodeArrayList.add(episode);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        TvSeason tvSeason \u003d new TvSeason(1, 1, episodeArrayList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(new JsonAdaptedTvSeason(tvSeason).getSeasonNumber(), 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void getTotalNumOfEpisodes() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Set\u003cActor\u003e actors \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        actors.add(new Actor(\"Test\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Episode episode \u003d new Episode(\"Test\", 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        ArrayList\u003cEpisode\u003e episodeArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        episodeArrayList.add(episode);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        TvSeason tvSeason \u003d new TvSeason(1, 1, episodeArrayList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(new JsonAdaptedTvSeason(tvSeason).getTotalNumOfEpisodes(), 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void getEpisodes() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Set\u003cActor\u003e actors \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        actors.add(new Actor(\"Test\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Episode episode \u003d new Episode(\"Test\", 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        ArrayList\u003cEpisode\u003e episodeArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        episodeArrayList.add(episode);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        TvSeason tvSeason \u003d new TvSeason(1, 1, episodeArrayList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        JsonAdaptedEpisode jsonAdaptedEpisode \u003d new JsonAdaptedEpisode(\"ep\", 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        ArrayList\u003cJsonAdaptedEpisode\u003e adaptedEpisodes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        adaptedEpisodes.add(jsonAdaptedEpisode);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        JsonAdaptedTvSeason jsonAdaptedTvSeason \u003d new JsonAdaptedTvSeason(1, 1, adaptedEpisodes);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(jsonAdaptedTvSeason.getEpisodes(), adaptedEpisodes);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void toModelType() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        JsonAdaptedEpisode jsonAdaptedEpisode \u003d new JsonAdaptedEpisode(\"ep\", 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        ArrayList\u003cJsonAdaptedEpisode\u003e adaptedEpisodes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        adaptedEpisodes.add(jsonAdaptedEpisode);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new JsonAdaptedTvSeason(-1, 1, adaptedEpisodes).toModelType());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new JsonAdaptedTvSeason(1, -1, adaptedEpisodes).toModelType());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 67
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/storage/JsonAdaptedTvShowTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Episode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.IsWatched;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.RunningTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.TvSeason;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.TvShow;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "class JsonAdaptedTvShowTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        List\u003cJsonAdaptedTvShow\u003e jsonAdaptedTvShowList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        List\u003cJsonAdaptedActor\u003e actorss \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        List\u003cJsonAdaptedTvSeason\u003e tvSeasons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        List\u003cJsonAdaptedGenre\u003e genres \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Set\u003cActor\u003e actors \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        actors.add(new Actor(\"Test\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Episode episode \u003d new Episode(\"Test\", 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        ArrayList\u003cEpisode\u003e episodeArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        episodeArrayList.add(episode);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        ArrayList\u003cTvSeason\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        TvSeason tvSeason \u003d new TvSeason(1, 1, episodeArrayList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        arrayList.add(tvSeason);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        TvShow tvShow \u003d new TvShow(new Name(\"test\"), new Description(\"123\"), new IsWatched(\"false\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            new Date(null), new RunningTime(1), actors, 1, 1, arrayList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(new JsonAdaptedTvShow(tvShow).toModelType(), tvShow);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new JsonAdaptedTvShow(\"\", \"tvshow\", \"\", \"true\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                \"123\", 1, actorss, \"poster\", 1 , 1, tvSeasons, genres).toModelType());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new JsonAdaptedTvShow(\"q\", \"tvshow\", null, \"true\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                \"123\", 1, actorss, \"poster\", 1 , 1, tvSeasons, genres).toModelType());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new JsonAdaptedTvShow(\"q\", \"tvshow\", \"2\", \"\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                \"123\", 1, actorss, \"poster\", 1 , 1, tvSeasons, genres).toModelType());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new JsonAdaptedTvShow(\"q\", \"tvshow\", \"24\", \"true\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                null, 1, actorss, \"poster\", 1 , 1, tvSeasons, genres).toModelType());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new JsonAdaptedTvShow(\"q\", \"tvshow\", \"24\", \"true\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                \"123\", -1, actorss, \"poster\", 1 , 1, tvSeasons, genres).toModelType());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new JsonAdaptedTvShow(\"q\", \"tvshow\", \"\", \"true\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                \"123\", 1, actorss, \"poster\", 1 , 1, tvSeasons, genres).toModelType());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new JsonAdaptedTvShow(\"q\", \"tvshow\", \"24\", \"true\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                \"\", 1, actorss, \"poster\", 1 , 1, tvSeasons, genres).toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 59
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/storage/JsonSerializableWatchListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.WatchList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.IsWatched;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Movie;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.RunningTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.TvSeason;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.TvShow;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class JsonSerializableWatchListTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableWatchListTest\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final Path TYPICAL_SHOWS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalShowsWatchList.json\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final Path INVALID_SHOW_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidShowWatchList.json\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final Path DUPLICATE_SHOW_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateShowWatchList.json\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void toModelType_typicalActorsFile_success() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        /*JsonSerializableWatchList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_SHOWS_FILE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                JsonSerializableWatchList.class).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        WatchList watchListFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        WatchList typicalShowsWatchList \u003d TypicalShows.getTypicalWatchList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        assertEquals(watchListFromFile, typicalShowsWatchList);*/"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void toModelType_invalidShowFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        JsonSerializableWatchList dataFromFile \u003d JsonUtil.readJsonFile(INVALID_SHOW_FILE,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                JsonSerializableWatchList.class).get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void toModelType_duplicateShows_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        JsonSerializableWatchList dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_SHOW_FILE,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                JsonSerializableWatchList.class).get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableWatchList.MESSAGE_DUPLICATE_SHOW,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void constructor() throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        WatchList watchList \u003d new WatchList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Set\u003cActor\u003e actors \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        JsonSerializableWatchList jsonSerializableWatchList \u003d new JsonSerializableWatchList(watchList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(jsonSerializableWatchList.getShows() instanceof JsonAdaptedShows);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Movie movie \u003d new Movie(new Name(\"test\"), new Description(\"123\"), new IsWatched(\"false\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                new Date(\"24/09/1997\"), new RunningTime(1), actors);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        TvShow tvShow \u003d new TvShow(new Name(\"test1\"), new Description(\"123\"), new IsWatched(\"false\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                new Date(\"24/09/1997\"), new RunningTime(1), actors, 1, 1,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                new ArrayList\u003cTvSeason\u003e());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        watchList.addShow(movie);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        watchList.addShow(tvShow);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(new JsonSerializableWatchList(watchList).getShows() instanceof JsonAdaptedShows);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(new JsonSerializableWatchList(watchList).toModelType() instanceof WatchList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void toModelType() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 77,
      "jcjjjared": 1,
      "michelleykw": 1
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        userPrefs.setWatchListFilePath(Paths.get(\"watchlist.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(new JsonUserPrefsStorage(TEST_DATA_FOLDER).getUserPrefsFilePath(), TEST_DATA_FOLDER);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void testReadUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(TEST_DATA_FOLDER);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        //assertTrue(jsonUserPrefsStorage.readUserPrefs() instanceof Optional);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void testReadUserPrefs1() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void testSaveUserPrefs() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertEquals(original, readBack);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertEquals(original, readBack);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 22,
      "jcjjjared": 2,
      "heze8": 5,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/storage/JsonWatchListStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalShows.FIGHTCLUB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalShows.GODFATHER2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalShows.getTypicalWatchList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyWatchList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.WatchList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class JsonWatchListStorageTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonWatchListStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void readWatchList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readWatchList(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private java.util.Optional\u003cReadOnlyWatchList\u003e readWatchList(String filePath) throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return new JsonWatchListStorage(Paths.get(filePath)).readWatchList(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(readWatchList(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readWatchList(\"notJsonFormatWatchList.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void readWatchList_invalidShowWatchList_throwDataConversionException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readWatchList(\"invalidShowWatchList.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void readWatchList_invalidAndValidShowWatchList_throwDataConversionException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readWatchList(\"invalidAndValidShowWatchList.json\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void readAndSaveWatchList_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempWatchList.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        WatchList original \u003d getTypicalWatchList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        JsonWatchListStorage jsonWatchListStorage \u003d new JsonWatchListStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        jsonWatchListStorage.saveWatchList(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        ReadOnlyWatchList readBack \u003d jsonWatchListStorage.readWatchList(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(original, new WatchList(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        original.addShow(GODFATHER2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        original.removeShow(FIGHTCLUB);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        jsonWatchListStorage.saveWatchList(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        readBack \u003d jsonWatchListStorage.readWatchList(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(original, new WatchList(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        original.addShow(FIGHTCLUB);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        jsonWatchListStorage.saveWatchList(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        readBack \u003d jsonWatchListStorage.readWatchList().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(original, new WatchList(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void saveWatchList_nullWatchList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveWatchList(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Saves {@code watchList} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private void saveWatchList(ReadOnlyWatchList watchList, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            new JsonWatchListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                    .saveWatchList(watchList, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void saveWatchList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveWatchList(new WatchList(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 110,
      "jcjjjared": 1
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        JsonWatchListStorage watchListStorage \u003d new JsonWatchListStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        storageManager \u003d new StorageManager(watchListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "*/"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void watchListReadSave() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        WatchList original \u003d getTypicalWatchList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        storageManager.saveWatchList(original);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        ReadOnlyWatchList retrieved \u003d storageManager.readWatchList().get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertEquals(original, new WatchList(retrieved));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "*/"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void getWatchListFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertNotNull(storageManager.getWatchListFilePath());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 14,
      "jcjjjared": 2,
      "heze8": 1,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/testutil/EditShowDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.commands.EditCommand.EditShowDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.IsWatched;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.RunningTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": " * A utility class to help with building EditShowDescriptor objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class EditShowDescriptorBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private EditShowDescriptor descriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public EditShowDescriptorBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        descriptor \u003d new EditShowDescriptor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public EditShowDescriptorBuilder(EditShowDescriptor descriptor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        this.descriptor \u003d new EditShowDescriptor(descriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Returns an {@code EditShowDescriptor} with fields containing {@code show}\u0027s details"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public EditShowDescriptorBuilder(Show show) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        descriptor \u003d new EditShowDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        descriptor.setName(show.getName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor.setType(show.getType());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        descriptor.setDescription(show.getDescription());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        descriptor.setIsWatched(show.isWatched());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        descriptor.setDateOfRelease(show.getDateOfRelease());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        descriptor.setRunningTime(show.getRunningTime());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        descriptor.setActors(show.getActors());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor.setPoster(show.getPoster());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor.setGenres(show.getGenres());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (show.getType().equals(\"Tv Show\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            descriptor.setTotalNumOfEpisodes(show.getTotalNumOfEpisodes());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            descriptor.setNumOfEpisodesWatched(show.getNumOfEpisodesWatched());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            descriptor.setSeasons(show.getTvSeasons());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Sets the {@code Name} of the {@code EditShowDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public EditShowDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Sets the {@code type} of the {@code EditShowDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public EditShowDescriptorBuilder withType(String type) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor.setType(type);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Sets the {@code Description} of the {@code EditShowDescriptor} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public EditShowDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Sets the {@code IsWatched} of the {@code EditShowDescriptor} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public EditShowDescriptorBuilder withIsWatched(String isWatched) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor.setIsWatched(new IsWatched(isWatched));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Sets the {@code DateOfRelease} of the {@code EditShowDescriptor} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public EditShowDescriptorBuilder withDateOfRelease(String date) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        descriptor.setDateOfRelease(new Date(date));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Sets the {@code RunningTime} of the {@code EditShowDescriptor} that we are building."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public EditShowDescriptorBuilder withRunningTime(int runningTime) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        descriptor.setRunningTime(new RunningTime(runningTime));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Parses the {@code actors} into a {@code Set\u003cTag\u003e} and set it to the {@code EditShowDescriptor}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public EditShowDescriptorBuilder withActors(String... actors) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Set\u003cActor\u003e actorSet \u003d Stream.of(actors).map(Actor::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor.setActors(actorSet);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public EditShowDescriptor build() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 87,
      "jcjjjared": 26
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/testutil/EpisodeGenerator.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Episode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Utility class to facilitate the creation of Episodes."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class EpisodeGenerator {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private int nextIndex \u003d 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private ArrayList\u003cEpisode\u003e episodes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Generates the next episode with the default name and episode number in sequence and adds it to the episode list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void generateNextEpisode() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        nextIndex++;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        episodes.add(new Episode(\"Episode \" + nextIndex, nextIndex));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ArrayList\u003cEpisode\u003e getEpisodes() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return episodes;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 27
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/testutil/SeasonGenerator.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Episode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.TvSeason;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Utility class to facilitate the creation of TvSeasons."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class SeasonGenerator {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private int nextIndex \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private ArrayList\u003cTvSeason\u003e tvSeasons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Generates the next TvSeason and adds it to the list of tvSeasons."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param numOfEpisodes the specified number of episodes in the season."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @return the existing SeasonGenerator object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public SeasonGenerator withTvSeason(int numOfEpisodes) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        nextIndex++;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        EpisodeGenerator episodeGenerator \u003d new EpisodeGenerator();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        for (int i \u003d 0; i \u003c numOfEpisodes; i++) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            episodeGenerator.generateNextEpisode();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        ArrayList\u003cEpisode\u003e episodes \u003d episodeGenerator.getEpisodes();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        tvSeasons.add(new TvSeason(nextIndex, episodes.size(), episodes));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ArrayList\u003cTvSeason\u003e getTvSeasons() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return tvSeasons;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 36
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/testutil/ShowBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Genre;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.IsWatched;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Movie;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Poster;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.RunningTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.TvSeason;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.TvShow;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": " * A utility class to help with building Show objects."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class ShowBuilder {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Inception\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String DEFAULT_TYPE \u003d \"movie\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"16/07/2010\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static final String DEFAULT_ISWATCHED \u003d \"false\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"A thief who steals corporate secrets through the use \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \" of dream-sharing technology is given the inverse task of planting an idea into the mind of a C.E.O.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final int DEFAULT_RUNNINGTIME \u003d 148;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final int DEFAULT_NUM_OF_EPISODES_WATCHED \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final int DEFAULT_TOTAL_NUM_OF_EPISODES \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String DEFAULT_POSTER \u003d \"/images/poster-placeholder.png\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private IsWatched isWatched;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private RunningTime runningTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private Set\u003cActor\u003e actors;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private Date dateOfRelease;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private Set\u003cGenre\u003e genres;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private Poster poster;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private int numOfEpisodesWatched;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private int totalNumOfEpisodes;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private List\u003cTvSeason\u003e tvSeasons;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public ShowBuilder() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        type \u003d DEFAULT_TYPE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        isWatched \u003d new IsWatched(DEFAULT_ISWATCHED);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        dateOfRelease \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        runningTime \u003d new RunningTime(DEFAULT_RUNNINGTIME);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        actors \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        genres \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        poster \u003d new Poster(DEFAULT_POSTER);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        numOfEpisodesWatched \u003d DEFAULT_NUM_OF_EPISODES_WATCHED;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        totalNumOfEpisodes \u003d DEFAULT_TOTAL_NUM_OF_EPISODES;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        tvSeasons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Initializes the ShowBuilder with the data of {@code showToCopy}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public ShowBuilder(Show showToCopy) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        name \u003d showToCopy.getName();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        type \u003d showToCopy.getType();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        description \u003d showToCopy.getDescription();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        isWatched \u003d showToCopy.isWatched();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        dateOfRelease \u003d showToCopy.getDateOfRelease();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        runningTime \u003d showToCopy.getRunningTime();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        actors \u003d new HashSet\u003c\u003e(showToCopy.getActors());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        genres \u003d new HashSet\u003c\u003e(showToCopy.getGenres());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        poster \u003d showToCopy.getPoster();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (showToCopy.getType().equals(\"Tv Show\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            numOfEpisodesWatched \u003d showToCopy.getNumOfEpisodesWatched();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            totalNumOfEpisodes \u003d showToCopy.getTotalNumOfEpisodes();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            tvSeasons \u003d new ArrayList\u003c\u003e(showToCopy.getTvSeasons());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Sets the {@code Name} of the {@code Show} that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public ShowBuilder withName(String name) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Sets the {@code type} of the {@code Show} that we are building."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ShowBuilder withType(String type) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Parses the {@code Actors} into a {@code Set\u003cActors\u003e} and set it to the {@code Actors} that we are building."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ShowBuilder withActors(String ... actors) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.actors \u003d SampleDataUtil.getActorSet(actors);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Sets the {@code Description} of the {@code Show} that we are building."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public ShowBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Sets the {@code IsWatched} of the {@code Show} that we are building."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ShowBuilder withIsWatched(String isWatched) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        this.isWatched \u003d new IsWatched(isWatched);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Sets the {@code Date} of the {@code Show} that we are building."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ShowBuilder withDateOfRelease(String date) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.dateOfRelease \u003d new Date(date);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Sets the {@code runningTime} of the {@code Show} that we are building."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public ShowBuilder withRunningTime(int runningTime) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        this.runningTime \u003d new RunningTime(runningTime);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Sets the {@code poster} of the {@code Show} that we are building."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ShowBuilder withPoster(String poster) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.poster \u003d new Poster(poster);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Parses the {@code Genres} into a {@code Set\u003cGenres\u003e} and set it to the {@code Genres} that we are building."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ShowBuilder withGenres(String ... genres) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.genres \u003d SampleDataUtil.getGenreSet(genres);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Sets the {@code numOfEpisodesWatched} of the {@code Show} that we are building."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ShowBuilder withNumOfEpisodesWatched(int numOfEpisodesWatched) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.numOfEpisodesWatched \u003d numOfEpisodesWatched;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Sets the {@code totalNumOfEpisodes} of the {@code Show} that we are building."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ShowBuilder withTotalNumOfEpisodes(int totalNumOfEpisodes) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.totalNumOfEpisodes \u003d totalNumOfEpisodes;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Parses the {@code Seasons} into a {@code Set\u003cSeasons\u003e} and set it to the {@code Seasons} that we are building."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ShowBuilder withSeasons(List\u003cTvSeason\u003e seasons) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.tvSeasons \u003d seasons;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Builds the show."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @return show."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public Show build() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (type.toLowerCase().equals(\"movie\")) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return new Movie(name, description, isWatched, dateOfRelease, runningTime, actors);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return new TvShow(name, description, isWatched, dateOfRelease, runningTime, actors,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    numOfEpisodesWatched , totalNumOfEpisodes, tvSeasons);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 89,
      "jcjjjared": 107
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/testutil/ShowUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_ACTOR;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_DATE_OF_RELEASE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_IS_WATCHED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_RUNNING_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.commands.EditCommand.EditShowDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": " * A utility class for Show."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class ShowUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Returns an add command string for adding the {@code show}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static String getAddCommand(Show show) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getShowDetails(show);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Returns the part of command string for the given {@code show}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static String getShowDetails(Show show) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        sb.append(PREFIX_NAME + show.getName().toString() + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + show.getDescription().toString() + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        sb.append(PREFIX_IS_WATCHED + show.isWatched().toString() + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        sb.append(PREFIX_DATE_OF_RELEASE + show.getDateOfRelease().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        sb.append(PREFIX_RUNNING_TIME + show.getRunningTime().toString() + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        show.getActors().stream().forEach("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            s -\u003e sb.append(PREFIX_ACTOR + s.actorName + \" \")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Returns the part of command string for the given {@code EditShowDescriptor}\u0027s details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static String getEditShowDescriptorDetails(EditShowDescriptor descriptor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.showName).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor.getDescription()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .ifPresent(description -\u003e sb.append(PREFIX_DESCRIPTION).append(description).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor.getIsWatched()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .ifPresent(isWatched -\u003e sb.append(PREFIX_IS_WATCHED).append(isWatched.value).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor.getDateOfRelease()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .ifPresent(date -\u003e sb.append(PREFIX_DATE_OF_RELEASE).append(date.value).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor.getRunningTime()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .ifPresent(runningTime -\u003e sb.append(PREFIX_RUNNING_TIME).append(runningTime).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        if (descriptor.getActors().isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            Set\u003cActor\u003e actors \u003d descriptor.getActors().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            if (actors.isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                sb.append(PREFIX_ACTOR);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                actors.forEach(s -\u003e sb.append(PREFIX_ACTOR).append(s.actorName).append(\" \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 18,
      "wongchuankai": 22,
      "heze8": 2,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Returns the middle index of the show in the {@code model}\u0027s show list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return Index.fromOneBased(model.getFilteredShowList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Returns the last index of the show in the {@code model}\u0027s show list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return Index.fromOneBased(model.getFilteredShowList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Returns the Show in the {@code model}\u0027s show list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static Show getShow(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return model.getFilteredShowList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 8,
      "heze8": 3,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static final Index INDEX_FIRST_SHOW \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static final Index INDEX_SECOND_SHOW \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final Index INDEX_FIFTH_SHOW \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 2,
      "jcjjjared": 1,
      "heze8": 2,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/testutil/TypicalShows.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.WatchList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": " * A utility class containing a list of {@code Show} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class TypicalShows {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static final Show JOKER \u003d new ShowBuilder().withName(\"Joker\").withDescription("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            \"Forever alone in a crowd, failed comedian Arthur Fleck seeks connection as he walks the streets of Gotham \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                    + \"City. Arthur wears two masks -- the one he paints for his day job as a clown, and the guise he \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                    + \"projects in a futile attempt to feel like he\u0027s part of the world around him. Isolated, bullied \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                    + \"and disregarded by society, Fleck begins a slow descent into madness as he transforms into the \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                    + \"criminal mastermind known as the Joker.\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    ).withIsWatched(\"false\").withDateOfRelease(\"3/10/2019\").withType(\"Movie\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            .withRunningTime(122).withActors(\"Joaquin Phoenix\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static final Show AVENGERSENDGAME \u003d new ShowBuilder().withName(\"Avenger Endgame\").withDescription(\"\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            + \"Adrift in space with no food or water, Tony Stark sends a message to Pepper Potts as his oxygen supply \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            + \"starts to dwindle. Meanwhile, the remaining Avengers -- Thor, Black Widow, Captain America and Bruce \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            + \"Banner -- must figure out a way to bring back their vanquished allies for an epic showdown with Thanos\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \" -- the evil demigod who decimated the planet and the universe.\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            .withIsWatched(\"false\").withDateOfRelease(\"24/04/2019\").withRunningTime(182)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            .withActors(\"Chris Hemsworth\").withType(\"Movie\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /*public static final Show BLACKPANTHER \u003d new ShowBuilder().withName(\"Black Panther\").withDescription(\"After the\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            + \" death of his father, T\u0027Challa returns home to the African nation of Wakanda to take his rightful place\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            + \" as king. When a powerful enemy suddenly reappears, T\u0027Challa\u0027s mettle as king -- and as Black Panther\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            + \" -- gets tested when he\u0027s drawn into a conflict that puts the fate of Wakanda and the entire world at\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            + \" risk. Faced with treachery and danger, the young king must rally his allies and release the full power\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            + \" of Black Panther to defeat his foes and secure the safety of his people.\").withIsWatched(true)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            .withDateofRelease(\"29 January 2018\").withRunningTime(135).withActors(\"Chadwick Boseman\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "*/"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static final Show FIGHTCLUB \u003d new ShowBuilder().withName(\"Fight Club\").withDescription("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            \"A depressed man (Edward Norton) suffering from insomnia meets a strange soap salesman named Tyler Durden \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                    + \"(Brad Pitt) and soon finds himself living in his squalid house after his perfect apartment is \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                    + \"destroyed. The two bored men form an underground club with strict rules and fight other men who \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                    + \"are fed up with their mundane lives. Their perfect partnership frays when Marla (Helena Bonham\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                    + \" Carter), a fellow support group crasher, attracts Tyler\u0027s attention.\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            .withIsWatched(\"true\").withDateOfRelease(\"4/11/1999\").withRunningTime(151).withActors().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // Manually added - Show\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public static final Show SAVINGPRIVATERYAN \u003d new ShowBuilder().withName(\"Saving Private Ryan\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withDescription("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \"Captain John Miller (Tom Hanks) takes his men behind enemy lines to find Private James\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + \" Ryan, whose three brothers have been killed in combat. Surrounded by the brutal realties of\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + \" war, while searching for Ryan, each man embarks upon a personal journey and discovers their\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + \" own strength to triumph over an uncertain future with honor, decency and courage.\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                .withIsWatched(false).withDateofRelease(\"Saving Private Ryan\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                .withRunningTime(170).withActors(\"Tom Hanks\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static final Show GODFATHER2 \u003d new ShowBuilder().withName(\"God Father 2\").withDescription(\"The compelling\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            + \" sequel to \\\"The Godfather,\\\" contrasting the life of Corleone father and son. Traces the problems \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            + \"of Michael Corleone (Al Pacino) in 1958 and that of a young immigrant Vito Corleone (Robert De Niro) \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            + \"in 1917\u0027s Hell\u0027s Kitchen. Michael survives many misfortunes and Vito is introduced to a life of crime.\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            .withIsWatched(\"true\").withDateOfRelease(\"12/12/1974\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            .withRunningTime(202).withActors(\"Al Pacino\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final Show WATCHEDJOKER \u003d new ShowBuilder().withName(\"Joker\").withDescription("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            \"Forever alone in a crowd, failed comedian Arthur Fleck seeks connection as he walks the streets of Gotham \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    + \"City. Arthur wears two masks -- the one he paints for his day job as a clown, and the guise he \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    + \"projects in a futile attempt to feel like he\u0027s part of the world around him. Isolated, bullied \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    + \"and disregarded by society, Fleck begins a slow descent into madness as he transforms into the \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    + \"criminal mastermind known as the Joker.\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    ).withIsWatched(\"true\").withDateOfRelease(\"3/10/2019\").withType(\"Movie\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            .withRunningTime(122).withActors(\"Joaquin Phoenix\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final Show THEOFFICE \u003d new ShowBuilder().withName(\"The Office\").withDescription(\"A mockumentary\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \" on a group of typical office workers, where the workday consists of ego clashes,\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \" inappropriate behavior, and tedium.\").withType(\"Tv Show\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            .withIsWatched(\"false\").withDateOfRelease(\"2005-03-24\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            .withRunningTime(202).withActors(\"Steve Carrell\", \"Jenna Fischer\").withNumOfEpisodesWatched(3)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            .withTotalNumOfEpisodes(195).withSeasons(new SeasonGenerator()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    .withTvSeason(6).withTvSeason(22).withTvSeason(23)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    .withTvSeason(19).withTvSeason(26).withTvSeason(26)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    .withTvSeason(26).withTvSeason(24).withTvSeason(23).getTvSeasons()).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private TypicalShows() {} // prevents instantiation"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Returns an {@code WatchList} with all the typical show."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static WatchList getTypicalWatchList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        WatchList wl \u003d new WatchList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        for (Show show : getTypicalShow()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            wl.addShow(show);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return wl;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static WatchList getTypicalWatchList2() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        WatchList wl \u003d new WatchList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        for (Show show : getTypicalShow2()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            wl.addShow(show);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return wl;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static List\u003cShow\u003e getTypicalShow() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(AVENGERSENDGAME, FIGHTCLUB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static List\u003cShow\u003e getTypicalShow2() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(JOKER, AVENGERSENDGAME, FIGHTCLUB,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                GODFATHER2, THEOFFICE));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 68,
      "jcjjjared": 25,
      "heze8": 1,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/testutil/WatchListBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.WatchList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": " * A utility class to help with building WatchList objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": " *     {@code WatchList wl \u003d new WatchListBuilder().withShow(show).build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class WatchListBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private WatchList watchList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public WatchListBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        watchList \u003d new WatchList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public WatchListBuilder(WatchList watchlist) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        this.watchList \u003d watchlist;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Adds a new {@code show} to the {@code WatchList} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public WatchListBuilder withShow(Show show) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        watchList.addShow(show);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public WatchList build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return watchList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 15,
      "heze8": 1,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/testutil/WatchShowDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.WatchCommand.WatchShowDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.IsWatched;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.RunningTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.TvSeason;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * A utility class to help with building WatchShowDescriptor objects."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class WatchShowDescriptorBuilder {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private WatchShowDescriptor descriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public WatchShowDescriptorBuilder() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor \u003d new WatchShowDescriptor();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public WatchShowDescriptorBuilder(WatchShowDescriptor descriptor) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.descriptor \u003d new WatchShowDescriptor(descriptor);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns an {@code WatchShowDescriptor} with fields containing {@code show}\u0027s details"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public WatchShowDescriptorBuilder(Show show) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor \u003d new WatchShowDescriptor();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor.setName(show.getName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor.setType(show.getType());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor.setDescription(show.getDescription());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor.setIsWatched(show.isWatched());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor.setDateOfRelease(show.getDateOfRelease());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor.setRunningTime(show.getRunningTime());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor.setActors(show.getActors());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor.setPoster(show.getPoster());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (show.getType().equals(\"Tv Show\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            descriptor.setNumOfEpisodesWatched(show.getNumOfEpisodesWatched());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            descriptor.setTotalNumOfEpisodes(show.getTotalNumOfEpisodes());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            descriptor.setSeasons(show.getTvSeasons());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Sets the {@code Name} of the {@code WatchShowDescriptor} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public WatchShowDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Sets the {@code type} of the {@code WatchShowDescriptor} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public WatchShowDescriptorBuilder withType(String type) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor.setType(type);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Sets the {@code Description} of the {@code WatchShowDescriptor} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public WatchShowDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Sets the {@code IsWatched} of the {@code WatchShowDescriptor} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public WatchShowDescriptorBuilder withIsWatched(String isWatched) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor.setIsWatched(new IsWatched(isWatched));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Sets the {@code DateOfRelease} of the {@code WatchShowDescriptor} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public WatchShowDescriptorBuilder withDateOfRelease(String date) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor.setDateOfRelease(new Date(date));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Sets the {@code RunningTime} of the {@code WatchShowDescriptor} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public WatchShowDescriptorBuilder withRunningTime(int runningTime) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor.setRunningTime(new RunningTime(runningTime));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Parses the {@code actors} into a {@code Set\u003cTag\u003e} and set it to the {@code WatchShowDescriptor}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public WatchShowDescriptorBuilder withActors(String... actors) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Set\u003cActor\u003e actorSet \u003d Stream.of(actors).map(Actor::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor.setActors(actorSet);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Sets the number of episodes watched of the {@code WatchShowDescriptor} that we are building."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public WatchShowDescriptorBuilder withNumOfEpisodesWatched(int numOfEpisodesWatched) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor.setNumOfEpisodesWatched(numOfEpisodesWatched);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Sets the total number of episodes of the {@code WatchShowDescriptor} that we are building."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public WatchShowDescriptorBuilder withTotalNumOfEpisodes(int totalNumOfEpisodes) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor.setTotalNumOfEpisodes(totalNumOfEpisodes);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Sets the number of seasons watched of the {@code WatchShowDescriptor} that we are building."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public WatchShowDescriptorBuilder withNumOfSeasonsWatched(int numOfSeasonsWatched) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor.setNumOfSeasonsWatched(numOfSeasonsWatched);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Parses the {@code seasons} into a {@code List\u003cTvSeason\u003e} and set it to the {@code WatchShowDescriptor}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public WatchShowDescriptorBuilder withSeasons(TvSeason... seasons) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        List\u003cTvSeason\u003e seasonSet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        for (TvSeason season : seasons) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            seasonSet.add(season);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor.setSeasons(seasonSet);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public WatchShowDescriptor build() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 152
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/ui/MainWindowTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class MainWindowTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void executeCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void goToWatchlist() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void goToWatched() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void goToSearch() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    void goToStatistics() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private void setSearchAccelerator(final Button button) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Scene scene \u003d button.getScene();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        if (scene \u003d\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new IllegalArgumentException(ACCELERATOR_ERROR);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        scene.getAccelerators().put("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                new KeyCodeCombination(KeyCode.DIGIT3),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                new Runnable() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                    @Override public void run() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                        goToSearch();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "*/"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 43
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/ui/UiPartTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003c?import seedu.ezwatchlist.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003cfx:root type\u003d\"seedu.ezwatchlist.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 5
    }
  }
]
