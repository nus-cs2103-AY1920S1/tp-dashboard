[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "\u003d EzWatchList"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ":imagesDir: /docs/images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-F13-4/main[image:https://travis-ci.org/AY1920S1-CS2103T-F13-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-F13-4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-F13-4/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "image::Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "* This is a desktop application for users who manage their movies and tv series watchlist."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "* EzWatchList is optimized for those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "* AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 2,
      "michelleykw": 6,
      "-": 19
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "mainClassName \u003d \u0027seedu.ezwatchlist.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heze8"
        },
        "content": "    maven {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heze8"
        },
        "content": "        url  \"https://jcenter.bintray.com\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": "    jcenter()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-swing\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-swing\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-swing\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "heze8"
        },
        "content": "    compile group: \u0027info.movito\u0027, name: \u0027themoviedbapi\u0027, version:\u00271.9\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "heze8"
        },
        "content": "    compile group: \u0027org.slf4j\u0027, name: \u0027slf4j-log4j12\u0027, version: \u00271.7.28\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "heze8"
        },
        "content": "    compile group: \u0027ch.qos.logback\u0027, name:\u0027logback-core\u0027, version: \u00271.0.9\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "heze8"
        },
        "content": "    archiveName \u003d \u0027ezwatchlist.jar\u0027"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 3,
      "heze8": 10,
      "-": 153
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "Ezwatchlist was developed by a group of students based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d Caleb Goh"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "image::heze8.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "{empty} [https://github.com/heze8[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "Responsibilities: Movie API, Recommendations"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d Wu Xia"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "image::tswuxia.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": "{empty}[http://github.com/tswuxia[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "Role: Code Quality +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d Jared Chiang"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heze8"
        },
        "content": "image::jcjjjared.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heze8"
        },
        "content": "{empty}[http://github.com/jcjjjared[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": "Role: Integration +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": "Responsibilities: Main Logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d Wong Chuan Kai"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heze8"
        },
        "content": "image::wongchuankai.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heze8"
        },
        "content": "{empty}[http://github.com/wongchuankai[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heze8"
        },
        "content": "Role: Testing +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heze8"
        },
        "content": "Responsibilities: Component Logic"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d Michelle Yong"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heze8"
        },
        "content": "image::michelleykw.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heze8"
        },
        "content": "{empty}[http://github.com/michelleykw[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "heze8"
        },
        "content": "Role: Documentation +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "heze8"
        },
        "content": "Responsibilities: Search and Tag Logic"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "heze8": 25,
      "-": 29
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-F13-4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* *Email us* : You can also reach us at `ezwatchlist [at] gmail.com`"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "\u003d EzWatchlist - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F13-4/main.git"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "By: `Team CS2103T-F13-4`      Since: `Sept 2019`      Licence: `NUS`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "heze8"
        },
        "content": "* stores the Ezwatchlist data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "// tag::markaswatched[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d [Feature] Mark/unmark as watched feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "The mark/unmark as watched mechanism is facilitated by `WatchCommand`."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "It extends `Command` and uses the `WatchCommandParser` to process the command entered by the user."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Given below is an example usage scenario and how the mark/unmark as watched mechanism works at each step."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Step 1. The user launches the application, and executes `watch 1` command to mark the first show in the watch list as watched."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Step 2. Entering the command calls `WatchListParser#parseCommand()`, which in turn returns a new `WatchCommandParser` and the `WatchCommandParser#parse()` command is called."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Step 3. A new `WatchCommand` is created, with the index of the show to be marked being parsed as a field of the `WatchCommand`."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Step 4. The `WatchCommand#execute()` method is called, referencing the current `model`, and the show that is in the current `FilteredShowList` is referenced based off the current `model`."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "If the `index` is out of bounds, a new `CommandException` is thrown."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Step 5. A copy of the show is created, with its `isWatched` field being switched to `true`."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "The un-marking of a show as watched is similar, except that the `isWatched` field will be set to `false`."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Step 6. The show in the current show list is updated to the newly created copy with the updated watched status, and a `CommandResult` with the new watched status of the show is created."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "The following sequence diagram shows how the watch operation works:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "image::WatchSequenceDiagram.png[]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How mark/unmark shows as watched executes"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* **Current choice:** Works in a similar way to the `edit` command, referencing the index of the show, and creating a new show with the changed `isWatched` field."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Command word for the mark/unmark shows as watched function"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* **Alternative 1 (current choice):** The same keyword, `watch` is used."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "** Pros: Easy for the user to remember a single word, simpler to implement since only one command will be required."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "** Cons: Does not make logical sense to `watch` an already watched show."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* **Alternative 2:** Use `watch` and `unwatch` keywords."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "** Pros: Logical keywords are being used."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "** Cons: The same logic will be repeated twice, albeit different command names."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "// end::markaswatched[]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "// tag::statistics[]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003d\u003d\u003d [Proposed] Statistics feature"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "The statistics feature is facilitated by `Statistics` object. It extends `Ezwatchlist` with a summary of the users\u0027 personal"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "preferences and footprint including the most watched genre, shows that you might have forgotten to watch, and the"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "recommendations generated for you. It is stored internally as an `Statistics` object containing a `ModelManager`."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "* `Statistics#getFavouriteGenre()` -- Gives the genre that appears the most number of times in the list of watched shows."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "* `Statistics#getForgotten()` -- Gives the 3 shows that were added the earliest but have not been watched."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "* `Statistics#getRecommendation()` -- Gives 3 recommendations according to the watched shows."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "Given below is a usage scenario of a user checking his/her statistics page."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "Step 1. The user launches the application. The Statistics object will be initialized with ModelManager"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "containing the current watchlist and watched list. Behind the scenes, the 3 statistics will be calculated and the"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "statistics panel will be populated with the result."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "Step 2. The user clicks on the statistic button and sees the content."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "This is the sequence diagram of `getFavouriteGenre()`."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "image::getFavouriteGenre.png[]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "This is the sequence diagram of `getForgotten()`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "image::getForgotten.png[]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "This is the sequence diagram of `getRecommendation()`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "image::getRecommendation.png[]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "The following activity diagram summarizes the workflow of Statistics:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "image::activityDiagram.png[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How Statistics stores the watchlist and watched list"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "* **Alternative 1 (current choice):** Saves the whole ModelManager as a field."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "** Pros: Easy to implement and make use of."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "** Cons: More dependency on ModelManager."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "* **Alternative 2:** Saves the watchlist and watched list as fields respectively."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "** Pros: Less dependency on ModelManager."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "** Cons: Less potential functionality and the lists might not be up-to-date."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: When the results are calculated"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "* **Alternative 1 (current choice):** Calculate when the application starts and update when there are changes."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "** Pros: It appears more responsive in terms of navigating around the application."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "** Cons: Need to constantly recalculate and update the results."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "* **Alternative 2:** Calculate when the user navigate to Statistics panel."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "** Pros: Less calculation needed."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "** Cons: Appear less responsive."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "// end::statistics[]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d Online Data"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "heze8"
        },
        "content": "We are using https://www.themoviedb.org/documentation/api[The Movie Database (TMDB)] to retrieve information on movies and tv shows."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "heze8"
        },
        "content": "All interactions with the third party library are facilitated by the interface `ApiInterface`. Methods in `ApiInterface` are the main"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "heze8"
        },
        "content": "way the application retrieves any online information from the database."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "heze8"
        },
        "content": "*Methods in ApiInterface*"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "heze8"
        },
        "content": "* `getMovieByName` : The method will return a list of movies in the database based on the name of the movie given"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "heze8"
        },
        "content": "* `getTvShowByName` : The method will return a list of tv shows in the database based on the name of the tv show given"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "heze8"
        },
        "content": "* `isConnected` : Checks if the application is connected online to the database"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "heze8"
        },
        "content": "`ApiMain` is an implementation of `ApiInterface` and is done by using a https://github.com/holgerbrandl/themoviedbapi[java wrapper] for the TMDB api implemented by Holger Brandl."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "heze8"
        },
        "content": "Allowing us to retrieve information in the java code."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "heze8"
        },
        "content": "Given below is an example of how the application might want to retrieve movie information through `ApiInterface`."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "heze8"
        },
        "content": "Step 1. First an instance of a class implementing `ApiInterface` has to be created for the methods to be called. When `ApiMain` is instantiated the class api"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "heze8"
        },
        "content": "key\u0027s is used to create a call to the TMDB API. All information retrieved must go through the class\u0027s api call."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "heze8"
        },
        "content": "Step 2. The method getMovieByName(\"Name Of Movie\") is called and the api call searches the for the movie in the database with the name given."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "heze8"
        },
        "content": "A list of wrapped movies is given back, which is then read and used to create new instances of our application\u0027s `Show` model with information wrapped in classes such as"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "heze8"
        },
        "content": "`Name`, `Description`, and `Actor`."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "heze8"
        },
        "content": "Step 3. To retrieve an image from the database, a image url is downloaded to the computer. The class `ImageRetrieval` does this. An"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "heze8"
        },
        "content": "`ImageRetrieval` instance is created by the method for each image, and is downloaded to a root folder determined by `ImageRetrieval#defaultDirectory()`."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "heze8"
        },
        "content": "Step 4. A poster class is then created with the image path, to be used to load images in the application."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "heze8"
        },
        "content": "Step 5. With the list of movies returned, the application is given access to online information in a readable format."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "heze8"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "heze8"
        },
        "content": "At any point the application might fail due to the application not being connected to the internet. If that occurs a"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "heze8"
        },
        "content": "`OnlineConnectionException` is thrown for the application to handle."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "heze8"
        },
        "content": "The relationship between all the classes are shown in the following class diagram:"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "heze8"
        },
        "content": "image:ApiClassDiagram.png[]"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Why this implementation was chosen"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "heze8"
        },
        "content": "* **All API interactions would be in the API package and go through ApiInterface. **"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "heze8"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "heze8"
        },
        "content": "- The application wouldn\u0027t have to seek access to the database on their own. The interface should provide all the functionality needed."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "heze8"
        },
        "content": "- Follows the Single Responsibility Principle (SRP) that a module in the program should be encapsulated and have one repsponsibility."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Image retrieval implementation"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "heze8"
        },
        "content": "* ** Alternative 1 (current choice):** Download the image into the computer then access it locally on the computer."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "heze8"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "heze8"
        },
        "content": "*** Easier to keep track of images."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "heze8"
        },
        "content": "*** All images are retrieved the same way making it easier to implement showing the images."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "heze8"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "heze8"
        },
        "content": "*** All images shown are currently downloaded without being deleted, hence the amount of images downloaded can get unwieldy quickly, increasing"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "heze8"
        },
        "content": "amount of memory used."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "heze8"
        },
        "content": "* **Alternative 2:** Parse the online url to the application for them to access the image online when needed."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "heze8"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "heze8"
        },
        "content": "*** No need for the images to be downloaded allows less memory to be used by the application."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "heze8"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "heze8"
        },
        "content": "*** Everytime the image is viewed, the application has to retrieve it from online making it more intensive on the network."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "heze8"
        },
        "content": "*** If the internet connection fails, the image can no longer be viewed."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "heze8"
        },
        "content": "//end::ImageRetrieval[]"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "* Users who are tidy and organised"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "* Forgetful person who has a need to keep track of what movies, tv series they would like to watch"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "* Tech-savvy users who prefer desktop apps over other types"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "* User can type fast"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "* User prefers typing over mouse input"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "* User is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "* Movie/TV series lover"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "*Value proposition*:"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "EZWatchList provides a unique, clean and simple way of organizing and keeping track of your watchlist. All in one solution to your problem."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* * *` |forgetful person | keep track of the shows to watch|I won’t forget about them."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* * *` |very neat and organised movie lover |can organise the movies I’ve watched in categories/groups | watch them again."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* * *` |As an organised person| sort the movies and tv shows into genres | easily find a show from a genre that I want to watch."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* * *` |As a movie lover |mark movies in the watchlist as “watched” | keep track of what I have watched"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* * *`| As a fickle person | delete a movie from the watchlist if I don’t feel like watching it anymore| my watchlist will not be cluttered with movies that I have no interest in watching anymore."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* * *` |Someone who loves keeping records | keep track of how many movies or tv series I have watched |"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* * *` |tech-savvy  |do any task as quickly as possible| experience is pleasant and quick."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* * *` | App user | categorize and search based on distinct things | everything is neat and pleasing."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* * *` | App user | track where I am specifically in the series | I can remember where I am for that show."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *`|movie lover who likes to think about the message conveyed in the movie  |I can note down some of my thoughts for every movie after watching |"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *` | a movie critic| can track my thoughts and criticism of movie easily | it is organised."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *` | a movie/drama lover who also likes music | can note down the name of the soundtrack in the movie in a place specially for that. |"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *`| a movie lover | rate a movie that I have watched | I can know what movies I liked to watch"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *`| a movie lover | can know about all the movies | I would be able to watch them in the cinemas when they are out."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *`| a movie lover | look up for shows to watch from the recommendations |I will not have to manually search online."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *`| a movie lover | I can search for movies that I have added to the watchlist| I can easily find the movie that I want to watch."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *`| looking for new movies| search for some recommendations| I can watch it when I am free."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *`| a movie lover | search for movies that I have added to the watchlist| easily find the movie that I want to watch."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *`| a movie lover | can keep track of the number of times I have watched a movie |I can find out which movie I liked watching the best."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *` | a movie lover |check the ratings of each movie I have watched |I can recommend them to my friends."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *`|a tv show addict | I can put my favourite shows in |  I can enjoy watching it next time."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *`| unorganised person | I can rank the movies that I want to watch into different priorities | I can easily know what are the movies that I desperately want to watch."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *` |unorganised person | can sort movies that I want to watch into the date they were added |I can clear the movies that have been lingering at the back of my mind the longest."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *` | does reviews | keep track of movies and write reviews for the show I have watched  |I can have a positive criticism."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *` | someone who forget to watch tv series/movies | I can have an alarm that alert me to watch videos on time.|"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *` |As someone who has a deadline to watch movies | I can plan and add deadlines to watch movies.|"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *`|As a lover of multiple mediums| I can combine all these different mediums in the same platform | I can keep track of everything in the same place."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *`| As a statistics lover| I can view the statistics of the shows I watched | I can gain insight of my viewing habits."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *`| forgetful person| I can add shows I’ve watched to see a virtual library of things I’ve completed| I can log it like a book in a bookcase."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "|`* *`| As an app user| I can see the date I’ve inputted the specific object| I can remember when I completed."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "(For all use cases below, the *System* is the `Ezwatchlist` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003d\u003d\u003d Use case: Add Movie"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "1.  User navigates to the main page"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "2.  User enters \u0027Add\u0027 command"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "3.  User enters the movie name"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "4.  Ezwatchlist will display a list of movies found"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "5.  User enters the index given by the list"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "6.  Ezwatchlist will add the movie to their watchlist"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "* 3a. No movie is found"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "** 3a1. User enter movie information himself."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "** 3a2. User saves the movie"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "* 5a. The given index is invalid."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "** 5a1. System shows an error message."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "Use case resumes at step 4."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003d\u003d\u003d Use case: Mark as watched"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "1.  User navigates to the main page"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "2.  User enters \u0027Watched\u0027 command giving the index of the item"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "3.  Ezwatchlist will mark that item as watched"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "+"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "* 2a. The given index is invalid."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "** 2a1. System shows an error message."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003d\u003d\u003d Use case: Search locally"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "1.  User navigates to the main page"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "2.  User enters \u0027search\u0027 command giving the name of the item"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "3.  Ezwatchlist will bring the user to a search page with items found in a list"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "4.  User enters View command of the index of the item."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "5.  Ezwatchlist will bring that item into details page"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "+"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "* 2a. The given name is not found."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "** 2a1. System shows an error message."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "+"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "* 4a. The given index is not valid."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "** 4a1. System shows an error message."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "+"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003d\u003d\u003d Use case: Edit item"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "1.  User navigates to the main page."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "2.  User enters \u0027edit\u0027 command giving the name of the item."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "3.  Ezwatchlist will bring the user to a details page of the item entered."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "4.  User edits the details of the item."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "5.  User saves the edits."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "+"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "* 2a. The given name is not found."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "** 2a1. System shows an error message."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "+"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003d\u003d\u003d Use case: Delete item"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "1.  User navigates to the page containing the item to be deleted."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "2.  User enters \u0027delete\u0027 command giving the name of the item."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "3.  Ezwatchlist asks for confirmation from the user."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "4.  User confirms."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "5.  Ezwatchlist deletes the item."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "+"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "* 2a. The given name is not found."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "** 2a1. System shows an error message."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "+"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "* 3a. User cancels the deletion."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "** Use case ends."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003d\u003d\u003d Use case: Statistics"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "1.  User navigates to the statistics page"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "2.  Ezwatchlist displays the information."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "+"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "heze8"
        },
        "content": ".  Should be able to hold up to 1000 movies in the watchlist without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "heze8"
        },
        "content": ".  The user interface should be intuitive enough for users who are not IT-savvy."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "heze8"
        },
        "content": ".  Compliance with data, security, copyright laws."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "heze8"
        },
        "content": ".  The application will be offline-friendly with online data being the only functionality missing."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "[[details-page]] Details page::"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "The page that shows the details of shows, which the user may then add it to the watchlist if interested."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "[[edit-page]] Edit page::"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "The page where the user can edit the shows that they have added."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "[[main-page]] Main Page / Watchlist page::"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "The default main page with the WatchList tab that contains a list of shows that the user wishes to watch"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "[[movies]] Movie::"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "A cinema film"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "[[progress-bar]] Progress Bar::"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "A visible bar for users to see how many episodes of TV Series have been watched"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "[[search-command]] Search command `search [keyword]`::"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "This command brings the user to a search page with keyword input"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "[[search-page]] Search page::"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "The page where the user searches for shows to be added or to view their information"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "[[show-index]] Show index::"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "The number reference for the show in the pages"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "[[shows]] Shows::"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "Movies or TV series"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "[[statistics-page]] Statistics page::"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "The page that shows the statistics of user, such as total number of movies / TV series watched"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "[[tag]] Tag::"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "A short remark about the show or user’s feelings towards the show"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "[[tv-series]] TV Series::"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "A television program which consists of several episodes that are broadcast in regular intervals"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "[[view-command]] View command `view [index]`::"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "This command brings the user to the details page of the show with the specified show index"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "[[watched-page]] Watched page::"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "The page where the user can access to view the list of shows indicated as watched"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "[[watchlist]] Watchlist::"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "The list of shows that the user wishes to watch in the future."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 65,
      "jcjjjared": 46,
      "michelleykw": 41,
      "tswuxia": 176,
      "heze8": 72,
      "-": 399
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d EzWatchlist - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F13-4/main.git"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "By: `Team CS2103T-F13-4`      Since: `Sept 2019`      Licence: `NUS`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "EzWatchList is for those who *prefer to use a desktop app for managing movies and tv series watchlist*. More importantly, EzWatchList is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, EzWatchList can get your watchlist faster than traditional GUI apps. Interested? Jump to the Section 2, \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ".  Download the latest `ezwatchlist.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your watchlist."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "image::RealUI.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* **`add`**`Titanic` : adds the movie named `Titanic` to the Watchlist."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* **`search`**`Titanic` : Searched for movie named `Titanic` in all movies"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* **`delete`**`3` : deletes the 3rd movie shown in the current list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ".  Refer to \u003c\u003cUserCommands\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d User-Interface"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d Watchlist Page"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "The watchlist is the default page that is opened upon start-up of ezwatchlist. It shows the user’s unwatched movies and television series. The watchlist page also contains a command bar to allow the user to input commands."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "**Characteristics of the watchlist page:**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ".  Shows that are added more recently are at the bottom of the list"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ".  Each show has the following visible characteristics:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Movie/TV show poster"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Name of show (and year in brackets?)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Remarks"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Progress bar showing number of episodes watched (For TV series)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Checkbox to indicate if the show has been watched"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "image::RealUI.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d Watched List"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "The user has the option to view the list of shows that have been marked as watched in the watched list. The user can navigate to this list by clicking the “Watched” tab on the side bar or by using the keyboard short-cut `ctrl + tab`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d Search Page"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "The user can navigate to the search page to find a specific movie or television by searching for its name."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "image::search_page.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d Statistics Page"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "The user can navigate to the statistics page to find a summary of his watching habits, preferences and history according to what is present in his lists. Examples include: Ten most recent movies he watched, ten favourite movies of the user etc."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "image::statistics_page.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d Sidebar"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Ezwatchlist gives users the ability to navigate easily through the **Watchlist, Watchedlist, Search page and Statistics pages** through the use of the graphical user interface at the left of the main page. Alternatively, the user can also make use of keyboard shortcut `ctrl + tab` to scroll through the different pages."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d Details Page"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Upon clicking a movie or tv show title, a pop-up window will emerge, with a detailed view of the movie or tv show. This page provides the user with more information about the show, like the year, cast and ratings. The user also has the ability to edit the details here."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "image::details_page.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "[[UserCommands]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d User Commands"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/MOVIE_NAME`, `MOVIE_NAME` is a parameter which can be used as `add n/The Angry Birds Movie 2`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Items in square brackets are optional e.g `n/MOVIE_NAME [t/TAG]` can be used as `n/The Angry Birds Movie 2 t/Oscar-worthy` or as `n/The Angry Birds Movie`."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/Oscar-worthy`, `t/Tear-jerking t/Good for kids` etc."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/MOVIE_NAME t/TAG`, `t/TAG n/MOVIE_NAME` is also acceptable."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a show: `add`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Adds a show to the watchlist +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Format: `add n/MOVIE_NAME [t/TAG]...`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "A show can have any number of tags (including 0)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* `add n/Titanic t/Romance t/Drama`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* `add n/The Angry Birds Movie 2`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d Mark as watched : `watch`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Marks an unwatched show in the watchlist as watched. +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Format: `watch INDEX`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a show\u0027s details : `edit`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Edits an existing show in the list +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Format: `edit INDEX [n/NAME] [t/TAG]...`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Edits the show at the specified `INDEX`. The index refers to the index number shown in the displayed watchlist. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* When editing tags, the existing tags of the show will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* You can remove all the show\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* `edit 1 n/Titanic t/Favourites` +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Edits the name and tag of the 1st show in the list to be `Titanic` and `Favourites` respectively."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* `edit 2 t/` +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Clears all existing tags of the 2nd show in the list."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d Search for a show by name: `search`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "Finds shows whose names contain any of the given keywords from the watchlist, watched list and online. +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "Format: `search n/KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "* Shows matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "* `search n/Angry` +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Returns `The Angry Birds Movie 2`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "* `search n/John Angry` +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "Returns any actor having names `John` or `Angry`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a show : `delete`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Deletes the specified show from the watchlist. +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* Deletes the show at the specified `INDEX`."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* The index refers to the index number shown in the displayed watchlist."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* `delete 2` +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Deletes the 2nd show in the watchlist."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* `search Angry` +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Deletes the 1st show in the results of the `search` command."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Ezwatchlist data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d Advanced Features"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d Parsing of Movie Information"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "In ezwatchlist, we access a movie database so that we can get information about your movies and tv series that you want to watch and have watched. This means that pictures and information will be readily available to you with a proper internet connection."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d Recommendations"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Ezwatchlist will recommend movies to you based on your ratings and your existing watchlist to create a personalized recommendation just for you."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003d\u003d\u003d\u003d Auto-Correct"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "All typing in the application will be spell-checked and corrected for you to help ease you into the application."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Ezwatchlist folder."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* *Add* `add n/MOVIE_NAME [t/TAG]...` +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "e.g. `add n/John Wick t/action t/puppies`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* *Watch* : `watch INDEX`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* *Edit* : `edit INDEX [n/MOVIE_NAME] [t/TAG]...` +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "e.g. `edit 2 n/John Wick t/favourite movie`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* *Search* : `search KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "e.g. `search John`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "* *Exit* : `exit`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 116,
      "tswuxia": 2,
      "michelleykw": 6,
      "-": 106
    }
  },
  {
    "path": "docs/diagrams/WatchSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "participant \":WatchListParser\" as WatchListParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "participant \":WatchCommandParser\" as WatchCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "participant \"w:WatchCommand\" as WatchCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "[-\u003e LogicManager : execute(\"watch 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "LogicManager -\u003e WatchListParser : parseCommand(\"watch 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "activate WatchListParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "create WatchCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "WatchListParser -\u003e WatchCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "activate WatchCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "WatchCommandParser --\u003e WatchListParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "deactivate WatchCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "WatchListParser -\u003e WatchCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "activate WatchCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "create WatchCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "WatchCommandParser -\u003e WatchCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "activate WatchCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "WatchCommand --\u003e WatchCommandParser : w"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "deactivate WatchCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "WatchCommandParser --\u003e WatchListParser : w"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "deactivate WatchCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "WatchCommandParser -[hidden]-\u003e WatchListParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "destroy WatchCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "WatchListParser --\u003e LogicManager : w"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "deactivate WatchListParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "LogicManager -\u003e WatchCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "activate WatchCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "WatchCommand -\u003e Model : getFilteredShowList()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Model --\u003e WatchCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "WatchCommand -\u003e WatchCommand : createEditedShow(showToEdit)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "activate WatchCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "WatchCommand --\u003e WatchCommand"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "deactivate WatchCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "WatchCommand -\u003e Model : setShow(showToEdit, EditedShow)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "Model --\u003e WatchCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "WatchCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "CommandResult --\u003e WatchCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "WatchCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "deactivate WatchCommand"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 80
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyWatchList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import seedu.ezwatchlist.model.WatchList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import seedu.ezwatchlist.storage.JsonWatchListStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.storage.Storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.storage.StorageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import seedu.ezwatchlist.storage.WatchListStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing WatchList ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        WatchListStorage watchListStorage \u003d new JsonWatchListStorage(userPrefs.getWatchListFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        storage \u003d new StorageManager(watchListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s watchlist and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * The data from the sample watchlist will be used instead if {@code storage}\u0027s watchlist is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * or an empty watchlist will be used instead if errors occur when reading {@code storage}\u0027s watchlist."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Optional\u003cReadOnlyWatchList\u003e watchListOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        ReadOnlyWatchList initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            watchListOptional \u003d storage.readWatchList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            if (!watchListOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample WatchList\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            initialData \u003d watchListOptional.orElseGet(SampleDataUtil::getSampleWatchList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty WatchList\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            initialData \u003d new WatchList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty WatchList\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            initialData \u003d new WatchList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty WatchList\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        logger.info(\"Starting WatchList \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping WatchList ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 39,
      "tswuxia": 4,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/api/ApiMain.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.api;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import info.movito.themoviedbapi.TmdbApi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import info.movito.themoviedbapi.TmdbMovies;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import info.movito.themoviedbapi.TmdbTV;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import info.movito.themoviedbapi.TmdbTvSeasons;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import info.movito.themoviedbapi.TvResultsPage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.model.Credits;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.model.MovieDb;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.model.core.MovieResultsPage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.model.people.PersonCast;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.model.tv.TvEpisode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.model.tv.TvSeason;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.model.tv.TvSeries;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.tools.MovieDbException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.api.exceptions.OnlineConnectionException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.api.model.ApiInterface;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Episode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.IsWatched;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Movie;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Poster;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.RunningTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.TvShow;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heze8"
        },
        "content": " * Main class for the API to connect to the server"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heze8"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heze8"
        },
        "content": "public class ApiMain implements ApiInterface {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heze8"
        },
        "content": "    //API key is to connect with the tmdb server."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private static final String API_KEY \u003d \"44ed1d7975d7c699743229199b1fc26e\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private static final String CONNECTION_ERROR_MESSAGE \u003d \"Looks like you\u0027re not connected to the internet\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private TmdbApi apiCall;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private boolean isConnected \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Constructor for ApiMain object used to interact with the API."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws OnlineConnectionException when not connected to the internet."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public ApiMain() throws OnlineConnectionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "heze8"
        },
        "content": "            apiCall \u003d new TmdbApi(API_KEY);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "heze8"
        },
        "content": "            isConnected \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (MovieDbException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "heze8"
        },
        "content": "            //when not connected to the internet"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "heze8"
        },
        "content": "            notConnected();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Checks if the API is connected to the internet."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return true if connected to the API."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public boolean isConnected() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "heze8"
        },
        "content": "            apiCall \u003d new TmdbApi(API_KEY);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "heze8"
        },
        "content": "            isConnected \u003d true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (MovieDbException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "heze8"
        },
        "content": "            isConnected \u003d false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return isConnected;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Helper function to call when not connected to the API."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws OnlineConnectionException"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private void notConnected() throws OnlineConnectionException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "heze8"
        },
        "content": "        throw new OnlineConnectionException(CONNECTION_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public List\u003cMovie\u003e getUpcomingMovies() throws OnlineConnectionException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "heze8"
        },
        "content": "            MovieResultsPage upcoming \u003d apiCall.getMovies().getUpcoming(null, null, null);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "heze8"
        },
        "content": "            ArrayList\u003cMovie\u003e movies \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "heze8"
        },
        "content": "            for (MovieDb m : upcoming.getResults()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "heze8"
        },
        "content": "                String movieName \u003d m.getTitle();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "heze8"
        },
        "content": "                RunningTime runtime \u003d new RunningTime(m.getRuntime());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "heze8"
        },
        "content": "                String overview \u003d m.getOverview();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "heze8"
        },
        "content": "                String releaseDate \u003d m.getReleaseDate();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                Movie toAdd \u003d new Movie(new Name(movieName), new Description(overview), new IsWatched(false),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                        new Date(releaseDate), runtime , new HashSet\u003cActor\u003e());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "heze8"
        },
        "content": "                //retrieve image"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "heze8"
        },
        "content": "                ImageRetrieval instance \u003d new ImageRetrieval(apiCall, m.getPosterPath());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "heze8"
        },
        "content": "                toAdd.setPoster(new Poster(instance.retrieveImage(movieName)));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "heze8"
        },
        "content": "                movies.add(toAdd);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return movies;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (MovieDbException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "heze8"
        },
        "content": "            notConnected();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return new ArrayList\u003cMovie\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Retrieves the movies from the API by the string given."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param name the name of the movie that the user wants to search."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return a list of movies that are returned from the API search call."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws OnlineConnectionException when not connected to the internet."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public List\u003cMovie\u003e getMovieByName(String name) throws OnlineConnectionException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "heze8"
        },
        "content": "        ArrayList\u003cMovie\u003e movies \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "heze8"
        },
        "content": "            MovieResultsPage page \u003d apiCall.getSearch().searchMovie(name,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "heze8"
        },
        "content": "                    null, null, true, 1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "heze8"
        },
        "content": "            for (MovieDb m : page.getResults()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "heze8"
        },
        "content": "                String movieName \u003d m.getTitle();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "heze8"
        },
        "content": "                final int movieId \u003d m.getId();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "heze8"
        },
        "content": "                TmdbMovies apiMovie \u003d apiCall.getMovies();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "heze8"
        },
        "content": "                MovieDb movie \u003d apiMovie.getMovie(movieId, null, TmdbMovies.MovieMethod.credits);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "heze8"
        },
        "content": "                RunningTime runtime \u003d new RunningTime(movie.getRuntime());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "heze8"
        },
        "content": "                String overview \u003d m.getOverview();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "heze8"
        },
        "content": "                String releaseDate \u003d m.getReleaseDate();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "heze8"
        },
        "content": "                //actors"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "heze8"
        },
        "content": "                Set\u003cActor\u003e actors \u003d getActors(movie.getCast());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "heze8"
        },
        "content": "                Movie toAdd \u003d new Movie(new Name(movieName), new Description(overview),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "heze8"
        },
        "content": "                        new IsWatched(false), new Date(releaseDate), runtime , actors);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "heze8"
        },
        "content": "                //retrieve image"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "heze8"
        },
        "content": "                ImageRetrieval instance \u003d new ImageRetrieval(apiCall, m.getPosterPath());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                String imagePath \u003d instance.retrieveImage(movieName);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                toAdd.setPoster(new Poster(imagePath));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "heze8"
        },
        "content": "                movies.add(toAdd);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return movies;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (MovieDbException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "heze8"
        },
        "content": "            notConnected();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return movies;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Retrieves the tv shows from the API by the string given."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param name the name of the tv show that the user wants to search."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return a list of tv shows that are returned from the API search call."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws OnlineConnectionException when not connected to the internet."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public List\u003cTvShow\u003e getTvShowByName(String name) throws OnlineConnectionException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "heze8"
        },
        "content": "        ArrayList\u003cTvShow\u003e tvShows \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            TvResultsPage page \u003d apiCall.getSearch().searchTv(name, null, 1);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "heze8"
        },
        "content": "            for (TvSeries tv : page.getResults()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "heze8"
        },
        "content": "                final int tvId \u003d tv.getId();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "heze8"
        },
        "content": "                List\u003cTvSeason\u003e seasons \u003d tv.getSeasons();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "heze8"
        },
        "content": "                ArrayList\u003cseedu.ezwatchlist.model.show.TvSeason\u003e seasonsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "heze8"
        },
        "content": "                TmdbTvSeasons tvSeasons \u003d apiCall.getTvSeasons();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "heze8"
        },
        "content": "                final int numberOfSeasons \u003d tv.getNumberOfSeasons();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "heze8"
        },
        "content": "                //seasons"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "heze8"
        },
        "content": "                for (int seasonNo \u003d 1; seasonNo \u003c numberOfSeasons; seasonNo++) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "heze8"
        },
        "content": "                    TvSeason tvSeason \u003d tvSeasons.getSeason(tvId, seasonNo,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "heze8"
        },
        "content": "                            null, TmdbTvSeasons.SeasonMethod.values());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "heze8"
        },
        "content": "                    List\u003cTvEpisode\u003e episodes \u003d tvSeason.getEpisodes();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "heze8"
        },
        "content": "                    ArrayList\u003cEpisode\u003e episodeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "heze8"
        },
        "content": "                    for (TvEpisode episode : episodes) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "heze8"
        },
        "content": "                        episodeList.add(new seedu.ezwatchlist.model.show.Episode("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "heze8"
        },
        "content": "                                new Name(episode.getName()), episode.getEpisodeNumber()));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "heze8"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "heze8"
        },
        "content": "                    seedu.ezwatchlist.model.show.TvSeason tvS \u003d"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "heze8"
        },
        "content": "                            new seedu.ezwatchlist.model.show.TvSeason(tvSeason.getSeasonNumber(), episodes.size(),"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "heze8"
        },
        "content": "                                    episodeList);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "heze8"
        },
        "content": "                    seasonsList.add(tvS);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "heze8"
        },
        "content": "                }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "heze8"
        },
        "content": "                Credits credits \u003d apiCall.getTvSeries().getCredits(tvId, null);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "heze8"
        },
        "content": "                Date date \u003d new Date(apiCall.getTvSeries().getSeries(tvId, null,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "heze8"
        },
        "content": "                        TmdbTV.TvMethod.external_ids).getFirstAirDate());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "heze8"
        },
        "content": "                //actors"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "heze8"
        },
        "content": "                Set\u003cActor\u003e actors \u003d getActors(credits.getCast());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                TvShow tvShowToAdd \u003d new TvShow(new Name(tv.getName()), new Description(tv.getOverview()),"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                        new IsWatched(false), date, new RunningTime(20),"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                        actors, 0, tv.getNumberOfEpisodes(), seasonsList);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "heze8"
        },
        "content": "                //image"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "heze8"
        },
        "content": "                ImageRetrieval instance \u003d new ImageRetrieval(apiCall, tv.getPosterPath());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "heze8"
        },
        "content": "                tvShowToAdd.setPoster(new Poster(instance.retrieveImage(tv.getName())));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "heze8"
        },
        "content": "                tvShows.add(tvShowToAdd);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return tvShows;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (MovieDbException e) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "heze8"
        },
        "content": "            notConnected();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return tvShows;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private Set\u003cActor\u003e getActors(List\u003cPersonCast\u003e cast) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "heze8"
        },
        "content": "        Set\u003cActor\u003e actors \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "heze8"
        },
        "content": "        for (PersonCast personCast: cast) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "heze8"
        },
        "content": "            Actor actor \u003d new Actor(personCast.getName());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "heze8"
        },
        "content": "            actors.add(actor);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return actors;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 24,
      "heze8": 202
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/api/ImageRetrieval.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.api;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.nio.file.FileAlreadyExistsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.TmdbApi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.model.config.TmdbConfiguration;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "import info.movito.themoviedbapi.tools.MovieDbException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.api.exceptions.OnlineConnectionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tswuxia"
        },
        "content": " * A class for the image retrieval."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tswuxia"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "public class ImageRetrieval {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private static final String DEFAULT_FILE_SIZE \u003d \"w500\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private static final String ROOT \u003d defaultDirectory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public static final String IMAGE_CACHE_LOCATION \u003d ROOT + File.separator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": "            + \"Ezwatchlist\" + File.separator + \"posters\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private String imageUrl;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Creates an instance of a image retrieval used to download images online"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param tmdbApi the tmdbApi object used to get the url"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param filePath the url online to the image"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws OnlineConnectionException when not connected to the internet"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public ImageRetrieval(TmdbApi tmdbApi, String filePath) throws OnlineConnectionException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heze8"
        },
        "content": "            TmdbConfiguration configuration \u003d tmdbApi.getConfiguration();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heze8"
        },
        "content": "            imageUrl \u003d configuration.getBaseUrl() + DEFAULT_FILE_SIZE + filePath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (MovieDbException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heze8"
        },
        "content": "            throw new OnlineConnectionException(\"Internet Connection failed at Image Retrieval\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Retrieves the default directory of the platform"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return the string path to the root folder"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heze8"
        },
        "content": "    //adapted from"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heze8"
        },
        "content": "    //https://stackoverflow.com/questions/6561172/find-directory-for-application-data-on-linux-and-macintosh"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heze8"
        },
        "content": "    static String defaultDirectory() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "heze8"
        },
        "content": "        String os \u003d System.getProperty(\"os.name\").toLowerCase();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "heze8"
        },
        "content": "        if (os.contains(\"win\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return System.getenv(\"APPDATA\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } else if (os.contains(\"mac\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return System.getProperty(\"user.home\") + \"/Library/Application Support\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } else if (os.contains(\"nux\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Retrieves the image online by downloading it into the save folder"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param fileName the name of the file saved"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return the string path of the file"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws OnlineConnectionException when not connected to the internet"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public String retrieveImage(String fileName) throws OnlineConnectionException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "heze8"
        },
        "content": "            downloadImage(fileName);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return fileName.replaceAll(\"[^A-Za-z0-9\\\\[\\\\]]\", \"\") + \".png\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Returns the online url from this object instance."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return the online url"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public String getImageUrl() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return imageUrl;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Downloads the image from the online url. Is a helper method."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param fileName the name of the file to be saved."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws OnlineConnectionException when not connected online."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private void downloadImage(String fileName) throws OnlineConnectionException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try (InputStream in \u003d new URL(imageUrl).openStream()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "heze8"
        },
        "content": "            File parent \u003d new File(IMAGE_CACHE_LOCATION);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "heze8"
        },
        "content": "            if (!parent.exists()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "heze8"
        },
        "content": "                parent.mkdirs();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "heze8"
        },
        "content": "            Files.copy(in, Paths.get(IMAGE_CACHE_LOCATION + File.separator"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "heze8"
        },
        "content": "                    + fileName.replaceAll(\"[^A-Za-z0-9\\\\[\\\\]]\", \"\") + \".png\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (FileAlreadyExistsException f) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "heze8"
        },
        "content": "            System.err.println(\"Duplicate image\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "heze8"
        },
        "content": "            System.err.println(e.getCause());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "heze8"
        },
        "content": "            throw new OnlineConnectionException(\"No internet connection at downloading image\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 8,
      "tswuxia": 3,
      "heze8": 97
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/api/MovieInformation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.api;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.api.model.Information;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Movie information class to store information about movies."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "public class MovieInformation extends Information {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private Optional\u003cInteger\u003e runningTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void setRunningTime(int runningTime) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "        this.runningTime \u003d Optional.ofNullable(runningTime);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Optional\u003cInteger\u003e getRunningTime() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return runningTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 9,
      "heze8": 11
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/api/exceptions/OnlineConnectionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.api.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": " * Represents an error when application fails to connect online to the API"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "public class OnlineConnectionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public OnlineConnectionException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "heze8": 12
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/api/model/ApiInterface.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.api.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.api.exceptions.OnlineConnectionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.show.Movie;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.show.TvShow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": " * Interface to retrieve information from online API."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": " * Methods used here will return the information for movies and tv shows."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "public interface ApiInterface {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Returns a list of movies from the API search method."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param name the name of the movie that the user wants to search."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @exception OnlineConnectionException when the user is not connected to the internet."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public List\u003cMovie\u003e getMovieByName(String name) throws OnlineConnectionException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Returns a list of tv shows from the API search method."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param name the name of the tv show that the user wants to search."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @exception OnlineConnectionException when the user is not connected to the internet."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public List\u003cTvShow\u003e getTvShowByName(String name) throws OnlineConnectionException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Checks if the api is connected to the internet."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public boolean isConnected();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 35
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/api/model/Information.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.api.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": " * Interface to contain information retrieved from API."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "public abstract class Information {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private Optional\u003cString\u003e name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private Optional\u003cString\u003e description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private Optional\u003cList\u003cString\u003e\u003e actors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private Optional\u003cString\u003e date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public void addName(String name) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "        this.name \u003d Optional.ofNullable(name);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public void addDescription(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "        this.description \u003d Optional.ofNullable(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public void addActors(List\u003cString\u003e actors) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "        this.actors \u003d Optional.ofNullable(actors);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public void addDate(String date) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": "        this.date \u003d Optional.ofNullable(date);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public Optional\u003cString\u003e getName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public Optional\u003cString\u003e getDate() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public Optional\u003cList\u003cString\u003e\u003e getActors() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return actors;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public Optional\u003cString\u003e getDescription() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 46
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private static final String LOG_FILE \u003d \"watchlist.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_INVALID_SHOW_TYPE \u003d \"The type of show provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_INVALID_SHOW_DISPLAYED_INDEX \u003d \"The show index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_SHOWS_LISTED_OVERVIEW \u003d \"%1$d shows listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 4,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.api.exceptions.OnlineConnectionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyWatchList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException, OnlineConnectionException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns the WatchList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @see Model#getWatchList()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    ReadOnlyWatchList getWatchList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /** Returns an unmodifiable view of the filtered watched list of shows */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    ObservableList\u003cShow\u003e getWatchedList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of shows */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    ObservableList\u003cShow\u003e getFilteredShowList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /** Returns an unmodifiable view of the search results of shows */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    ObservableList\u003cShow\u003e getSearchResultList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns the user prefs\u0027 watchlist file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    Path getWatchListFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 23,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.api.exceptions.OnlineConnectionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.parser.WatchListParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyWatchList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final WatchListParser watchListParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        watchListParser \u003d new WatchListParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throws CommandException, ParseException, OnlineConnectionException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Command command \u003d watchListParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            storage.saveWatchList(model.getWatchList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ReadOnlyWatchList getWatchList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return model.getWatchList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ObservableList\u003cShow\u003e getWatchedList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return model.getWatchedShowList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ObservableList\u003cShow\u003e getFilteredShowList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return model.getFilteredShowList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ObservableList\u003cShow\u003e getSearchResultList() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return model.getSearchResultList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Path getWatchListFilePath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return model.getWatchListFilePath();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 35,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_ACTOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_DATE_OF_RELEASE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_IS_WATCHED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_RUNNING_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Adds a show to the watchlist."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a show to the watchlist. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + PREFIX_TYPE + \"TYPE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + PREFIX_DATE_OF_RELEASE + \"DATE OF RELEASE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + PREFIX_IS_WATCHED + \"WATCHED? \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + PREFIX_RUNNING_TIME + \"RUNNING TIME \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \"[\" + PREFIX_ACTOR + \"ACTOR]...\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + PREFIX_NAME + \"Joker \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + PREFIX_TYPE + \"movie \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + PREFIX_DATE_OF_RELEASE + \"4 October 2019 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + PREFIX_IS_WATCHED + \"true \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + PREFIX_RUNNING_TIME + \"122 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Joker is funny \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + PREFIX_ACTOR + \"Joaquin Phoenix \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + PREFIX_ACTOR + \"Robert De Niro\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New show added: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SHOW \u003d \"This show already exists in the watchlist\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final Show toAdd;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Show}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public AddCommand(Show show) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(show);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        toAdd \u003d show;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (model.hasShow(toAdd)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_SHOW);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        model.addShow(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 37,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.WatchList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Clears the watchlist."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Watchlist has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        model.setWatchList(new WatchList());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 7,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Deletes a show identified using it\u0027s displayed index from the watchlist."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \": Deletes the show identified by the index number used in the displayed show list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_DELETE_SHOW_SUCCESS \u003d \"Deleted Show: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        List\u003cShow\u003e lastShownList \u003d model.getFilteredShowList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SHOW_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show showToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        model.deleteShow(showToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_SHOW_SUCCESS, showToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 14,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_ACTOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_DATE_OF_RELEASE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_IS_WATCHED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_RUNNING_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.model.Model.PREDICATE_SHOW_ALL_SHOWS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.IsWatched;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Movie;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Poster;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.RunningTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.TvShow;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Edits the details of an existing show in the watchlist."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the show identified \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \"by the index number used in the displayed show list. \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \"[\" + PREFIX_DATE_OF_RELEASE + \"DATE OF RELEASE] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \"[\" + PREFIX_IS_WATCHED + \"WATCHED?] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \"[\" + PREFIX_RUNNING_TIME + \"RUNNING TIME] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \"[\" + PREFIX_ACTOR + \"ACTOR]...\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + PREFIX_NAME + \"Joker \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + PREFIX_DATE_OF_RELEASE + \"3 October 2019\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_EDIT_SHOW_SUCCESS \u003d \"Edited Show: %1$s\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SHOW \u003d \"This show already exists in the watchlist.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final EditShowDescriptor editShowDescriptor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param index of the show in the filtered show list to edit"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param editShowDescriptor details to edit the show with"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public EditCommand(Index index, EditShowDescriptor editShowDescriptor) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(editShowDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.editShowDescriptor \u003d new EditShowDescriptor(editShowDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        List\u003cShow\u003e lastShownList \u003d model.getFilteredShowList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SHOW_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show showToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show editedShow \u003d createEditedShow(showToEdit, editShowDescriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!showToEdit.isSameShow(editedShow) \u0026\u0026 model.hasShow(editedShow)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_SHOW);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        model.setShow(showToEdit, editedShow);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        model.updateFilteredShowList(PREDICATE_SHOW_ALL_SHOWS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_SHOW_SUCCESS, editedShow));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Creates and returns a {@code Show} with the details of {@code showToEdit}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * edited with {@code editShowDescriptor}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private static Show createEditedShow(Show showToEdit, EditShowDescriptor editShowDescriptor) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assert showToEdit !\u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Name updatedName \u003d editShowDescriptor.getName().orElse(showToEdit.getName());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Date updatedDateOfRelease \u003d editShowDescriptor.getDateOfRelease().orElse(showToEdit.getDateOfRelease());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        IsWatched updatedIsWatched \u003d editShowDescriptor.getIsWatched().orElse(showToEdit.isWatched());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Description updatedDescription \u003d editShowDescriptor.getDescription().orElse(showToEdit.getDescription());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        RunningTime updatedRunningTime \u003d editShowDescriptor.getRunningTime().orElse(showToEdit.getRunningTime());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Set\u003cActor\u003e updatedActors \u003d editShowDescriptor.getActors().orElse(showToEdit.getActors());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Poster updatedPoster \u003d editShowDescriptor.getPoster().orElse(showToEdit.getPoster());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (showToEdit.getType().equals(\"Movie\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            Movie editedShow \u003d new Movie(updatedName, updatedDescription, updatedIsWatched,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    updatedDateOfRelease, updatedRunningTime, updatedActors);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            editedShow.setPoster(updatedPoster);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return editedShow;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        } else { //showToEdit.type.equals(\"Tv show\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            TvShow editedShow \u003d new TvShow(updatedName, updatedDescription, updatedIsWatched,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    updatedDateOfRelease, updatedRunningTime, updatedActors,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    0, 0, null);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            editedShow.setPoster(updatedPoster);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return editedShow;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 editShowDescriptor.equals(e.editShowDescriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Stores the details to edit the show with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * corresponding field value of the show."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static class EditShowDescriptor {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        private String type;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        private Date dateOfRelease;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        private IsWatched isWatched;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        private RunningTime runningTime;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        private Set\u003cActor\u003e actors;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        private Poster poster;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public EditShowDescriptor() {}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * A defensive copy of {@code actors} is used internally."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public EditShowDescriptor(EditShowDescriptor toCopy) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            setType(toCopy.type);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            setDateOfRelease(toCopy.dateOfRelease);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            setIsWatched(toCopy.isWatched);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            setRunningTime(toCopy.runningTime);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            setActors(toCopy.actors);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            setPoster(toCopy.poster);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, dateOfRelease, isWatched, description, runningTime, actors);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void setType(String type) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.type \u003d type;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public Optional\u003cString\u003e getType() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return Optional.ofNullable(type);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void setDateOfRelease(Date dateOfRelease) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.dateOfRelease \u003d dateOfRelease;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public Optional\u003cDate\u003e getDateOfRelease() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return Optional.ofNullable(dateOfRelease);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void setIsWatched(IsWatched isWatched) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.isWatched \u003d isWatched;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public Optional\u003cIsWatched\u003e getIsWatched() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return Optional.ofNullable(isWatched);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void setRunningTime(RunningTime runningTime) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.runningTime \u003d runningTime;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public Optional\u003cRunningTime\u003e getRunningTime() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return Optional.ofNullable(runningTime);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void setPoster(Poster poster) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.poster \u003d poster;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public Optional\u003cPoster\u003e getPoster() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return Optional.ofNullable(poster);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * Sets {@code actors} to this object\u0027s {@code actors}."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * A defensive copy of {@code actors} is used internally."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void setActors(Set\u003cActor\u003e actors) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.actors \u003d (actors !\u003d null) ? new HashSet\u003c\u003e(actors) : null;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * Returns an unmodifiable actor set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code actor} is null."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public Optional\u003cSet\u003cActor\u003e\u003e getActors() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return (actors !\u003d null) ? Optional.of(Collections.unmodifiableSet(actors)) : Optional.empty();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            if (!(other instanceof EditShowDescriptor)) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            EditShowDescriptor e \u003d (EditShowDescriptor) other;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    \u0026\u0026 getType().equals(e.getType())"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    \u0026\u0026 getDateOfRelease().equals(e.getDateOfRelease())"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    \u0026\u0026 getIsWatched().equals(e.getIsWatched())"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    \u0026\u0026 getRunningTime().equals(e.getRunningTime())"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    \u0026\u0026 getActors().equals(e.getActors())"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    \u0026\u0026 getPoster().equals(e.getPoster());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 142,
      "michelleykw": 1,
      "heze8": 6,
      "-": 129
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Ezwatchlist as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 3,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.model.Model.PREDICATE_SHOW_ALL_SHOWS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Lists all shows in the watchlist to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all shows\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        model.updateFilteredShowList(PREDICATE_SHOW_ALL_SHOWS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 6,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/commands/SearchCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.api.ApiMain;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.api.exceptions.OnlineConnectionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Movie;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.TvShow;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Finds and lists all shows in watchlist whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"search\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Searches for shows online whose names contain any of \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Joker\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private static final String MESSAGE_INVALID_IS_INTERNAL_COMMAND \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            \"Invalid input. i/[OPTION] where OPTION is either true/yes or false/no\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private static final String MESSAGE_INVALID_TYPE_COMMAND \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            \"Invalid input. t/[TYPE] where TYPE is either movie or tv\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private static final String INPUT_TRUE \u003d \"true\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private static final String INPUT_YES \u003d \"yes\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private static final String INPUT_FALSE \u003d \"false\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private static final String INPUT_NO \u003d \"no\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private static final String INPUT_MOVIE \u003d \"movie\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private static final String INPUT_TV \u003d \"tv\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private static final String KEY_NAME \u003d \"name\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private static final String KEY_TYPE \u003d \"type\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private static final String KEY_ACTOR \u003d \"actor\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private static final String KEY_IS_WATCHED \u003d \"is_watched\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private static final String KEY_IS_INTERNAL \u003d \"is_internal\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private List\u003cString\u003e nameList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private List\u003cString\u003e typeList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private List\u003cString\u003e actorList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private List\u003cString\u003e isWatchedList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private List\u003cString\u003e isInternalList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private List\u003cShow\u003e searchResult \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public SearchCommand(HashMap\u003cString, List\u003cString\u003e\u003e searchShowsHashMap) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        nameList \u003d searchShowsHashMap.get(KEY_NAME);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        typeList \u003d searchShowsHashMap.get(KEY_TYPE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        actorList \u003d searchShowsHashMap.get(KEY_ACTOR); // unable to search online"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        isWatchedList \u003d searchShowsHashMap.get(KEY_IS_WATCHED);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        isInternalList \u003d searchShowsHashMap.get(KEY_IS_INTERNAL);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            if (!nameList.isEmpty() \u0026\u0026 !actorList.isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                searchByName(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                searchByActor(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                // add shows with the show name and also shows with the actors involved"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                // ensure no duplicates, currently might have duplicate"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                // for now, do not allow users to search for both name and actor at the same time"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            } else if (!nameList.isEmpty()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                searchByName(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            } else if (!actorList.isEmpty()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                searchByActor(model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            } else { // if has no name and actor to be searched"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                //searchByType();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                //searchByIsWatched();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                //searchByIsInternal();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            model.updateSearchResultList(searchResult);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            return new CommandResult(String.format(Messages.MESSAGE_SHOWS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                    model.getSearchResultList().size()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        } catch (OnlineConnectionException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Search for shows by name."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param model Model used."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @throws CommandException If command exception occurred."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @throws OnlineConnectionException If online exception occurred."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private void searchByName(Model model) throws CommandException, OnlineConnectionException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        if (requestedSearchFromInternal()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            for (String showName : nameList) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                addShowFromWatchListIfSameNameAs(showName, model);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        } else if (requestedSearchFromOnline()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            for (String showName : nameList) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                addShowFromOnlineIfSameNameAs(showName);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        } else if (requestedIsInternal()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_IS_INTERNAL_COMMAND);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        } else { // there\u0027s no restriction on where to search from"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            for (String showName : nameList) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                addShowFromWatchListIfSameNameAs(showName, model);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                addShowFromOnlineIfSameNameAs(showName);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Search for shows by actor."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param model Model used."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @throws CommandException If command exception occurred."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @throws OnlineConnectionException If online exception occurred."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private void searchByActor(Model model) throws CommandException, OnlineConnectionException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        Set\u003cActor\u003e actorSet \u003d new HashSet\u003cActor\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        for (String actorName : actorList) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            Actor actor \u003d new Actor(actorName);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            actorSet.add(actor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        if (requestedSearchFromInternal()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            addShowFromWatchListIfHasActor(actorSet, model);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        } else if (requestedSearchFromOnline()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            addShowFromOnlineIfHasActor(actorSet); //unable to online for now"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        } else if (requestedIsInternal()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_IS_INTERNAL_COMMAND);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        } else { // there\u0027s no restriction on where to search from"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            addShowFromWatchListIfHasActor(actorSet, model);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            addShowFromOnlineIfHasActor(actorSet); //unable to online for now"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Adds show from list if it has the same name as the given show."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param showName name of the given show."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param model current model of the program."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private void addShowFromWatchListIfSameNameAs(String showName, Model model) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        if (!showName.equals(EMPTY_STRING)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            List\u003cShow\u003e filteredShowList \u003d model.getShowIfHasName(new Name(showName));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            addShowToSearchResult(filteredShowList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Adds show from list if it has any actor in actorSet."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param actorSet Set of actors to be searched for."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param model Model used."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private void addShowFromWatchListIfHasActor(Set\u003cActor\u003e actorSet, Model model) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        if (!actorSet.isEmpty()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            List\u003cShow\u003e filteredShowList \u003d model.getShowIfHasActor(actorSet);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            addShowToSearchResult(filteredShowList);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Add show to search result."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param showList List of shows to be added."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private void addShowToSearchResult(List\u003cShow\u003e showList) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        for (Show show : showList) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            if (requestedSearchFromWatched() \u0026\u0026 !show.isWatched().getIsWatchedBoolean()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                continue; // skip if request to be watched but show is not watched"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            } else if (requestedSearchFromWatchList() \u0026\u0026 show.isWatched().getIsWatchedBoolean()) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                continue; // skip if requested to be in watchlist but show is watched"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            } else if (requestedSearchForMovie() \u0026\u0026 !show.getType().equals(\"Movie\")) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                continue; // skip if requested search for movie but show is tv"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            } else if (requestedSearchForTv() \u0026\u0026 !show.getType().equals(\"Tv Show\")) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                continue; // skip if requested search for tv but show is movie"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            searchResult.add(show);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Add shows, both movies and tv series, searched by name from online to the search result list."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param showName Name of the show to be searched."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @throws OnlineConnectionException If online exception occurred."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @throws CommandException If command exception occurred."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private void addShowFromOnlineIfSameNameAs(String showName) throws OnlineConnectionException, CommandException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        if (!requestedIsWatched() \u0026\u0026 !showName.equals(EMPTY_STRING)) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            if (requestedSearchForMovie()) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                addOnlineMovieSearchedByNameToResult(showName);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            } else if (requestedSearchForTv()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                addOnlineTvSearchedByNameToResult(showName);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            } else if (requestedType()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                throw new CommandException(MESSAGE_INVALID_TYPE_COMMAND);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                addOnlineMovieSearchedByNameToResult(showName);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                addOnlineTvSearchedByNameToResult(showName);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Add movies, searched by name from online to the search result list."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param showName Name of the show to be searched."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @throws OnlineConnectionException If online exception occurred."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private void addOnlineMovieSearchedByNameToResult(String showName) throws OnlineConnectionException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        List\u003cMovie\u003e movies \u003d new ApiMain().getMovieByName(showName);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        for (Movie movie : movies) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            searchResult.add(movie);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Add tv series, searched by name from online to the search result list."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param showName Name of the show to be searched."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @throws OnlineConnectionException If online exception occurred."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private void addOnlineTvSearchedByNameToResult(String showName) throws OnlineConnectionException {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        List\u003cTvShow\u003e tvShows \u003d new ApiMain().getTvShowByName(showName);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "heze8"
        },
        "content": "        for (TvShow tvShow : tvShows) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "heze8"
        },
        "content": "            searchResult.add(tvShow);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    // TO EDIT"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Add show from online if has actors, taking into account if user makes any other requests."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param actorSet The set of actors to be searched."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @throws OnlineConnectionException If online exception occurred."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @throws CommandException If command exception occurred."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private void addShowFromOnlineIfHasActor(Set\u003cActor\u003e actorSet) throws OnlineConnectionException, CommandException {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        if (!actorSet.isEmpty() \u0026\u0026 !requestedIsWatched()) { // would not check online if requested to be is watched"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            if (requestedSearchForMovie()) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                //addOnlineMovieSearchedByNameToResult(showName);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            } else if (requestedSearchForTv()) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                //addOnlineTvSearchedByNameToResult(showName);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            } else if (requestedType()) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                throw new CommandException(MESSAGE_INVALID_TYPE_COMMAND);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                //addOnlineMovieSearchedByNameToResult(showName);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                //addOnlineTvSearchedByNameToResult(showName);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Return true if user requests to search for tv series or movies only."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if user requests to search for tv series or movies only."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private boolean requestedType() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return !typeList.isEmpty();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Return true if user requests to search for movies only."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if user requests to search for movies only."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private boolean requestedSearchForMovie() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return requestedType() \u0026\u0026 (typeList.get(0).equals(INPUT_MOVIE));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Return true if user requests to search for tv series only."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if user requests to search for tv series only."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private boolean requestedSearchForTv() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return requestedType() \u0026\u0026 (typeList.get(0).equals(INPUT_TV));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Return true if user requests to search from watch or watched list."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if user requests to search from watch or watched list."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private boolean requestedIsWatched() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return !isWatchedList.isEmpty();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Return true if user requests to search from watched list."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if user requests to search from watched list."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private boolean requestedSearchFromWatched() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return requestedIsWatched()"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                \u0026\u0026 (isWatchedList.get(0).equals(INPUT_TRUE) || isWatchedList.get(0).equals(INPUT_YES));"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Return true if user requests to search from watch list."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if user requests to search from watch list."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private boolean requestedSearchFromWatchList() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return requestedIsWatched()"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                \u0026\u0026 (isWatchedList.get(0).equals(INPUT_FALSE) || isWatchedList.get(0).equals(INPUT_NO));"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Return true if user requests to search from internal or online."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if user requests to search from internal or online."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private boolean requestedIsInternal() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return !isInternalList.isEmpty();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Return true if user requests to search from internal."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if user requests to search from internal."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private boolean requestedSearchFromInternal() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return requestedIsInternal()"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                \u0026\u0026 (isInternalList.get(0).equals(INPUT_TRUE) || isInternalList.get(0).equals(INPUT_YES));"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Return true if user requests to search from online."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if user requests to search from online."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private boolean requestedSearchFromOnline() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return requestedIsInternal()"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                \u0026\u0026 (isInternalList.get(0).equals(INPUT_FALSE) || isInternalList.get(0).equals(INPUT_NO));"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Return the list of search results."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return List of search results."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public List\u003cShow\u003e getSearchResult() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return searchResult;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                || (other instanceof SearchCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                \u0026\u0026 nameList.equals(((SearchCommand) other).nameList)"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                \u0026\u0026 typeList.equals(((SearchCommand) other).typeList)"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                \u0026\u0026 actorList.equals(((SearchCommand) other).actorList)"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                \u0026\u0026 isWatchedList.equals(((SearchCommand) other).isWatchedList)"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                \u0026\u0026 isInternalList.equals(((SearchCommand) other).isInternalList));"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 20,
      "michelleykw": 303,
      "heze8": 8,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/commands/SyncCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Syncs a result from the search list into the watch list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class SyncCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sync\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sync a show from IMDB to the watchlist. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sync movie: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SHOW \u003d \"?\"; //\"This show already exists in the watchlist\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private Index toSync;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public SyncCommand(Index toSync) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(toSync);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.toSync \u003d toSync;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        List\u003cShow\u003e searchResultList \u003d model.getSearchResultList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        System.err.println(searchResultList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (toSync.getZeroBased() \u003e\u003d searchResultList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SHOW_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show fromImdb \u003d searchResultList.get(toSync.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        model.addShow(fromImdb);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, fromImdb));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                || (other instanceof SyncCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 toSync.equals(((SyncCommand) other).toSync));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 53
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/commands/WatchCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.model.Model.PREDICATE_SHOW_ALL_SHOWS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.IsWatched;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Movie;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Poster;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.RunningTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.TvShow;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Marks an existing show in the watchlist as watched."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class WatchCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"watch\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Marks an existing show in the watchlist as watched \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \"by the index number used in the displayed show list.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_WATCH_SHOW_SUCCESS \u003d \"Marked show as watched: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_UNWATCH_SHOW_SUCCESS \u003d \"Unmarked show as watched: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SHOW \u003d \"This show already exists in the watchlist.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param index of the show in the filtered show list to edit"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public WatchCommand(Index index) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        List\u003cShow\u003e lastShownList \u003d model.getFilteredShowList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SHOW_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show showToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show editedShow \u003d createEditedShow(showToEdit);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!showToEdit.isSameShow(editedShow) \u0026\u0026 model.hasShow(editedShow)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_SHOW);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        model.setShow(showToEdit, editedShow);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        model.updateFilteredShowList(PREDICATE_SHOW_ALL_SHOWS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        boolean isWatched \u003d editedShow.isWatched().value;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (isWatched) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_WATCH_SHOW_SUCCESS, editedShow));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_UNWATCH_SHOW_SUCCESS, editedShow));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Creates and returns a {@code Show} with the details of {@code showToEdit}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * edited with {@code editShowDescriptor}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private static Show createEditedShow(Show showToEdit) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assert showToEdit !\u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Name name \u003d showToEdit.getName();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Date dateOfRelease \u003d showToEdit.getDateOfRelease();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        IsWatched updatedIsWatched \u003d new IsWatched(!showToEdit.isWatched().value);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Description description \u003d showToEdit.getDescription();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        RunningTime runningTime \u003d showToEdit.getRunningTime();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Set\u003cActor\u003e actors \u003d showToEdit.getActors();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Poster poster \u003d showToEdit.getPoster();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (showToEdit.getType().equals(\"Movie\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            Movie editedShow \u003d new Movie(name, description, updatedIsWatched,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    dateOfRelease, runningTime, actors);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            editedShow.setPoster(poster);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return editedShow;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            TvShow editedShow \u003d new TvShow(name, description, updatedIsWatched,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    dateOfRelease, runningTime, actors, 0, 0, null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            editedShow.setPoster(poster);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return editedShow;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 106
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_ACTOR;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_DATE_OF_RELEASE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_IS_WATCHED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_RUNNING_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.IsWatched;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Movie;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.RunningTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.TvShow;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TYPE, PREFIX_DATE_OF_RELEASE, PREFIX_IS_WATCHED,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                        PREFIX_DESCRIPTION, PREFIX_RUNNING_TIME, PREFIX_ACTOR);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_TYPE, PREFIX_DATE_OF_RELEASE, PREFIX_IS_WATCHED,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                PREFIX_DESCRIPTION, PREFIX_RUNNING_TIME)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String type \u003d ParserUtil.parseType(argMultimap.getValue(PREFIX_TYPE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Date dateOfRelease \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE_OF_RELEASE).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        IsWatched isWatched \u003d ParserUtil.parseIsWatched(argMultimap.getValue(PREFIX_IS_WATCHED).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        RunningTime runningTime \u003d ParserUtil.parseRunningTime(argMultimap.getValue(PREFIX_RUNNING_TIME).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Set\u003cActor\u003e actorList \u003d ParserUtil.parseActors(argMultimap.getAllValues(PREFIX_ACTOR));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        if (type.equals(\"movie\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            Movie movie \u003d new Movie(name, description, isWatched, dateOfRelease, runningTime, actorList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return new AddCommand(movie);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        } else if (type.equals(\"tv\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            TvShow tvShow \u003d new TvShow(name, description, isWatched, dateOfRelease, runningTime, actorList,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                    0, 0, null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return new AddCommand(tvShow);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        throw new ParseException(\"Type can only be movie or tv.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 31,
      "wongchuankai": 9,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final Prefix PREFIX_DATE_OF_RELEASE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final Prefix PREFIX_RUNNING_TIME \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final Prefix PREFIX_IS_WATCHED \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final Prefix PREFIX_ACTOR \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static final Prefix PREFIX_TYPE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public static final Prefix PREFIX_IS_INTERNAL \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 6,
      "wongchuankai": 1,
      "michelleykw": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 6,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_ACTOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_DATE_OF_RELEASE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_IS_WATCHED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_RUNNING_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATE_OF_RELEASE, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                        PREFIX_IS_WATCHED, PREFIX_RUNNING_TIME, PREFIX_ACTOR);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new ParseException(String.format("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        EditCommand.EditShowDescriptor editShowDescriptor \u003d new EditCommand.EditShowDescriptor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            editShowDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE_OF_RELEASE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            editShowDescriptor.setDateOfRelease("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE_OF_RELEASE).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (argMultimap.getValue(PREFIX_IS_WATCHED).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            editShowDescriptor.setIsWatched(ParserUtil.parseIsWatched(argMultimap.getValue(PREFIX_IS_WATCHED).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            editShowDescriptor.setDescription("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RUNNING_TIME).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            editShowDescriptor.setRunningTime("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    ParserUtil.parseRunningTime(argMultimap.getValue(PREFIX_RUNNING_TIME).get()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        parseActorsForEdit(argMultimap.getAllValues(PREFIX_ACTOR)).ifPresent(editShowDescriptor::setActors);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!editShowDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return new EditCommand(index, editShowDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e actors} into a {@code Set\u003cActor\u003e} if {@code actors} is non-empty."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * If {@code actors} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * {@code Set\u003cActor\u003e} containing zero actors."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private Optional\u003cSet\u003cActor\u003e\u003e parseActorsForEdit(Collection\u003cString\u003e actors) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assert actors !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (actors.isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Collection\u003cString\u003e actorSet \u003d actors.size() \u003d\u003d 1 \u0026\u0026 actors.contains(\"\") ? Collections.emptySet() : actors;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return Optional.of(ParserUtil.parseActors(actorSet));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 41,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.api.exceptions.OnlineConnectionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    T parse(String userInput) throws ParseException, OnlineConnectionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 2,
      "heze8": 3,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.IsWatched;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.RunningTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Parses a {@code String type} into a {@code type}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws ParseException if the given {@code type} is invalid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static String parseType(String type) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        String trimmedType \u003d type.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!type.isValidType(trimmedType)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new ParseException(Type.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Parses a {@code String date} into a {@code date}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!Date.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new ParseException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return new Date(trimmedDate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Parses a {@code String isWatched} into an {@code IsWatched}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws ParseException if the given {@code isWatched} is invalid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static IsWatched parseIsWatched(String isWatched) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(isWatched);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        String trimmedIsWatched \u003d isWatched.trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!IsWatched.isValidIsWatched(Boolean.parseBoolean(trimmedIsWatched))) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new ParseException(IsWatched.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return new IsWatched(Boolean.parseBoolean(trimmedIsWatched));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Parses a {@code String description} into an {@code Description}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Parses a {@code String runningTime} into an {@code RunningTIME}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws ParseException if the given {@code runningTime} is invalid."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static RunningTime parseRunningTime(String runningTime) throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(runningTime);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        String trimmedRunningTime \u003d runningTime.trim();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!RunningTime.isValidRunningTime(Integer.parseInt(trimmedRunningTime))) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new ParseException(RunningTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return new RunningTime(Integer.parseInt(trimmedRunningTime));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Parses a {@code String actor} into a {@code Actor}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws ParseException if the given {@code actor} is invalid."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static Actor parseActor(String actor) throws ParseException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(actor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        String trimmedActor \u003d actor.trim();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!Actor.isValidActorName(trimmedActor)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new ParseException(Actor.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return new Actor(trimmedActor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e actors} into a {@code Set\u003cActor\u003e}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static Set\u003cActor\u003e parseActors(Collection\u003cString\u003e actors) throws ParseException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(actors);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        final Set\u003cActor\u003e actorSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        for (String actorName : actors) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            actorSet.add(parseActor(actorName));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return actorSet;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 81,
      "wongchuankai": 1,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/parser/SearchCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_ACTOR;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_IS_INTERNAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_IS_WATCHED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Parses input arguments and creates a new SearchCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "public class SearchCommandParser implements Parser\u003cSearchCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private static final String KEY_NAME \u003d \"name\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private static final String KEY_TYPE \u003d \"type\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private static final String KEY_ACTOR \u003d \"actor\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private static final String KEY_IS_WATCHED \u003d \"is_watched\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private static final String KEY_IS_INTERNAL \u003d \"is_internal\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private HashMap\u003cString, List\u003cString\u003e\u003e searchShowsHashMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SearchCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * and returns a SearchCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public SearchCommand parse(String args) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                        args, PREFIX_NAME, PREFIX_TYPE, PREFIX_IS_WATCHED, PREFIX_ACTOR, PREFIX_IS_INTERNAL);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        List\u003cString\u003e nameList \u003d argMultimap.getAllValues(PREFIX_NAME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        Optional\u003cString\u003e typeOptional \u003d argMultimap.getValue(PREFIX_TYPE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        List\u003cString\u003e actorList \u003d argMultimap.getAllValues(PREFIX_ACTOR);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        Optional\u003cString\u003e isWatchedOptional \u003d argMultimap.getValue(PREFIX_IS_WATCHED);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        Optional\u003cString\u003e isInternalOptional \u003d argMultimap.getValue(PREFIX_IS_INTERNAL);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        parseNameToBeSearched(nameList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        parseTypeToBeSearched(typeOptional);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        parseActorToBeSearched(actorList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        parseIsWatchedToBeSearched(isWatchedOptional);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        parseIsInternalToBeSearched(isInternalOptional);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return new SearchCommand(searchShowsHashMap);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Parses the names to be searched."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param nameList List of names to be searched."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private void parseNameToBeSearched(List\u003cString\u003e nameList) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        searchShowsHashMap.put(KEY_NAME, nameList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Parses the type to be searched."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param typeOptional Type to be searched."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private void parseTypeToBeSearched(Optional\u003cString\u003e typeOptional) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        ArrayList\u003cString\u003e listOfType \u003d new ArrayList\u003cString\u003e(); // Empty if can be of any type"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        if (typeOptional.isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            String type \u003d typeOptional.get().trim().toLowerCase();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            listOfType.add(type);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            listOfType.add(\"movie\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            listOfType.add(\"tv\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        searchShowsHashMap.put(KEY_TYPE, listOfType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Parses the actors to be searched."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param actorList List of actors to be searched."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private void parseActorToBeSearched(List\u003cString\u003e actorList) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        searchShowsHashMap.put(KEY_ACTOR, actorList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Parses whether the show is watched."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param isWatchedOptional True/Yes if is watched, else, False/No"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private void parseIsWatchedToBeSearched(Optional\u003cString\u003e isWatchedOptional) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        ArrayList\u003cString\u003e listOfIsWatched \u003d new ArrayList\u003cString\u003e(); // Empty if can be any"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        if (isWatchedOptional.isPresent()) { // true or yes || false or no"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            String isWatched \u003d isWatchedOptional.get().trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            listOfIsWatched.add(isWatched);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        searchShowsHashMap.put(KEY_IS_WATCHED, listOfIsWatched);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Parses whether the show is internal."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param isInternalOptional True/Yes if is internal, else, False/No"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private void parseIsInternalToBeSearched(Optional\u003cString\u003e isInternalOptional) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        ArrayList\u003cString\u003e listOfIsInternal \u003d new ArrayList\u003cString\u003e(); // Empty if can be any"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        if (isInternalOptional.isPresent()) { // true or yes || false or no"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            String isInternal \u003d isInternalOptional.get().trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            listOfIsInternal.add(isInternal);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        searchShowsHashMap.put(KEY_IS_INTERNAL, listOfIsInternal);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Return the hash map of the shows to be watched based on the different category."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return Hash map of the shows to be watched based on the different category."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public HashMap\u003cString, List\u003cString\u003e\u003e getSearchShowsHashMap() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return searchShowsHashMap;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 14,
      "michelleykw": 92,
      "heze8": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/parser/SyncCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.api.exceptions.OnlineConnectionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.SyncCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Parses input arguments and creates a new SyncCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class SyncCommandParser implements Parser\u003cSyncCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * and returns an SyncCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public SyncCommand parse(String args) throws ParseException, OnlineConnectionException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return new SyncCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, SyncCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 30
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/parser/WatchCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.WatchCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Parses input arguments and creates a new WatchCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class WatchCommandParser implements Parser\u003cWatchCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the WatchCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * and returns a WatchCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public WatchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return new WatchCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, WatchCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 28
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/parser/WatchListParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.api.exceptions.OnlineConnectionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.SyncCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.WatchCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class WatchListParser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException, OnlineConnectionException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\").toLowerCase();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        case WatchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return new WatchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        case SearchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return new SearchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        case SyncCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return new SyncCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 26,
      "michelleykw": 1,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/AddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 3,
      "-": 117
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Movie;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    Predicate\u003cShow\u003e PREDICATE_SHOW_ALL_SHOWS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns the user prefs\u0027 watchlist file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    Path getWatchListFilePath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Sets the user prefs\u0027 watchlist file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    void setWatchListFilePath(Path watchListFilePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Replaces watchlist data with the data in {@code watchList}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    void setWatchList(ReadOnlyWatchList watchList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /** Returns the WatchList */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    ReadOnlyWatchList getWatchList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns true if a show with the same identity as {@code show} exists in the watchlist."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    boolean hasShow(Show show);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns true if a show with the same name as {@code show} exists in the watchlist."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    boolean hasShowName(Name showName);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns the list of shows that has the same name as the given argument as the current watch list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    List\u003cShow\u003e getShowIfHasName(Name showName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    boolean hasActor(Set\u003cActor\u003e actorSet);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    List\u003cShow\u003e getShowIfHasActor(Set\u003cActor\u003e actorSet);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Deletes the given show."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * The show must exist in the watchlist."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    void deleteShow(Show target);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Adds the given show."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * {@code show} must not already exist in the watchlist."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    void addShow(Show show);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Replaces the given show {@code target} with {@code editedShow}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * {@code target} must exist in the watchlist."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * The show identity of {@code editedShow} must not be the same as another existing show in the watchlist."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    void setShow(Show target, Show editedShow);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /** Returns an unmodifiable view of the filtered show list */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    ObservableList\u003cShow\u003e getFilteredShowList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Updates the filter of the filtered show list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    void updateFilteredShowList(Predicate\u003cShow\u003e predicate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /** Returns an unmodifiable view of the watched show list */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    ObservableList\u003cShow\u003e getWatchedShowList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Updates the watched show list to filter by the given watched status."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    void updateWatchedShowList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /** Returns an unmodifiable view of the search result list */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    ObservableList\u003cShow\u003e getSearchResultList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Updates the filter of the filtered show list to filter by the given {@code searchResult}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws NullPointerException if the {@code searchResult} if null."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void updateSearchResultList(List\u003cShow\u003e searchResult);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Sync a given show."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * {@code syncMovie} must already been retrieved from IMDB database."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void syncMovie(List\u003cMovie\u003e syncMovie);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 53,
      "michelleykw": 17,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Movie;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Represents the in-memory model of the watchlist data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final WatchList watchList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final FilteredList\u003cShow\u003e watchedList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final FilteredList\u003cShow\u003e filteredShows;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final WatchList searchResult \u003d new WatchList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Initializes a ModelManager with the given watchList and userPrefs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ModelManager(ReadOnlyWatchList watchList, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        CollectionUtil.requireAllNonNull(watchList, userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        logger.fine(\"Initializing with watchlist: \" + watchList + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.watchList \u003d new WatchList(watchList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        filteredShows \u003d new FilteredList\u003c\u003e(this.watchList.getShowList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        watchedList \u003d new FilteredList\u003c\u003e(this.watchList.getShowList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        updateWatchedShowList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this(new WatchList(), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Path getWatchListFilePath() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return userPrefs.getWatchListFilePath();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void setWatchListFilePath(Path watchListFilePath) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(watchListFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        userPrefs.setWatchListFilePath(watchListFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d WatchList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void setWatchList(ReadOnlyWatchList watchList) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.watchList.resetData(watchList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ReadOnlyWatchList getWatchList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return watchList;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public boolean hasShow(Show show) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(show);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return watchList.hasShow(show);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public boolean hasShowName(Name showName) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        requireNonNull(showName);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return watchList.hasName(showName);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public List\u003cShow\u003e getShowIfHasName(Name showName) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        requireNonNull(showName);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return watchList.getShowIfHasName(showName);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public boolean hasActor(Set\u003cActor\u003e actorSet) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        requireNonNull(actorSet);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return watchList.hasActor(actorSet);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public List\u003cShow\u003e getShowIfHasActor(Set\u003cActor\u003e actorSet) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        requireNonNull(actorSet);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return watchList.getShowIfHasActor(actorSet);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void deleteShow(Show target) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        watchList.removeShow(target);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void addShow(Show show) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        watchList.addShow(show);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void setShow(Show target, Show editedShow) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedShow);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        watchList.setShow(target, editedShow);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void syncMovie(List\u003cMovie\u003e syncMovie) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Show List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Show} backed by the internal list of"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * {@code versionedWatchList}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ObservableList\u003cShow\u003e getFilteredShowList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return filteredShows;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void updateFilteredShowList(Predicate\u003cShow\u003e predicate) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        filteredShows.setPredicate(predicate);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns an unmodifiable view of the watched list of {@code Show} backed by the internal list of"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * {@code versionedWatchList}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ObservableList\u003cShow\u003e getWatchedShowList() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return watchedList;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void updateWatchedShowList() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        watchedList.setPredicate(show -\u003e show.isWatched().value);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void updateSearchResultList(List\u003cShow\u003e shows) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        searchResult.setShows(shows);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        updateFilteredShowList(PREDICATE_SHOW_ALL_SHOWS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ObservableList\u003cShow\u003e getSearchResultList() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return searchResult.getShowList();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return watchList.equals(other.watchList)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 filteredShows.equals(other.filteredShows);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 79,
      "michelleykw": 28,
      "-": 106
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/ReadOnlyAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    Path getWatchListFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/ReadOnlyWatchList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Unmodifiable view of a watchlist"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public interface ReadOnlyWatchList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns an unmodifiable view of the watchlist."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * This list will not contain any duplicate shows."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    ObservableList\u003cShow\u003e getShowList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 13,
      "heze8": 3
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private Path watchListFilePath \u003d Paths.get(\"data\" , \"watchlist.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        setWatchListFilePath(newUserPrefs.getWatchListFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Path getWatchListFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return watchListFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void setWatchListFilePath(Path watchListFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(watchListFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.watchListFilePath \u003d watchListFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 watchListFilePath.equals(o.watchListFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return Objects.hash(guiSettings, watchListFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + watchListFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 12,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/WatchList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.UniqueShowList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Duplicates are not allowed (by .isSameShow comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class WatchList implements ReadOnlyWatchList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final UniqueShowList shows;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        shows \u003d new UniqueShowList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public WatchList() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Creates an WatchList using the Shows in the {@code toBeCopied}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public WatchList(ReadOnlyWatchList toBeCopied) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Replaces the contents of the watchlist with {@code shows}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * {@code shows} must not contain duplicate shows."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void setShows(List\u003cShow\u003e shows) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.shows.setShows(shows);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Resets the existing data of this {@code WatchList} with {@code newData}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void resetData(ReadOnlyWatchList newData) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        setShows(newData.getShowList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    //// show-level operations"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns true if a show with the same identity as {@code show} exists in the WatchList."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param show The show to be checked if contained in the unique watchlist."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if the show is contained in the unique watchlist."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public boolean hasShow(Show show) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(show);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return shows.contains(show);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns true if a show with the same name as {@code name} exists in the WatchList."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param name The name of the show to be checked."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if the show with the same name as {@code name} exists in the WatchList."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public boolean hasName(Name name) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return shows.hasShowName(name);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns the list of shows that has the same name as {@code showName} as the current watch list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param showName The name of the show to be checked."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return The list of shows that has the same name as {@code showName} as the current watch list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public List\u003cShow\u003e getShowIfHasName(Name showName) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        requireNonNull(showName);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return shows.getShowIfHasName(showName);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns true if a show with any of the actor as that in {@code actorSet} exists in the WatchList."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param actorSet The set of the actors to be checked."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if the show with any of the actor as that in {@code actorSet} exists in the WatchList."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public boolean hasActor(Set\u003cActor\u003e actorSet) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        requireNonNull(actorSet);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return shows.hasActor(actorSet);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns the list of shows that has the same name as {@code actorSet} as the current watch list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param actorSet The set of the actors to be checked."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return The list of shows that has the same name as {@code actorSet} as the current watch list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public List\u003cShow\u003e getShowIfHasActor(Set\u003cActor\u003e actorSet) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        requireNonNull(actorSet);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return shows.getShowIfHasActor(actorSet);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Adds a show to the watchlist."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * The show must not already exist in the watchlist."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param s The show to be added."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void addShow(Show s) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        shows.add(s);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Replaces the given show {@code target} in the list with {@code editedShow}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * {@code target} must exist in the watchlist."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * The show identity of {@code editedShow} must not be the same as another existing show in the watchlist."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void setShow(Show target, Show editedShow) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(editedShow);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        shows.setShow(target, editedShow);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Removes {@code key} from this {@code WatchList}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * {@code key} must exist in the watchlist."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void removeShow(Show key) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        shows.remove(key);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return shows.asUnmodifiableObservableList().size() + \" shows\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ObservableList\u003cShow\u003e getShowList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return shows.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                || (other instanceof WatchList // instanceof handles nulls"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 shows.equals(((WatchList) other).shows));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return shows.hashCode();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 120,
      "michelleykw": 45
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/actor/Actor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model.actor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "//import seedu.ezwatchlist.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Represents an Actor in a show in the watchlist."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidActorName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class Actor {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            \"Actor names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * The first character of the actor name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public final String actorName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Actor(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heze8"
        },
        "content": "        //AppUtil.checkArgument(isValidActorName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        actorName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static boolean isValidActorName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public String getActorName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return actorName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return actorName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                || (other instanceof Actor // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 actorName.equals(((Actor) other).actorName)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return actorName.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 56,
      "michelleykw": 3,
      "heze8": 3
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/person/Address.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        AppUtil.checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 3,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/person/Email.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        AppUtil.checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 3,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/person/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        AppUtil.checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 3,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/person/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 2,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        CollectionUtil.requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 4,
      "-": 115
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/person/Phone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        AppUtil.checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 3,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/person/UniquePersonList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        CollectionUtil.requireAllNonNull(persons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 6,
      "-": 131
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/person/exceptions/DuplicatePersonException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DuplicatePersonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicatePersonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/person/exceptions/PersonNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/show/Date.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static java.util.Objects.isNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Represents a Show\u0027s date of release in the watchlist."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    // For now the date will be a string, since that is what the API returns it as."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Dates can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * The first character of the date must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public Date() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        value \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Constructs an {@code Date}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heze8"
        },
        "content": "        //instead of having constraints perhaps could check if the object is null in the creation"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heze8"
        },
        "content": "        if (isNull(date)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": "            date \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heze8"
        },
        "content": "        //requireNonNull(date);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heze8"
        },
        "content": "        //AppUtil.checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        value \u003d date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 value.equals(((Date) other).value)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 52,
      "michelleykw": 4,
      "heze8": 7
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/show/Description.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Represents a Show\u0027s description in the watchlist."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            \"Descriptions should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * The first character of the show\u0027s description must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public final String fullDescription;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public Description() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        fullDescription \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heze8"
        },
        "content": "        //AppUtil.checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        fullDescription \u003d description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return fullDescription;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 fullDescription.equals(((Description) other).fullDescription)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return fullDescription.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 54,
      "michelleykw": 4,
      "heze8": 1
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/show/Episode.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Represents an Episode of a TvShow in the watchlist."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class Episode {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final int episodeNum;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Episode(Name name, int episodeNum) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.episodeNum \u003d episodeNum;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int getEpisodeNum() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return episodeNum;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 22,
      "heze8": 1
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/show/IsWatched.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Represents a Show\u0027s watched or not field in the watchlist."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Guarantees: is valid as declared in {@link #isValidIsWatched(boolean)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class IsWatched {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            \"Shows IsWatched should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * The first character of the show must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public final boolean value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public IsWatched() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        value \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param isWatched A valid boolean."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public IsWatched(boolean isWatched) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(isWatched);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        checkArgument(isValidIsWatched(isWatched), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        value \u003d isWatched;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns true if a given boolean is a valid isWatched."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static boolean isValidIsWatched(boolean test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public boolean getIsWatchedBoolean() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return Boolean.toString(value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                || (other instanceof IsWatched // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((IsWatched) other).value); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return value ? 1 : 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 59,
      "michelleykw": 7
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/show/Movie.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Represents a Movie in the watchlist."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class Movie extends Show {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Movie(Name name, Description description, IsWatched isWatched,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                 Date dateOfRelease, RunningTime runningTime, Set\u003cActor\u003e actors) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        super(name, description, isWatched, dateOfRelease, runningTime, actors);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        super.setType(\"Movie\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 18
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/show/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Represents a Show\u0027s name in the watchlist."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"na\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            \"Show names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * The first character of the show must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public final String showName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public Name() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        showName \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        //requireNonNull(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        //AppUtil.checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        showName \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return showName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return showName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 showName.equals(((Name) other).showName)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return showName.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 54,
      "michelleykw": 10,
      "tswuxia": 1
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/show/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cShow\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public boolean test(Show show) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(show.getName().showName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 29,
      "heze8": 2
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/show/Poster.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javax.imageio.IIOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.embed.swing.SwingFXUtils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.api.ImageRetrieval;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": " * Represents a Show\u0027s poster in the watchlist."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "public class Poster {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private static final String PLACEHOLDER_IMAGE \u003d \"/images/poster-placeholder.png\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private static final String ROOT_LOCATION \u003d ImageRetrieval.IMAGE_CACHE_LOCATION + File.separator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private Image image;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private String imagePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Constructs a {@code Poster}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public Poster() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heze8"
        },
        "content": "        imagePath \u003d PLACEHOLDER_IMAGE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Constructs a {@code Poster} with a path given."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param path the path of the image in the save location."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public Poster(String path) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": "        imagePath \u003d path;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public String getImagePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return imagePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * returns the image of the Poster."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public Image getImage() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heze8"
        },
        "content": "            String url \u003d ROOT_LOCATION + imagePath;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heze8"
        },
        "content": "            File file \u003d new File(url);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heze8"
        },
        "content": "            System.out.println(\"File path in Poster is :\" + url);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            image \u003d SwingFXUtils.toFXImage(ImageIO.read(file), null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "heze8"
        },
        "content": "            if (image \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "heze8"
        },
        "content": "                throw new NullPointerException(\"image is null in poster\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return image;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        } catch (IIOException i) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            System.err.print(i.getMessage() + \" in Poster\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return new Image(PLACEHOLDER_IMAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            System.out.println(\"Cause: \" + e.getCause() + \"Message: \" + e.getMessage() + \" from Poster and imagePath \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return new Image(PLACEHOLDER_IMAGE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 17,
      "heze8": 46
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/show/RunningTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Represents a Show\u0027s Running Time in the watchlist."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class RunningTime {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    // For now the running time will be an integer, since that is what the API returns it as."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            \"Running time can take any integer values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS2 \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "            \"Running time can take only positive values or zero.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public final int value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public RunningTime() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        value \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Constructs an {@code RunningTime}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param runningTime A valid running time."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public RunningTime(int runningTime) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(runningTime);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        checkArgument(isValidRunningTime(runningTime), MESSAGE_CONSTRAINTS2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        value \u003d runningTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns true if a given integer is a valid running time."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static boolean isValidRunningTime(int test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return test \u003e\u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return String.valueOf(value);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                || (other instanceof RunningTime // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((RunningTime) other).value); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 48,
      "wongchuankai": 3,
      "michelleykw": 4,
      "heze8": 2
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/show/Show.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Represents a Show in the watchlist."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class Show {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    //identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final Date dateOfRelease;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final IsWatched isWatched;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    //data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final RunningTime runningTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final Set\u003cActor\u003e actors \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private Poster poster;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Show(Name name, Description description, IsWatched isWatched, Date dateOfRelease,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                RunningTime runningTime, Set\u003cActor\u003e actors) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heze8"
        },
        "content": "        this.poster \u003d new Poster();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        CollectionUtil.requireAllNonNull(name, description, isWatched, dateOfRelease, runningTime, actors);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.isWatched \u003d isWatched;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.dateOfRelease \u003d dateOfRelease;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.runningTime \u003d runningTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.actors.addAll(actors);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public void setPoster(Poster poster) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heze8"
        },
        "content": "        this.poster \u003d poster;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public Poster getPoster() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return poster;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void setType(String type) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Date getDateOfRelease() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return dateOfRelease;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public IsWatched isWatched() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return isWatched;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public RunningTime getRunningTime() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return runningTime;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns an immutable actor set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Set\u003cActor\u003e getActors() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return Collections.unmodifiableSet(actors);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns true if both Shows of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * This defines a weaker notion of equality between two shows."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public boolean isSameShow(Show otherShow) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (otherShow \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return otherShow !\u003d null"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 otherShow.getName().equals(getName())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 (otherShow.getDateOfRelease().equals(getDateOfRelease()) || otherShow.isWatched() \u003d\u003d (isWatched()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Return true if the other show has name similar to the current show."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param showToBeSearched Show to be compare to this show."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if the other show has name similar to the current show."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public boolean hasNameWithWord(Show showToBeSearched) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        if (isSameName(showToBeSearched)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            return this.getName().getName().toLowerCase().contains(showToBeSearched.getName().getName().toLowerCase());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Checks if two shows have the same name."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param otherShow other show to be checked."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @return boolean whether the 2 shows are the same."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public boolean isSameName(Show otherShow) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        if (otherShow \u003d\u003d this) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return otherShow !\u003d null \u0026\u0026 otherShow.getName().equals(getName());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Return true if the other show has actor similar to the current show."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param showToBeSearched Show to be compare to this show."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if the other show has name similar to the current show."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public boolean hasActorWithName(Show showToBeSearched) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        Set\u003cActor\u003e actorSearchedSet \u003d showToBeSearched.getActors();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        for (Actor actorSearched : actorSearchedSet) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            Set\u003cActor\u003e actorDataSet \u003d this.getActors();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            for (Actor actorData : actorDataSet) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                if (actorData.getActorName().toLowerCase().contains(actorSearched.getActorName().toLowerCase())) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns true if both shows have the same identity and data fields."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * This defines a stronger notion of equality between two shows."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!(other instanceof TvShow || other instanceof Movie || other instanceof Show)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show otherShow \u003d (Show) other;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return otherShow.getName().equals(getName())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 otherShow.getType() \u003d\u003d getType()"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 otherShow.getDateOfRelease().equals(getDateOfRelease())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 (otherShow.isWatched() \u003d\u003d isWatched())"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 otherShow.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 otherShow.getRunningTime().equals(getRunningTime())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 otherShow.getActors().equals(getActors());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return Objects.hash(name, type, dateOfRelease, isWatched, description, runningTime, actors);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .append(\" Date of Release: \")"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .append(getDateOfRelease())"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .append(\" Running Time: \")"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .append(getRunningTime())"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .append(\" Actors: \");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        getActors().forEach(builder::append);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 133,
      "wongchuankai": 1,
      "michelleykw": 42,
      "tswuxia": 2,
      "heze8": 10
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/show/TvSeason.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Represents a TvSeason of a TvShow in the watchlist."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class TvSeason {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final int seasonNum;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final int totalNumOfEpisodes;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final ArrayList\u003cEpisode\u003e episodes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public TvSeason(int seasonNum, int totalNumOfEpisodes, ArrayList\u003cEpisode\u003e episodes) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.seasonNum \u003d seasonNum;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.totalNumOfEpisodes \u003d totalNumOfEpisodes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.episodes \u003d episodes;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int getSeasonNum() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return seasonNum;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int getTotalNumOfEpisodes() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return totalNumOfEpisodes;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ArrayList\u003cEpisode\u003e getEpisodes() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return episodes;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 31,
      "heze8": 1
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/show/TvShow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Represents a TvShow in the watchlist."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class TvShow extends Show {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private static final Image imageOfShow \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private int numOfEpisodesWatched;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private ArrayList\u003cTvSeason\u003e tvSeasons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final int totalNumOfEpisodes;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public TvShow(Name name, Description description, IsWatched isWatched,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                  Date dateOfRelease, RunningTime runningTime, Set\u003cActor\u003e actors,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                  int numOfEpisodesWatched, int totalNumOfEpisodes, ArrayList\u003cTvSeason\u003e tvSeasons) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        super(name, description, isWatched, dateOfRelease, runningTime, actors);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.numOfEpisodesWatched \u003d numOfEpisodesWatched;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.totalNumOfEpisodes \u003d totalNumOfEpisodes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.tvSeasons \u003d tvSeasons;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        super.setType(\"Tv Show\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int getNumOfEpisodesWatched() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return numOfEpisodesWatched;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ArrayList\u003cTvSeason\u003e getTvSeasons() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return tvSeasons;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int getTotalNumOfEpisodes() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return totalNumOfEpisodes;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 40,
      "heze8": 2
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/show/UniqueShowList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.exceptions.DuplicateShowException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.exceptions.ShowNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * A list of shows that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * A show is considered unique by comparing using {@code show#isSameShow(Show)}. As such, adding and updating of"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * shows uses Show#isSameShow(show) for equality so as to ensure that the show being added or updated is"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * unique in terms of identity in the UniqueShowList. However, the removal of a show uses Show#equals(Object) so"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * as to ensure that the show with exactly the same fields will be removed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * @see Show#isSameShow(Show)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class UniqueShowList implements Iterable\u003cShow\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final ObservableList\u003cShow\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final ObservableList\u003cShow\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns true if the list contains an equivalent show as the given argument."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param toCheck The show to be checked if present."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if the show to present in the internal list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public boolean contains(Show toCheck) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameShow);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns true if the list contains an equivalent show name as the given argument."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param showName Name of show to be searched."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if a show has the same name as showName."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public boolean hasShowName(Name showName) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        requireNonNull(showName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        Show show \u003d new Show(showName, new Description(), new IsWatched(false), new Date(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                new RunningTime(), new HashSet\u003c\u003e(new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return internalList.stream().anyMatch(show::isSameName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns the list of shows that has the same name as showName."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param showName Name of show to be searched."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return List of Show that has the same name as showName."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public List\u003cShow\u003e getShowIfHasName(Name showName) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        requireNonNull(showName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        Show currentShow \u003d new Show(showName, new Description(), new IsWatched(), new Date(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                new RunningTime(), new HashSet\u003c\u003e(new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return internalList.stream().filter(show -\u003e show.hasNameWithWord(currentShow)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns true if the list contains any of the actors in actorSet."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param actorSet Set of actors to be searched."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return True if a show has the same name as showName."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public boolean hasActor(Set\u003cActor\u003e actorSet) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        requireNonNull(actorSet);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        Show show \u003d new Show(new Name(), new Description(), new IsWatched(), new Date(), new RunningTime(), actorSet);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return internalList.stream().anyMatch(show::hasActorWithName);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Returns the list of shows that has any of the actor in actorSet."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param actorSet Set of Actor(s) to be searched."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @return List of Show that has the actor."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public List\u003cShow\u003e getShowIfHasActor(Set\u003cActor\u003e actorSet) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        requireNonNull(actorSet);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        Show currentShow \u003d new Show(new Name(), new Description(), new IsWatched(), new Date(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                new RunningTime(), actorSet);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        return internalList.stream().filter(show -\u003e show.hasActorWithName(currentShow)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Adds a show to the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * The show must not already exist in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * @param toAdd Show to be added."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void add(Show toAdd) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new DuplicateShowException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Replaces the show {@code target} in the list with {@code editedShow}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * The show identity of {@code editedShow} must not be the same as another existing show in the list."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void setShow(Show target, Show editedShow) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedShow);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new ShowNotFoundException();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!target.isSameShow(editedShow) \u0026\u0026 contains(editedShow)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new DuplicateShowException();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        internalList.set(index, editedShow);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Removes the equivalent show from the list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * The show must exist in the list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void remove(Show toRemove) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new ShowNotFoundException();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void setShows(UniqueShowList replacement) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Replaces the contents of this list with {@code shows}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * {@code shows} must not contain duplicate shows."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void setShows(List\u003cShow\u003e shows) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        CollectionUtil.requireAllNonNull(shows);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "heze8"
        },
        "content": "        //currently remove the check if shows are unique"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "heze8"
        },
        "content": "        //if (!showsAreUnique(shows)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "heze8"
        },
        "content": "        //throw new DuplicateShowException();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "heze8"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        internalList.setAll(shows);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ObservableList\u003cShow\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Iterator\u003cShow\u003e iterator() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                || (other instanceof UniqueShowList // instanceof handles nulls"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueShowList) other).internalList));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns true if {@code shows} contains only unique shows."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private boolean showsAreUnique(List\u003cShow\u003e shows) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        for (int i \u003d 0; i \u003c shows.size() - 1; i++) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            for (int j \u003d i + 1; j \u003c shows.size(); j++) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                if (shows.get(i).isSameShow(shows.get(j))) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 132,
      "michelleykw": 57,
      "heze8": 4
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/show/exceptions/DuplicateShowException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.model.show.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Signals that the operation will result in duplicate Shows (Shows are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class DuplicateShowException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public DuplicateShowException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        super(\"Operation would result in duplicate shows\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 10,
      "heze8": 1
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/show/exceptions/ShowNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.model.show.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Signals that the operation is unable to find the specified show."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class ShowNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 6,
      "heze8": 1
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        AppUtil.checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 3,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyWatchList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.WatchList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.IsWatched;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.RunningTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Contains utility methods for populating {@code WatchList} with sample data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static Show[] getSampleShows() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return new Show[] {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            new Show(new Name(\"Joker\"), new Description(\"In Gotham City, mentally-troubled comedian Arthur Fleck\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    + \" embarks on a downward-spiral of social revolution and bloody crime. This path brings\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    + \" him face-to-face with his infamous alter-ego: \\\"The Joker\\\".\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    new IsWatched(false), new Date(\"4 October 2019\"), new RunningTime(122),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    getActorSet(\"Joaquin Phoenix, Robert De Niro\"))"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static ReadOnlyWatchList getSampleWatchList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        WatchList sampleWl \u003d new WatchList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        for (Show sampleShow : getSampleShows()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            sampleWl.addShow(sampleShow);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return sampleWl;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns an Actor set containing the list of strings given."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static Set\u003cActor\u003e getActorSet(String... strings) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .map(Actor::new)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 26,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/spellcheck/SpellCheck.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.spellcheck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.spellcheck.exceptions.SpellCheckException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": " * Spellcheck class is used to suggest words based on comparisons with the word dictionary."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "public class SpellCheck {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public static final int KEYBOARD_DISTANCE_SORT \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private WordDictionary dict;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private boolean isCaseSensitive;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private int errorSensitivity \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public SpellCheck() throws IOException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "        dict \u003d new WordDictionary();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heze8"
        },
        "content": "        isCaseSensitive \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public void setErrorSensitivity(int errSensitivity) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": "        if (errSensitivity \u003c 0) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heze8"
        },
        "content": "            errorSensitivity \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heze8"
        },
        "content": "            this.errorSensitivity \u003d errorSensitivity;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public void setIsCaseSensitive(boolean bool) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heze8"
        },
        "content": "        isCaseSensitive \u003d bool;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Suggests word from a given string."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param word user input."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @return suggested word."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws SpellCheckException if there is a spelling mistake."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public String suggest(String word) throws SpellCheckException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heze8"
        },
        "content": "        dict.updateWordList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heze8"
        },
        "content": "        Iterator\u003cString\u003e it \u003d dict.getWordList().iterator();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heze8"
        },
        "content": "        PriorityQueue\u003cPair\u003cString, Integer\u003e\u003e suggestions \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "heze8"
        },
        "content": "                new PriorityQueue\u003c\u003e(Comparator.comparingInt(Pair::getValue));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "heze8"
        },
        "content": "        while (it.hasNext()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "heze8"
        },
        "content": "            String s \u003d it.next();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "heze8"
        },
        "content": "            int led \u003d computeLedDistance(word, s);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "heze8"
        },
        "content": "            if (led \u003c\u003d errorSensitivity) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "heze8"
        },
        "content": "                Pair\u003cString, Integer\u003e pair \u003d new Pair(s, led);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "heze8"
        },
        "content": "                suggestions.add(pair);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "heze8"
        },
        "content": "        Pair\u003cString, Integer\u003e head \u003d suggestions.peek();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "heze8"
        },
        "content": "        if (head !\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return head.getKey();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "heze8"
        },
        "content": "            throw new SpellCheckException(\"Can\u0027t find any suggestions\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Returns the edit distance needed to convert string s1 to s2"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * If returns 0, the strings are same"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * If returns 1, that means either one character is added, removed or replaced"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "heze8"
        },
        "content": "    //solution below adapted from https://bakedcircuits.wordpress.com/2013/08/10/simple-spell-checker-in-java/"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private int computeLedDistance(String s1, String s2) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "heze8"
        },
        "content": "        if (isCaseSensitive) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "heze8"
        },
        "content": "            s1 \u003d s1.toLowerCase();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "heze8"
        },
        "content": "            s2 \u003d s2.toLowerCase();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "heze8"
        },
        "content": "        int[] ledCosts \u003d new int[s2.length() + 1];"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "heze8"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d s1.length(); i++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "heze8"
        },
        "content": "            int lastValue \u003d i;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "heze8"
        },
        "content": "            for (int j \u003d 0; j \u003c\u003d s2.length(); j++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "heze8"
        },
        "content": "                if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "heze8"
        },
        "content": "                    ledCosts[j] \u003d j;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "heze8"
        },
        "content": "                } else if (j \u003e 0) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "heze8"
        },
        "content": "                    int newValue \u003d ledCosts[j - 1];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "heze8"
        },
        "content": "                    if (s1.charAt(i - 1) !\u003d s2.charAt(j - 1)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "heze8"
        },
        "content": "                        newValue \u003d Math.min(Math.min(newValue, lastValue), ledCosts[j]) + 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "heze8"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "heze8"
        },
        "content": "                    ledCosts[j - 1] \u003d lastValue;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "heze8"
        },
        "content": "                    lastValue \u003d newValue;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "heze8"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "heze8"
        },
        "content": "            if (i \u003e 0) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "heze8"
        },
        "content": "                ledCosts[s2.length()] \u003d lastValue;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return ledCosts[s2.length()];"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 6,
      "heze8": 100
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/spellcheck/WordDictionary.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.spellcheck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.nio.file.FileSystems;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": " * Represents a internal dynamic defined corpus of correct words used in the spell check class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "public class WordDictionary {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private static final List\u003cString\u003e CORPUS \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private static final Path ROOT_FILEPATH \u003d FileSystems.getDefault().getPath(\"\").toAbsolutePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private static final String GLOSSARY_FILEPATH \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            ROOT_FILEPATH + File.separator + \"data\" + File.separator + \"corpus.txt\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private HashSet\u003cString\u003e wordList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public WordDictionary() throws IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heze8"
        },
        "content": "        wordList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": "        File file \u003d new File(GLOSSARY_FILEPATH);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heze8"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heze8"
        },
        "content": "            File parent \u003d file.getParentFile();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heze8"
        },
        "content": "            parent.mkdirs();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": "            initializeWordList(file);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heze8"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(new FileReader(file));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heze8"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heze8"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heze8"
        },
        "content": "                wordList.add(line);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heze8"
        },
        "content": "            //loadFromList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heze8"
        },
        "content": "            br.close();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private void initializeWordList(File file) throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heze8"
        },
        "content": "        file.createNewFile();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "heze8"
        },
        "content": "        Files.write(Paths.get(GLOSSARY_FILEPATH), CORPUS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public HashSet\u003cString\u003e getWordList() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return wordList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public void updateWordList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "heze8"
        },
        "content": "        //loadFromList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 4,
      "heze8": 56
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/spellcheck/exceptions/SpellCheckException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.spellcheck.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": " * Represents an error when spell check fails to suggest a spelling change."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "public class SpellCheckException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public SpellCheckException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "heze8": 13
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/storage/AddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Represents a storage for {@link AddressBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 5,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/storage/JsonAdaptedActor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Jackson-friendly version of {@link Actor}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "class JsonAdaptedActor {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final String actorName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Constructs a {@code JsonAdaptedActor} with the given {@code actorName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public JsonAdaptedActor(String actorName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.actorName \u003d actorName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Converts a given {@code Actor} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public JsonAdaptedActor(Actor source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        actorName \u003d source.actorName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public String getActorName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return actorName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Converts this Jackson-friendly adapted actor object into the model\u0027s {@code Actor} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted actor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Actor toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!Actor.isValidActorName(actorName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new IllegalValueException(Actor.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return new Actor(actorName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 48
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/storage/JsonAdaptedPerson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 8,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/storage/JsonAdaptedShow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.IsWatched;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Poster;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.RunningTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Jackson-friendly version of {@link Show}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "class JsonAdaptedShow {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Show\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final String dateOfRelease;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final boolean isWatched;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final int runningTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final List\u003cJsonAdaptedActor\u003e actors \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final String poster;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Constructs a {@code JsonAdaptedShow} with the given show details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public JsonAdaptedShow(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                           @JsonProperty(\"type\") String type,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                           @JsonProperty(\"dateOfRelease\") String dateOfRelease,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                           @JsonProperty(\"watched\") boolean isWatched,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                           @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                           @JsonProperty(\"runningTime\") int runningTime,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                           @JsonProperty(\"actors\") List\u003cJsonAdaptedActor\u003e actors,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                           @JsonProperty(\"poster\") String poster) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.dateOfRelease \u003d dateOfRelease;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.isWatched \u003d isWatched;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.runningTime \u003d runningTime;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (actors !\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            this.actors.addAll(actors);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.poster \u003d poster;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Converts a given {@code Show} into this class for Jackson use."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public JsonAdaptedShow(Show source) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        name \u003d source.getName().showName;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        type \u003d source.getType();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        dateOfRelease \u003d source.getDateOfRelease().value;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        isWatched \u003d source.isWatched().value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        description \u003d source.getDescription().fullDescription;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        runningTime \u003d source.getRunningTime().value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        actors.addAll(source.getActors().stream()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .map(JsonAdaptedActor::new)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        poster \u003d source.getPoster().getImagePath();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Converts this Jackson-friendly adapted show object into the model\u0027s {@code Show} object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted show."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Show toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        final List\u003cActor\u003e showActors \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        for (JsonAdaptedActor actor : actors) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            showActors.add(actor.toModelType());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        if (runningTime \u003c 0) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new IllegalValueException(String.format(RunningTime.MESSAGE_CONSTRAINTS2));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (dateOfRelease \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!Date.isValidDate(dateOfRelease)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        final Date modelDateOfRelease \u003d new Date(dateOfRelease);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!IsWatched.isValidIsWatched(isWatched)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new IllegalValueException(IsWatched.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        final IsWatched modelIsWatched \u003d new IsWatched(isWatched);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (runningTime \u003d\u003d 0) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, RunningTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!RunningTime.isValidRunningTime(runningTime)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        final RunningTime modelRunningTime \u003d new RunningTime(runningTime);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        final Set\u003cActor\u003e modelActors \u003d new HashSet\u003c\u003e(showActors);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show show \u003d new Show(modelName, modelDescription, modelIsWatched,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                modelDateOfRelease, modelRunningTime, modelActors);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        show.setType(type);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        show.setPoster(new Poster(poster));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return show;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 135,
      "wongchuankai": 5
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/storage/JsonAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/storage/JsonAddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 7,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/storage/JsonSerializableAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 5,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/storage/JsonSerializableWatchList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyWatchList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.WatchList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * An Immutable WatchList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "@JsonRootName(value \u003d \"watchlist\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "class JsonSerializableWatchList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SHOW \u003d \"Show list contains duplicate show(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final List\u003cJsonAdaptedShow\u003e shows \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Constructs a {@code JsonSerializableWatchList} with the given shows."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public JsonSerializableWatchList(@JsonProperty(\"shows\") List\u003cJsonAdaptedShow\u003e shows) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.shows.addAll(shows);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Converts a given {@code ReadOnlyWatchList} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableWatchList}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public JsonSerializableWatchList(ReadOnlyWatchList source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        shows.addAll(source.getShowList().stream().map(JsonAdaptedShow::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Converts this watchlist into the model\u0027s {@code WatchList} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public WatchList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        WatchList watchList \u003d new WatchList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        for (JsonAdaptedShow jsonAdaptedShow : shows) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            Show show \u003d jsonAdaptedShow.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            if (watchList.hasShow(show)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_SHOW);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            watchList.addShow(show);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return watchList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 61
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/storage/JsonWatchListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyWatchList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * A class to access WatchList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class JsonWatchListStorage implements WatchListStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonWatchListStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public JsonWatchListStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Path getWatchListFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Optional\u003cReadOnlyWatchList\u003e readWatchList() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return readWatchList(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Similar to {@link #readWatchList()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Optional\u003cReadOnlyWatchList\u003e readWatchList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Optional\u003cJsonSerializableWatchList\u003e jsonWatchList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                filePath, JsonSerializableWatchList.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!jsonWatchList.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return Optional.of(jsonWatchList.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void saveWatchList(ReadOnlyWatchList watchList) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        saveWatchList(watchList, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Similar to {@link #saveWatchList(ReadOnlyWatchList)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void saveWatchList(ReadOnlyWatchList watchList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(watchList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableWatchList(watchList), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 81
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyWatchList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public interface Storage extends WatchListStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    Path getWatchListFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    Optional\u003cReadOnlyWatchList\u003e readWatchList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    void saveWatchList(ReadOnlyWatchList watchList) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 9,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyWatchList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Manages storage of WatchList data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private WatchListStorage watchListStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public StorageManager(WatchListStorage watchListStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.watchListStorage \u003d watchListStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d WatchList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Path getWatchListFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return watchListStorage.getWatchListFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Optional\u003cReadOnlyWatchList\u003e readWatchList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return readWatchList(watchListStorage.getWatchListFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public Optional\u003cReadOnlyWatchList\u003e readWatchList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return watchListStorage.readWatchList(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void saveWatchList(ReadOnlyWatchList watchList) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        saveWatchList(watchList, watchListStorage.getWatchListFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void saveWatchList(ReadOnlyWatchList watchList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        watchListStorage.saveWatchList(watchList, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 21,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/storage/WatchListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyWatchList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.WatchList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Represents a storage for {@link WatchList}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public interface WatchListStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    Path getWatchListFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Returns WatchList data as a {@link ReadOnlyWatchList}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    Optional\u003cReadOnlyWatchList\u003e readWatchList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @see #getWatchListFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    Optional\u003cReadOnlyWatchList\u003e readWatchList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Saves the given {@link ReadOnlyWatchList} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @param watchList cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    void saveWatchList(ReadOnlyWatchList watchList) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @see #saveWatchList(ReadOnlyWatchList)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    void saveWatchList(ReadOnlyWatchList watchList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 46
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.api.exceptions.OnlineConnectionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        } catch (CommandException | ParseException | OnlineConnectionException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         * @see Logic#execute(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException, OnlineConnectionException;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 9,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    public static final String USERGUIDE_URL \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \"https://github.com/AY1920S1-CS2103T-F13-4/main/blob/master/docs/UserGuide.adoc\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tswuxia": 2,
      "heze8": 2,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.api.exceptions.OnlineConnectionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private ShowListPanel showListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private WatchedPanel watchedPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private SearchPanel searchPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private StatisticsPanel statisticsPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private StackPane resultDisplayPlaceHolder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private StackPane contentPanelPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        this.primaryStage.setTitle(\"Ezwatchlist\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     * Fills up all the placeholders of main window."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        showListPanel \u003d new ShowListPanel(logic.getFilteredShowList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        watchedPanel \u003d new WatchedPanel(logic.getWatchedList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        searchPanel \u003d new SearchPanel(logic.getSearchResultList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        statisticsPanel \u003d new StatisticsPanel(/*logic.getWatchedList()*/);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        contentPanelPlaceholder.getChildren().add(showListPanel.getRoot());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        resultDisplayPlaceHolder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ShowListPanel getShowListPanel() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return showListPanel;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private CommandResult executeCommand(String commandText)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throws CommandException, ParseException, OnlineConnectionException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            //somehow use this code to display list of search results???"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            //showListPanel \u003d new ShowListPanel(logic.getSearchResultList());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            //contentPanelPlaceholder.getChildren().add(showListPanel.getRoot());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        } catch (CommandException | ParseException | OnlineConnectionException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     * populate the contentPanel with watchlist content"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    public void goToWatchlist() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        contentPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        contentPanelPlaceholder.getChildren().add(showListPanel.getRoot());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     * populate the contentPanel with watched list content"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    public void goToWatched() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        contentPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        contentPanelPlaceholder.getChildren().add(watchedPanel.getRoot());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     * populate the contentPanel with search content"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    public void goToSearch() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        contentPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        contentPanelPlaceholder.getChildren().add(searchPanel.getRoot());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     * populate the contentPanel with statistics content"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    public void goToStatistics() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        contentPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        contentPanelPlaceholder.getChildren().add(statisticsPanel.getRoot());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 26,
      "tswuxia": 41,
      "michelleykw": 1,
      "-": 166
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/ui/NavigationBar.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * A ui for the navigation bar that is displayed at the side of the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "public class NavigationBar extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private static final String FXML \u003d \"NavigationBar.fxml\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    public NavigationBar() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 4,
      "tswuxia": 11
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/ui/PersonCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 2,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/ui/SearchPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * A ui for the search panel that is displayed at the side of the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "public class SearchPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private static final String FXML \u003d \"SearchPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(SearchPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private ListView\u003cShow\u003e searchListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public SearchPanel(ObservableList\u003cShow\u003e searchList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        searchListView.setItems(searchList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        searchListView.setCellFactory(listView -\u003e new SearchListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Show} using a {@code ShowCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    class SearchListViewCell extends ListCell\u003cShow\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        protected void updateItem(Show show, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            super.updateItem(show, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            if (empty || show \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                setGraphic(new ShowCard(show, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 5,
      "tswuxia": 8,
      "michelleykw": 32
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/ui/ShowCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.scene.control.CheckBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.show.Poster;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * An UI component that displays information of a {@code Show}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class ShowCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private static final String FXML \u003d \"ShowListCard.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public final Show show;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private Label type;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private Label dateOfRelease;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private Label runningTime;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private HBox actors;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private CheckBox watched;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private ImageView poster;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ShowCard(Show show, int displayedIndex) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.show \u003d show;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        name.setText(show.getName().showName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        type.setText(show.getType());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        dateOfRelease.setText(show.getDateOfRelease().value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        description.setText(show.getDescription().fullDescription);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        runningTime.setText(Integer.toString(show.getRunningTime().value));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "heze8"
        },
        "content": "        Poster poster \u003d show.getPoster();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "heze8"
        },
        "content": "        Image image \u003d poster.getImage();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "heze8"
        },
        "content": "        this.poster.setImage(image);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        show.getActors().stream()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .sorted(Comparator.comparing(actor -\u003e actor.actorName))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .forEach(actor -\u003e actors.getChildren().add(new Label(actor.actorName)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //sets the checkbox selected value to be equal to the watched value of the show"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        watched.setSelected(show.isWatched().value);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        watched.selectedProperty().addListener(new NonChangeableCheckBox());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (!(other instanceof ShowCard)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        ShowCard card \u003d (ShowCard) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u0026\u0026 show.equals(card.show);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * This class prevents the user from marking the checkbox by clicking"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @author AxxG \"How to make checkbox or combobox readonly in JavaFX\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    class NonChangeableCheckBox implements ChangeListener\u003cBoolean\u003e {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void changed(ObservableValue\u003c? extends Boolean\u003e ov, Boolean oldVal, Boolean newVal) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            watched.setSelected(show.isWatched().value);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 93,
      "tswuxia": 8,
      "heze8": 6
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/ui/ShowListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Panel containing the list of shows."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class ShowListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private static final String FXML \u003d \"ShowListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ShowListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private ListView\u003cShow\u003e showListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ShowListPanel(ObservableList\u003cShow\u003e showList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        showListView.setItems(showList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        showListView.setCellFactory(listView -\u003e new ShowListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Show} using a {@code ShowCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    class ShowListViewCell extends ListCell\u003cShow\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        protected void updateItem(Show show, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            super.updateItem(show, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            if (empty || show \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                setGraphic(new ShowCard(show, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 46
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/ui/StatisticsPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "package seedu.ezwatchlist.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * An UI for the statistics panel."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "public class StatisticsPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private static final String FXML \u003d \"StatisticsPanel.fxml\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    public StatisticsPanel() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 3,
      "tswuxia": 12
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/applogo.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tswuxia": 1,
      "heze8": 5,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    protected void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    protected static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tswuxia": 2,
      "heze8": 2,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/ezwatchlist/ui/WatchedPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Panel containing the list of shows."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "public class WatchedPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    private static final String FXML \u003d \"WatchedPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(WatchedPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private ListView\u003cShow\u003e watchedListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public WatchedPanel(ObservableList\u003cShow\u003e showList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        watchedListView.setItems(showList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        watchedListView.setCellFactory(listView -\u003e new WatchedListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Show} using a {@code ShowCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    class WatchedListViewCell extends ListCell\u003cShow\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        protected void updateItem(Show show, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            super.updateItem(show, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            if (empty || show \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                setGraphic(new ShowCard(show, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 36,
      "tswuxia": 11
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "   \u003cHBox\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003cStackPane styleClass\u003d\"stack-pane\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "               \u003cButton alignment\u003d\"BASELINE_RIGHT\" contentDisplay\u003d\"RIGHT\" mnemonicParsing\u003d\"false\" nodeOrientation\u003d\"RIGHT_TO_LEFT\" onAction\u003d\"#handleCommandEntered\" text\u003d\"Go!\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                  \u003cStackPane.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                     \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                  \u003c/StackPane.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "   \u003c/HBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "tswuxia": 18,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ".v-box {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "#filterField, #showListPanel, #showWebpage {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 1,
      "tswuxia": 4,
      "-": 351
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Address App\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                \u003cHBox VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                        \u003cStackPane styleClass\u003d\"stack-pane\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                \u003cVBox styleClass\u003d\"v-box\" StackPane.alignment\u003d\"CENTER\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                        \u003cVBox layoutX\u003d\"10.0\" layoutY\u003d\"144.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                        \u003cButton fx:id\u003d\"watchlistButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#goToWatchlist\" text\u003d\"Watchlist\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                        \u003cVBox VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                        \u003cButton fx:id\u003d\"watchedButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#goToWatched\" prefWidth\u003d\"108.0\" text\u003d\"Watched\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                        \u003cVBox layoutX\u003d\"10.0\" layoutY\u003d\"111.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                        \u003cButton fx:id\u003d\"searchButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#goToSearch\" prefWidth\u003d\"108.0\" text\u003d\"Search\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                        \u003cVBox layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                        \u003cButton fx:id\u003d\"statisticsButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#goToStatistics\" prefWidth\u003d\"108.0\" text\u003d\"Statistics\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                        \u003cVBox layoutX\u003d\"10.0\" layoutY\u003d\"44.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                    \u003cStackPane.margin\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                    \u003c/StackPane.margin\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                        \u003cVBox HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                                \u003cVBox fx:id\u003d\"showList\" minWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"contentPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"resultDisplayPlaceHolder\" prefHeight\u003d\"30.0\" styleClass\u003d\"stack-pane\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 2,
      "tswuxia": 40,
      "-": 41
    }
  },
  {
    "path": "src/main/resources/view/MovieListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heze8"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heze8"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heze8"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heze8"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heze8"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heze8"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heze8"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "heze8": 36
    }
  },
  {
    "path": "src/main/resources/view/NavigationBar.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003cVBox styleClass\u003d\"v-box\" StackPane.alignment\u003d\"CENTER\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cVBox layoutX\u003d\"10.0\" layoutY\u003d\"144.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cButton fx:id\u003d\"watchlistButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#goToWatchlist\" text\u003d\"Watchlist\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cVBox VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cButton fx:id\u003d\"watchedButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#goToWatched\" prefWidth\u003d\"108.0\" text\u003d\"Watched\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cVBox layoutX\u003d\"10.0\" layoutY\u003d\"111.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cButton fx:id\u003d\"searchButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#goToSearch\" prefWidth\u003d\"108.0\" text\u003d\"Search\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cVBox layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cButton fx:id\u003d\"statisticsButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#goToStatistics\" prefWidth\u003d\"108.0\" text\u003d\"Statistics\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cVBox layoutX\u003d\"10.0\" layoutY\u003d\"44.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003cStackPane.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003c/StackPane.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "   \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "   \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "tswuxia": 32
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003cStackPane fx:id\u003d\"resultDisplayPlaceHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/SearchPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    \u003cListView fx:id\u003d\"searchListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tswuxia": 8
    }
  },
  {
    "path": "src/main/resources/view/ShowCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.control.CheckBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    \u003cGridPane prefHeight\u003d\"150.0\" prefWidth\u003d\"590.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"133.60001220703126\" minWidth\u003d\"10.0\" prefWidth\u003d\"52.799991607666016\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"249.6000198364258\" minWidth\u003d\"10.0\" prefWidth\u003d\"101.99996337890623\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"378.99997863769534\" minWidth\u003d\"10.0\" prefWidth\u003d\"322.4\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"308.8000244140625\" minWidth\u003d\"10.0\" prefWidth\u003d\"112.80000000000001\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"100.0\" prefHeight\u003d\"150.0\" prefWidth\u003d\"278.0\" GridPane.columnIndex\u003d\"2\" GridPane.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                \u003cInsets left\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                \u003cLabel fx:id\u003d\"showName\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$showName\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                  \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                  \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "               \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cLabel fx:id\u003d\"dateOfRelease\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dateOfRelease\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cLabel fx:id\u003d\"runningTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$runningTime\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cLabel fx:id\u003d\"actors\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$actors\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003cLabel fx:id\u003d\"description\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003cLabel fx:id\u003d\"showIndex\" text\u003d\"\\$showIndex\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cInsets bottom\u003d\"8.0\" left\u003d\"8.0\" right\u003d\"8.0\" top\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003c/GridPane.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003cImageView fitHeight\u003d\"150.0\" fitWidth\u003d\"102.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" GridPane.columnIndex\u003d\"1\" GridPane.halignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003cimage\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cImage url\u003d\"@../images/poster-placeholder.png\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003c/image\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003cCheckBox fx:id\u003d\"isWatched\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"52.0\" prefWidth\u003d\"70.0\" text\u003d\"Watched\" GridPane.columnIndex\u003d\"3\" GridPane.halignment\u003d\"RIGHT\" GridPane.valignment\u003d\"BOTTOM\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cInsets left\u003d\"8.0\" right\u003d\"15.0\" top\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003c/CheckBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tswuxia": 61
    }
  },
  {
    "path": "src/main/resources/view/ShowListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.control.CheckBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"136.00001220703126\" minWidth\u003d\"10.0\" prefWidth\u003d\"101.60004425048828\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"ALWAYS\" maxWidth\u003d\"256.8000244140625\" minWidth\u003d\"10.0\" prefWidth\u003d\"256.8000244140625\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003cImageView fx:id\u003d\"poster\" fitHeight\u003d\"160.0\" fitWidth\u003d\"120.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" GridPane.columnIndex\u003d\"1\" GridPane.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cFlowPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "               \u003cHBox fx:id\u003d\"actors\" spacing\u003d\"7.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003c/children\u003e\u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            \u003cLabel fx:id\u003d\"type\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$type\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            \u003cLabel fx:id\u003d\"dateOfRelease\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date of release\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            \u003cLabel fx:id\u003d\"runningTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$running time\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "   \u003cHBox HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "   \u003cGridPane prefHeight\u003d\"150.0\" prefWidth\u003d\"125.0\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "       \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "       \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "     \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003cCheckBox fx:id\u003d\"watched\" mnemonicParsing\u003d\"false\" text\u003d\"Watched\" textFill\u003d\"WHITE\" GridPane.halignment\u003d\"RIGHT\" GridPane.valignment\u003d\"BOTTOM\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "               \u003cInsets bottom\u003d\"20.0\" left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "            \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "         \u003c/CheckBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "   \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "      \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 29,
      "tswuxia": 38
    }
  },
  {
    "path": "src/main/resources/view/ShowListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    \u003cListView fx:id\u003d\"showListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 9
    }
  },
  {
    "path": "src/main/resources/view/StatisticsPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003cStackPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "        \u003cLabel text\u003d\"StatisticsPanelContent\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "tswuxia": 11
    }
  },
  {
    "path": "src/main/resources/view/WatchedPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tswuxia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "   \u003cListView fx:id\u003d\"watchedListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 5,
      "tswuxia": 3
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/AppParametersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/commons/core/ConfigTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertEquals(original, readBack);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertEquals(original, readBack);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 1,
      "jcjjjared": 3,
      "heze8": 4,
      "-": 109
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.commons.core.Messages.MESSAGE_INVALID_SHOW_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyWatchList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.storage.JsonWatchListStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.storage.StorageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        JsonWatchListStorage watchListStorage \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                new JsonWatchListStorage(temporaryFolder.resolve(\"watchList.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        StorageManager storage \u003d new StorageManager(watchListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_SHOW_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // Setup LogicManager with JsonWatchListIoExceptionThrowingStub"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        JsonWatchListStorage watchListStorage \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                new JsonWatchListIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionWatchList.json\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        StorageManager storage \u003d new StorageManager(watchListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_ANNABELLE + TYPE_DESC_ANNABELLE"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                + WATCHED_DESC_ANNABELLE + DESCRIPTION_DESC_ANNABELLE"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                + DATE_DESC_ANNABELLE + RUNNING_TIME_DESC_ANNABELLE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show expectedShow \u003d new ShowBuilder(ANNABELLE).withActors().build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        expectedModel.addShow(expectedShow);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void getFilteredShowList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredShowList().remove(0));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getWatchList(), new UserPrefs());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static class JsonWatchListIoExceptionThrowingStub extends JsonWatchListStorage {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        private JsonWatchListIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public void saveWatchList(ReadOnlyWatchList watchList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 18,
      "jcjjjared": 10,
      "heze8": 11,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalShows.getTypicalWatchList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.testutil.ShowBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        model \u003d new ModelManager(getTypicalWatchList(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void execute_newShow_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show validShow \u003d new ShowBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getWatchList(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        expectedModel.addShow(validShow);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertCommandSuccess(new AddCommand(validShow), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validShow), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void execute_duplicateShow_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show showInList \u003d model.getWatchList().getShowList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertCommandFailure(new AddCommand(showInList), model, AddCommand.MESSAGE_DUPLICATE_SHOW);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 13,
      "jcjjjared": 1,
      "heze8": 6,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyWatchList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.WatchList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Movie;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.testutil.ShowBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void constructor_nullShow_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void execute_showAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        ModelStubAcceptingShowAdded modelStub \u003d new ModelStubAcceptingShowAdded();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show validShow \u003d new ShowBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validShow).execute(modelStub);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validShow), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(Arrays.asList(validShow), modelStub.showsAdded);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void execute_duplicateShow_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show validShow \u003d new ShowBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validShow);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithShow(validShow);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_SHOW, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show avenger \u003d new ShowBuilder().withName(\"Avenger\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show bobthebuilder \u003d new ShowBuilder().withName(\"Bob The Builder\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        AddCommand addAvengerCommand \u003d new AddCommand(avenger);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bobthebuilder);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(addAvengerCommand.equals(addAvengerCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        AddCommand addShowCommandCopy \u003d new AddCommand(avenger);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(addAvengerCommand.equals(addAvengerCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(addAvengerCommand.equals(1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(addAvengerCommand.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different show -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(addAvengerCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public Path getWatchListFilePath() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public void setWatchListFilePath(Path watchListFilePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public void addShow(Show show) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public void setWatchList(ReadOnlyWatchList newData) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public ReadOnlyWatchList getWatchList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public boolean hasShow(Show show) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        public boolean hasShowName(Name showName) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        public List\u003cShow\u003e getShowIfHasName(Name showName) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        public boolean hasActor(Set\u003cActor\u003e actorSet) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        public List\u003cShow\u003e getShowIfHasActor(Set\u003cActor\u003e actorSet) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public void deleteShow(Show target) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public void setShow(Show target, Show editedShow) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public ObservableList\u003cShow\u003e getFilteredShowList() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public void updateFilteredShowList(Predicate\u003cShow\u003e predicate) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public ObservableList\u003cShow\u003e getWatchedShowList() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void updateWatchedShowList() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public ObservableList\u003cShow\u003e getSearchResultList() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public void updateSearchResultList(List\u003cShow\u003e searchResult) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        public void syncMovie(List\u003cMovie\u003e syncMovie) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * A Model stub that contains a single show."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private class ModelStubWithShow extends ModelStub {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        private final Show show;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        ModelStubWithShow(Show show) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            requireNonNull(show);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            this.show \u003d show;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public boolean hasShow(Show show) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            requireNonNull(show);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return this.show.isSameShow(show);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * A Model stub that always accept the show being added."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private class ModelStubAcceptingShowAdded extends ModelStub {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        final ArrayList\u003cShow\u003e showsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public boolean hasShow(Show show) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            requireNonNull(show);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return showsAdded.stream().anyMatch(show::isSameShow);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public void addShow(Show show) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            requireNonNull(show);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            showsAdded.add(show);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public ReadOnlyWatchList getWatchList() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return new WatchList();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 64,
      "jcjjjared": 21,
      "michelleykw": 15,
      "heze8": 6,
      "-": 139
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalShows.getTypicalWatchList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.WatchList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void execute_emptyWatchList_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void execute_nonEmptyWatchList_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalWatchList(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalWatchList(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        expectedModel.setWatchList(new WatchList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 6,
      "jcjjjared": 1,
      "heze8": 5,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_DATE_OF_RELEASE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_IS_WATCHED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_RUNNING_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.WatchList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.show.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.testutil.EditShowDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String VALID_NAME_ANNABELLE \u003d \"Annabelle\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String VALID_NAME_BOB_THE_BUILDER \u003d \"Bob the Builder\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String VALID_TYPE_ANNABELLE \u003d \"movie\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String VALID_TYPE_BOB_THE_BUILDER \u003d \"tv\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String VALID_DATE_ANNABELLE \u003d \"10/10/2014\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String VALID_DATE_BOB_THE_BUILDER \u003d \"1998\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final boolean VALID_WATCHED_ANNABELLE \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final boolean VALID_WATCHED_BOB_THE_BUILDER \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String VALID_DESCRIPTION_ANNABELLE \u003d \"Horror film\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String VALID_DESCRIPTION_BOB_THE_BUILDER \u003d \"Cartoon about building things\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final int VALID_RUNNING_TIME_ANNABELLE \u003d 99;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final int VALID_RUNNING_TIME_BOB_THE_BUILDER \u003d 10;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String VALID_ACTOR_ANNABELLE \u003d \"Annabelle Wallis\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String VALID_ACTOR_BOB_THE_BUILDER \u003d \"Rob Rackstraw\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String NAME_DESC_ANNABELLE \u003d \" \" + PREFIX_NAME + VALID_NAME_ANNABELLE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String NAME_DESC_BOB_THE_BUILDER \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String TYPE_DESC_ANNABELLE \u003d \" \" + PREFIX_TYPE + VALID_TYPE_ANNABELLE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String TYPE_DESC_BOB_THE_BUILDER \u003d \" \" + PREFIX_TYPE + VALID_TYPE_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String DATE_DESC_ANNABELLE \u003d \" \" + PREFIX_DATE_OF_RELEASE + VALID_DATE_ANNABELLE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String DATE_DESC_BOB_THE_BUILDER \u003d \" \" + PREFIX_DATE_OF_RELEASE + VALID_DATE_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String WATCHED_DESC_ANNABELLE \u003d \" \" + PREFIX_IS_WATCHED + VALID_WATCHED_ANNABELLE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String WATCHED_DESC_BOB_THE_BUILDER \u003d \" \" + PREFIX_IS_WATCHED + VALID_WATCHED_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String RUNNING_TIME_DESC_ANNABELLE \u003d \" \" + PREFIX_RUNNING_TIME + VALID_RUNNING_TIME_ANNABELLE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String RUNNING_TIME_DESC_BOB_THE_BUILDER \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            \" \" + PREFIX_RUNNING_TIME + VALID_RUNNING_TIME_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String DESCRIPTION_DESC_ANNABELLE \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_ANNABELLE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String DESCRIPTION_DESC_BOB_THE_BUILDER \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String ACTOR_DESC_ANNABELLE \u003d \" \" + PREFIX_TYPE + VALID_ACTOR_ANNABELLE;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String ACTOR_DESC_BOB_THE_BUILDER \u003d \" \" + PREFIX_TYPE + VALID_ACTOR_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String INVALID_TYPE_DESC \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            \" \" + PREFIX_TYPE + \"TV show\"; // types can only be \"movie\" or \"tv\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String INVALID_IS_WATCHED_DESC \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            \" \" + PREFIX_IS_WATCHED + null; //null not allowed"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String INVALID_RUNNING_TIME_DESC \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            \" \" + PREFIX_RUNNING_TIME; // empty string not allowed for running time"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String INVALID_DESCRIPTION_DESC \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            \" \" + PREFIX_DESCRIPTION; // empty string not allowed for description"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final EditCommand.EditShowDescriptor DESC_ANNABELLE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final EditCommand.EditShowDescriptor DESC_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        DESC_ANNABELLE \u003d new EditShowDescriptorBuilder().withName(VALID_NAME_ANNABELLE).withType(VALID_TYPE_ANNABELLE)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_ANNABELLE).withIsWatched(VALID_WATCHED_ANNABELLE)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withDateOfRelease(VALID_DATE_ANNABELLE)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withRunningTime(VALID_RUNNING_TIME_ANNABELLE).withActors(VALID_ACTOR_ANNABELLE).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        DESC_BOB_THE_BUILDER \u003d new EditShowDescriptorBuilder().withName(VALID_NAME_BOB_THE_BUILDER)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withType(VALID_TYPE_BOB_THE_BUILDER)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_BOB_THE_BUILDER).withIsWatched(VALID_WATCHED_BOB_THE_BUILDER)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withDateOfRelease(VALID_DATE_BOB_THE_BUILDER)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withRunningTime(VALID_RUNNING_TIME_BOB_THE_BUILDER).withActors(VALID_ACTOR_BOB_THE_BUILDER).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * - the watch list, filtered show list and selected show in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        WatchList expectedWatchList \u003d new WatchList(actualModel.getWatchList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "heze8"
        },
        "content": "        List\u003cShow\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredShowList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(expectedWatchList, actualModel.getWatchList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "heze8"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredShowList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the show at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * {@code model}\u0027s watch list."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static void showShowAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "heze8"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredShowList().size());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "heze8"
        },
        "content": "        Show show \u003d model.getFilteredShowList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "heze8"
        },
        "content": "        final String[] splitName \u003d show.getName().showName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "heze8"
        },
        "content": "        model.updateFilteredShowList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "heze8"
        },
        "content": "        assertEquals(1, model.getFilteredShowList().size());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 127,
      "wongchuankai": 8,
      "heze8": 10
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.showShowAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalIndexes.INDEX_FIRST_SHOW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalIndexes.INDEX_SECOND_SHOW;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalShows.getTypicalWatchList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalWatchList(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show showToDelete \u003d model.getFilteredShowList().get(INDEX_FIRST_SHOW.getZeroBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_SHOW);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_SHOW_SUCCESS, showToDelete);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getWatchList(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        expectedModel.deleteShow(showToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredShowList().size() + 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_SHOW_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        showShowAtIndex(model, INDEX_FIRST_SHOW);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show showToDelete \u003d model.getFilteredShowList().get(INDEX_FIRST_SHOW.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_SHOW);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_SHOW_SUCCESS, showToDelete);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getWatchList(), new UserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        expectedModel.deleteShow(showToDelete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        showNoShow(expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        showShowAtIndex(model, INDEX_FIRST_SHOW);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_SHOW;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of watch list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getWatchList().getShowList().size());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_SHOW_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_SHOW);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_SHOW);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_SHOW);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different show -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private void showNoShow(Model model) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        model.updateFilteredShowList(p -\u003e false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(model.getFilteredShowList().isEmpty());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 32,
      "heze8": 8,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.DESC_ANNABELLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.DESC_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.VALID_NAME_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.showShowAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalIndexes.INDEX_FIRST_SHOW;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalIndexes.INDEX_SECOND_SHOW;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalShows.getTypicalWatchList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.commands.EditCommand.EditShowDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.testutil.EditShowDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalWatchList(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show editedShow \u003d new ShowBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        EditShowDescriptor descriptor \u003d new EditShowDescriptorBuilder(editedShow).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_SHOW, descriptor);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_SHOW_SUCCESS, editedShow);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new WatchList(model.getWatchList()), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        expectedModel.setShow(model.getFilteredShowList().get(0), editedShow);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Index indexLastShow \u003d Index.fromOneBased(model.getFilteredShowList().size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show lastShow \u003d model.getFilteredShowList().get(indexLastShow.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        ShowBuilder showInList \u003d new ShowBuilder(lastShow);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show editedShow \u003d showInList.withName(VALID_NAME_BOB_THE_BUILDER)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_BOB_THE_BUILDER)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withActors(VALID_ACTOR_BOB_THE_BUILDER).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        EditShowDescriptor descriptor \u003d new EditShowDescriptorBuilder().withName(VALID_NAME_BOB_THE_BUILDER)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_BOB_THE_BUILDER).withActors(VALID_ACTOR_BOB_THE_BUILDER).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastShow, descriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_SHOW_SUCCESS, editedShow);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new WatchList(model.getWatchList()), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        expectedModel.setShow(lastShow, editedShow);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_SHOW, new EditShowDescriptor());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show editedShow \u003d model.getFilteredShowList().get(INDEX_FIRST_SHOW.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_SHOW_SUCCESS, editedShow);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new WatchList(model.getWatchList()), new UserPrefs());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        showShowAtIndex(model, INDEX_FIRST_SHOW);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show showInFilteredList \u003d model.getFilteredShowList().get(INDEX_FIRST_SHOW.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show editedShow \u003d new ShowBuilder(showInFilteredList).withName(VALID_NAME_BOB_THE_BUILDER).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_SHOW,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                new EditShowDescriptorBuilder().withName(VALID_NAME_BOB_THE_BUILDER).build());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_SHOW_SUCCESS, editedShow);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new WatchList(model.getWatchList()), new UserPrefs());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        expectedModel.setShow(model.getFilteredShowList().get(0), editedShow);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void execute_duplicateShowUnfilteredList_failure() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show firstShow \u003d model.getFilteredShowList().get(INDEX_FIRST_SHOW.getZeroBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        EditShowDescriptor descriptor \u003d new EditShowDescriptorBuilder(firstShow).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_SHOW, descriptor);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_SHOW);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void execute_duplicateShowFilteredList_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        showShowAtIndex(model, INDEX_FIRST_SHOW);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // edit show in filtered list into a duplicate in watch list"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show showInList \u003d model.getWatchList().getShowList().get(INDEX_SECOND_SHOW.getZeroBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_SHOW,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                new EditShowDescriptorBuilder(showInList).build());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_SHOW);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void execute_invalidShowIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredShowList().size() + 1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        EditShowDescriptor descriptor \u003d new EditShowDescriptorBuilder().withName(VALID_NAME_BOB_THE_BUILDER).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_SHOW_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * but smaller than size of watch list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void execute_invalidShowIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        showShowAtIndex(model, INDEX_FIRST_SHOW);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_SHOW;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of watch list"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getWatchList().getShowList().size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                new EditShowDescriptorBuilder().withName(VALID_NAME_BOB_THE_BUILDER).build());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_SHOW_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_SHOW, DESC_ANNABELLE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        EditShowDescriptor copyDescriptor \u003d new EditShowDescriptor(DESC_ANNABELLE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_SHOW, copyDescriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_SHOW, DESC_ANNABELLE)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_SHOW, DESC_BOB_THE_BUILDER)));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 20,
      "wongchuankai": 62,
      "heze8": 6,
      "-": 86
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/commands/EditShowDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.DESC_ANNABELLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.DESC_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.VALID_ACTOR_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.VALID_DATE_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.VALID_NAME_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.VALID_RUNNING_TIME_BOB_THE_BUILDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.commands.EditCommand.EditShowDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.testutil.EditShowDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class EditShowDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        EditShowDescriptor descriptorWithSameValues \u003d new EditShowDescriptor(DESC_ANNABELLE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertTrue(DESC_ANNABELLE.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertTrue(DESC_ANNABELLE.equals(DESC_ANNABELLE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse(DESC_ANNABELLE.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse(DESC_ANNABELLE.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse(DESC_ANNABELLE.equals(DESC_BOB_THE_BUILDER));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        EditShowDescriptor editedAmy \u003d new EditShowDescriptorBuilder(DESC_ANNABELLE)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withName(VALID_NAME_BOB_THE_BUILDER).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse(DESC_ANNABELLE.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different show -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        editedAmy \u003d new EditShowDescriptorBuilder(DESC_ANNABELLE).withDateOfRelease(VALID_DATE_BOB_THE_BUILDER).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse(DESC_ANNABELLE.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        editedAmy \u003d new EditShowDescriptorBuilder(DESC_ANNABELLE).withDateOfRelease(VALID_DATE_BOB_THE_BUILDER).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse(DESC_ANNABELLE.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different running time -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        editedAmy \u003d new EditShowDescriptorBuilder(DESC_ANNABELLE)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withRunningTime(VALID_RUNNING_TIME_BOB_THE_BUILDER).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse(DESC_ANNABELLE.equals(editedAmy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different actors -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        editedAmy \u003d new EditShowDescriptorBuilder(DESC_ANNABELLE).withActors(VALID_ACTOR_BOB_THE_BUILDER).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse(DESC_ANNABELLE.equals(editedAmy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 35,
      "jcjjjared": 24
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.ModelManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.UserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        model \u003d new ModelManager(model.getWatchList(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getWatchList(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        showShowAtIndex(model, INDEX_FIRST_SHOW);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 29,
      "wongchuankai": 5,
      "heze8": 1
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/commands/SearchCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalShows.getTypicalWatchList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "public class SearchCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalWatchList(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalWatchList(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        /*NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));*/"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        HashMap\u003cString, List\u003cString\u003e\u003e firstHash \u003d new HashMap\u003cString, List\u003cString\u003e\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        HashMap\u003cString, List\u003cString\u003e\u003e secondHash \u003d new HashMap\u003cString, List\u003cString\u003e\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        ArrayList\u003cString\u003e firstList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        ArrayList\u003cString\u003e secondList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        firstList.add(\"first\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        secondList.add(\"second\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        firstHash.put(\"name\", firstList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        secondHash.put(\"name\", secondList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        SearchCommand searchFirstCommand \u003d new SearchCommand(firstHash);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        SearchCommand searchSecondCommand \u003d new SearchCommand(secondHash);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        assertTrue(searchFirstCommand.equals(searchFirstCommand));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        SearchCommand findFirstCommandCopy \u003d new SearchCommand(firstHash);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertTrue(searchFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        assertFalse(searchFirstCommand.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        assertFalse(searchFirstCommand.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different show -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        assertFalse(searchFirstCommand.equals(searchSecondCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void execute_zeroKeywords_noShowFound() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        /*String expectedMessage \u003d String.format(MESSAGE_SHOWS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        HashMap\u003cString, List\u003cString\u003e\u003e emptyHash \u003d new HashMap\u003cString, List\u003cString\u003e\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        ArrayList\u003cString\u003e emptyList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        emptyList.add(\" \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        emptyHash.put(\"name\", emptyList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        SearchCommand command \u003d new SearchCommand(emptyHash);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        expectedModel.updateFilteredShowList(predicate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredShowList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michelleykw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void execute_multipleKeywords_multipleShowsFound() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SHOWS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Avengers: Saving God\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        SearchCommand command \u003d new SearchCommand(Optional.of(\"Avengers: Saving God\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        expectedModel.updateFilteredShowList(predicate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertEquals(Arrays.asList(AVENGERSENDGAME, SAVINGPRIVATERYAN, GODFATHER2), model.getFilteredShowList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 9,
      "wongchuankai": 9,
      "michelleykw": 28,
      "heze8": 4,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show expectedShow \u003d new ShowBuilder(FIGHTCLUB).withActors(VALID_ACTOR_AMY).build();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + DESCRIPTION_DESC_BOB + WATCHED_DESC_AMY"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + DATE_DESC_BOB + RUNNING_TIME_DESC_BOB + ACTOR_DESC_BOB, new AddCommand(expectedShow));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + DESCRIPTION_DESC_BOB + WATCHED_DESC_AMY"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + DATE_DESC_BOB + RUNNING_TIME_DESC_BOB + ACTOR_DESC_BOB, new AddCommand(expectedShow));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // multiple date of release - last date accepted"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + DESCRIPTION_DESC_BOB + WATCHED_DESC_BOB + DATE_DESC_AMY"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + DATE_DESC_BOB + RUNNING_TIME_DESC_BOB + ACTOR_DESC_BOB, new AddCommand(expectedShow));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // multiple description - last description accepted"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + DESCRIPTION_DESC_AMY + DESCRIPTION_DESC_BOB"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                + WATCHED_DESC_BOB + WATCHED_DESC_BOB"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + DATE_DESC_BOB + RUNNING_TIME_DESC_BOB + ACTOR_DESC_BOB, new AddCommand(expectedShow));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show expectedShowMultipleTags \u003d new ShowBuilder(FIGHTCLUB).withActors(VALID_ACTOR_AMY, VALID_ACTOR_BOB)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + DESCRIPTION_DESC_BOB + WATCHED_DESC_BOB + DATE_DESC_BOB"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + RUNNING_TIME_DESC_BOB + ACTOR_DESC_BOB, new AddCommand(expectedShowMultipleTags));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // zero actor"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show expectedShow \u003d new ShowBuilder(AVENGERSENDGAME).withActors().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertParseSuccess(parser, AVENGERSENDGAME.getName()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                + \"movie\" + AVENGERSENDGAME.getDateOfRelease().value +AVENGERSENDGAME.isWatched()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                + AVENGERSENDGAME.getRunningTime().toString() + AVENGERSENDGAME.getDescription()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                + \"\", new AddCommand(expectedShow));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "*/"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 17,
      "jcjjjared": 6,
      "heze8": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        /*try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        /*try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 4,
      "heze8": 2,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalIndexes.INDEX_FIRST_SHOW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_SHOW));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 2,
      "heze8": 5,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.commands.CommandTestUtil.NAME_DESC_ANNABELLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_ACTOR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private static final String ACTOR_EMPTY \u003d \" \" + PREFIX_ACTOR;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_ANNABELLE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_ANNABELLE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_ANNABELLE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 5,
      "jcjjjared": 2,
      "heze8": 4,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalIndexes.INDEX_FIRST_SHOW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final String INVALID_NAME \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final String INVALID_IS_WATCHED \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final String INVALID_DATE \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final int INVALID_RUNNING_TIME \u003d -1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final String INVALID_ACTORS \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final String VALID_NAME \u003d \"Titanic\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"Ship\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final boolean VALID_IS_WATCHED \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final String VALID_DATE \u003d \"24 September 1997\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final int VALID_RUNNING_TIME \u003d 122;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final String VALID_ACTORS_1 \u003d \"Leonardo Di Caprio\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final String VALID_ACTORS_2 \u003d \"Kate Winslet\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(INDEX_FIRST_SHOW, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(INDEX_FIRST_SHOW, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((String) null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void parseDescription_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDescription(INVALID_DESCRIPTION));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void parseDate_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Date expectedDate \u003d new Date(VALID_DATE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(VALID_DATE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 25,
      "jcjjjared": 1,
      "heze8": 4,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/parser/SearchCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "public class SearchCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private SearchCommandParser parser \u003d new SearchCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        HashMap\u003cString, List\u003cString\u003e\u003e searchHash \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        ArrayList\u003cString\u003e nameList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        nameList.add(\"Alice\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        searchHash.put(\"name\", nameList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        SearchCommand expectedSearchCommand \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                new SearchCommand(searchHash);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        assertParseSuccess(parser, \"Alice\", expectedSearchCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n\", expectedSearchCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 7,
      "michelleykw": 11,
      "heze8": 4,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/logic/parser/WatchListParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalIndexes.INDEX_FIRST_SHOW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.commands.EditCommand.EditShowDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.testutil.EditShowDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.testutil.ShowBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.testutil.ShowUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class WatchListParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    private final WatchListParser parser \u003d new WatchListParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show show \u003d new ShowBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //AddCommand command \u003d (AddCommand) parser.parseCommand(ShowUtil.getAddCommand(show));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertEquals(new AddCommand(show), command);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_SHOW.getOneBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_SHOW), command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show show \u003d new ShowBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        EditShowDescriptor descriptor \u003d new EditShowDescriptorBuilder(show).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + INDEX_FIRST_SHOW.getOneBased() + \" \" + ShowUtil.getEditShowDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertEquals(new EditCommand(INDEX_FIRST_SHOW, descriptor), command);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "    public void parseCommand_search() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        /*List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        SearchCommand command \u003d (SearchCommand) parser.parseCommand("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "                SearchCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        assertEquals(new SearchCommand(new NameContainsKeywordsPredicate(keywords)), command);*/"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 15,
      "jcjjjared": 5,
      "michelleykw": 6,
      "heze8": 11,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.model.Model.PREDICATE_SHOW_ALL_SHOWS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalShows.AVENGERSENDGAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalShows.FIGHTCLUB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.testutil.WatchListBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(new WatchList(), new WatchList(modelManager.getWatchList()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        userPrefs.setWatchListFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        userPrefs.setWatchListFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void setWatchListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setWatchListFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void setWatchListFilePath_validPath_setsWatchListFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        modelManager.setWatchListFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(path, modelManager.getWatchListFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void hasShow_nullShow_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasShow(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void hasShow_showNotInWatchList_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(modelManager.hasShow(AVENGERSENDGAME));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void hasShow_showInWatchList_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        modelManager.addShow(AVENGERSENDGAME);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(modelManager.hasShow(AVENGERSENDGAME));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void getFilteredShowList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredShowList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        WatchList watchList \u003d new WatchListBuilder().withShow(AVENGERSENDGAME).withShow(FIGHTCLUB).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        WatchList differentWatchList \u003d new WatchList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        modelManager \u003d new ModelManager(watchList, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(watchList, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different watchlist -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentWatchList, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String[] keywords \u003d AVENGERSENDGAME.getName().showName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        modelManager.updateFilteredShowList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(watchList, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        modelManager.updateFilteredShowList(PREDICATE_SHOW_ALL_SHOWS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        differentUserPrefs.setWatchListFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(watchList, differentUserPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 7,
      "wongchuankai": 29,
      "heze8": 1,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "package seedu.ezwatchlist.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void setWatchListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setWatchListFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 1,
      "wongchuankai": 3,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/model/WatchListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalShows.AVENGERSENDGAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalShows.getTypicalWatchList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.testutil.ShowBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class WatchListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private final WatchList watchList \u003d new WatchList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(Collections.emptyList(), watchList.getShowList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e watchList.resetData(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void resetData_withValidReadOnlyWatchList_replacesData() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        WatchList newData \u003d getTypicalWatchList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        watchList.resetData(newData);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(newData, watchList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void resetData_withDuplicateShows_throwsDuplicateShowException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // Two Shows with the same identity fields"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show editedAvengersEndgame \u003d new ShowBuilder(AVENGERSENDGAME).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        List\u003cShow\u003e newShows \u003d Arrays.asList(AVENGERSENDGAME, editedAvengersEndgame);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        WatchListStub newData \u003d new WatchListStub(newShows);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertThrows(DuplicateShowException.class, () -\u003e watchList.resetData(newData));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void hasShow_nullShow_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e watchList.hasShow(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void hasShow_showNotInWatchList_returnsFalse() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(watchList.hasShow(AVENGERSENDGAME));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void hasShow_showInWatchList_returnsTrue() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        watchList.addShow(AVENGERSENDGAME);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(watchList.hasShow(AVENGERSENDGAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void hasShow_showWithSameIdentityFieldsInWatchList_returnsTrue() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        watchList.addShow(AVENGERSENDGAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show editedAvenger \u003d new ShowBuilder(AVENGERSENDGAME).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(watchList.hasShow(editedAvenger));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void getShowList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e watchList.getShowList().remove(0));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * A stub ReadOnlyWatchList whose shows list can violate interface constraints."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static class WatchListStub implements ReadOnlyWatchList {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        private final ObservableList\u003cShow\u003e shows \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        WatchListStub(Collection\u003cShow\u003e shows) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            this.shows.setAll(shows);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public ObservableList\u003cShow\u003e getShowList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            return shows;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 84,
      "jcjjjared": 13
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/model/actor/ActorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.model.actor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class ActorTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Actor(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void constructor_invalidActorName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String invalidActorName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "        //assertThrows(IllegalArgumentException.class, () -\u003e new Actor(invalidActorName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void isValidActorName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // null Actor name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Actor.isValidActorName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 23,
      "jcjjjared": 2,
      "heze8": 1
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/model/show/DateOfReleaseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class DateOfReleaseTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertThrows(NullPointerException.class, () -\u003e new Date(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void isValidDateofRelease() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // null Date"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // invalid Date"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(Date.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(Date.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // valid Date"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(Date.isValidDate(\"24 September 1997\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(Date.isValidDate(\"1998\")); // year only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 31,
      "jcjjjared": 4
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/model/show/DescriptionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // valid description"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(Description.isValidDescription(\"A magical Yeti must return to his family.\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(Description.isValidDescription(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(Description.isValidDescription(\"In Gotham City, mentally-troubled comedian Arthur Fleck is \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + \"disregarded and mistreated by society. He then embarks on a downward spiral of revolution\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + \" and bloody crime. This path brings him face-to-face with \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + \"his alter-ego: The Joker.\")); // long description"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 36,
      "jcjjjared": 3
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/model/show/NameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.testutil.ShowBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(predicate.test(new ShowBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(predicate.test(new ShowBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(predicate.test(new ShowBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(predicate.test(new ShowBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(predicate.test(new ShowBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(predicate.test(new ShowBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // Keywords match description, dateofrelease, and actors, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"description\", \"2019\", \"Tony\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(predicate.test(new ShowBuilder().withName(\"Alice\").withDescription(\"description\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                .withDateOfRelease(\"2019\").withActors(\"Tony Stark\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 13,
      "jcjjjared": 1,
      "-": 63
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/model/show/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tswuxia"
        },
        "content": "    */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 1,
      "jcjjjared": 4,
      "tswuxia": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/model/show/RunningTimeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class RunningTimeTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void constructor_invalidRunningTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        int invalidRunningTime \u003d -1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertThrows(IllegalArgumentException.class, () -\u003e new RunningTime(invalidRunningTime));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void isValidRunningTime() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // invalid running time"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(RunningTime.isValidRunningTime(-1)); // negative number"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // valid running time"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(RunningTime.isValidRunningTime(123)); // exactly 3 numbers"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(RunningTime.isValidRunningTime(12033123)); // long phone numbers"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 23,
      "jcjjjared": 3
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/model/show/ShowTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalShows.AVENGERSENDGAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalShows.FIGHTCLUB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.testutil.ShowBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class ShowTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show show \u003d new ShowBuilder().build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e show.getActors().remove(0));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(AVENGERSENDGAME.isSameShow(AVENGERSENDGAME));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(AVENGERSENDGAME.isSameShow(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different isWatched and RunningTime -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show editedAvengersEndGame \u003d new ShowBuilder(AVENGERSENDGAME).withIsWatched(true).withRunningTime(122).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertFalse(AVENGERSENDGAME.isSameShow(editedAVENGERSENDGAME));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        editedAvengersEndGame \u003d new ShowBuilder(AVENGERSENDGAME).withName(\"FIGHTCLUB\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertFalse(AVENGERSENDGAME.isSameShow(editedAvengersEndGame));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // same name, same description, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        editedAvengersEndGame \u003d new ShowBuilder(AVENGERSENDGAME).withIsWatched(true).withDateOfRelease(\"2019\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                .withRunningTime(122).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertTrue(AVENGERSENDGAME.isSameShow(editedAVENGERSENDGAME));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // same name, same dateofrelease, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        editedAvengersEndGame \u003d new ShowBuilder(AVENGERSENDGAME).withRunningTime(122).withDescription(\"DESCRIPTION\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                .withIsWatched(true).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertTrue(AVENGERSENDGAME.isSameShow(editedAvengersEndGame));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // same name, same dateofrelease, same description, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        editedAvengersEndGame \u003d new ShowBuilder(AVENGERSENDGAME).withIsWatched(true).withRunningTime(122).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        assertTrue(AVENGERSENDGAME.isSameShow(editedAvengersEndGame));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show avengerendgameCopy \u003d new ShowBuilder(AVENGERSENDGAME).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertTrue(AVENGERSENDGAME.equals(avengerendgameCopy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(AVENGERSENDGAME.equals(AVENGERSENDGAME));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(AVENGERSENDGAME.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(AVENGERSENDGAME.equals(5));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different shows -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(AVENGERSENDGAME.equals(FIGHTCLUB));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show editedAvengersendgame \u003d new ShowBuilder(AVENGERSENDGAME).withName(\"FIGHTCLUB\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(AVENGERSENDGAME.equals(editedAvengersendgame));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        editedAvengersendgame \u003d new ShowBuilder(AVENGERSENDGAME).withDescription(\"DESCRIPTION\").build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(AVENGERSENDGAME.equals(editedAvengersendgame));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different iswatched -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        editedAvengersendgame \u003d new ShowBuilder(AVENGERSENDGAME).withIsWatched(true).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(AVENGERSENDGAME.equals(editedAvengersendgame));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different dateofrelease -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        editedAvengersendgame \u003d new ShowBuilder(AVENGERSENDGAME).withDateOfRelease(\"2019\").build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(AVENGERSENDGAME.equals(editedAvengersendgame));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // different Actors -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        editedAvengersendgame \u003d new ShowBuilder(AVENGERSENDGAME).withActors(\"actors\").build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(AVENGERSENDGAME.equals(editedAvengersendgame));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 74,
      "jcjjjared": 16
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/model/show/UniqueShowListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.model.show;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalShows.AVENGERSENDGAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalShows.FIGHTCLUB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.exceptions.DuplicateShowException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.exceptions.ShowNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.testutil.ShowBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class UniqueShowListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private final UniqueShowList uniqueShowList \u003d new UniqueShowList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void contains_nullShow_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueShowList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void contains_showNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(uniqueShowList.contains(AVENGERSENDGAME));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void contains_showInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        uniqueShowList.add(AVENGERSENDGAME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(uniqueShowList.contains(AVENGERSENDGAME));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void contains_showWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        uniqueShowList.add(AVENGERSENDGAME);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        Show editedAlice \u003d new ShowBuilder(AVENGERSENDGAME).withIsWatched(true).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertTrue(uniqueShowList.contains(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void add_nullShow_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueShowList.add(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void add_duplicateShow_throwsDuplicateShowException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        uniqueShowList.add(AVENGERSENDGAME);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(DuplicateShowException.class, () -\u003e uniqueShowList.add(AVENGERSENDGAME));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void setShow_nullTargetShow_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueShowList.setShow(null, AVENGERSENDGAME));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void setShow_nullEditedShow_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueShowList.setShow(AVENGERSENDGAME, null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void setShow_targetShowNotInList_throwsShowNotFoundException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(ShowNotFoundException.class, () -\u003e uniqueShowList.setShow(AVENGERSENDGAME, AVENGERSENDGAME));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void setShow_editedShowIsSameShow_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        uniqueShowList.add(AVENGERSENDGAME);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void setShow_editedShowHasSameIdentity_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        uniqueShowList.add(AVENGERSENDGAME);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Show editedAvengersEndGame \u003d new ShowBuilder(AVENGERSENDGAME).withIsWatched(true).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        uniqueShowList.setShow(AVENGERSENDGAME, editedAvengersEndGame);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        UniqueShowList expectedUniqueShowList \u003d new UniqueShowList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        expectedUniqueShowList.add(editedAvengersEndGame);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(expectedUniqueShowList, expectedUniqueShowList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void setShow_editedShowHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        uniqueShowList.add(AVENGERSENDGAME);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        uniqueShowList.setShow(AVENGERSENDGAME, FIGHTCLUB);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        UniqueShowList expectedUniqueShowList \u003d new UniqueShowList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        expectedUniqueShowList.add(FIGHTCLUB);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(expectedUniqueShowList, uniqueShowList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void setShow_editedShowHasNonUniqueIdentity_throwsDuplicateShowException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        uniqueShowList.add(AVENGERSENDGAME);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        uniqueShowList.add(FIGHTCLUB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(DuplicateShowException.class, () -\u003e uniqueShowList.setShow(AVENGERSENDGAME, FIGHTCLUB));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void remove_nullShow_throwsNullPointerException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueShowList.remove(null));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void remove_showDoesNotExist_throwsShowNotFoundException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(ShowNotFoundException.class, () -\u003e uniqueShowList.remove(AVENGERSENDGAME));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void remove_existingShow_removesShow() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        uniqueShowList.add(AVENGERSENDGAME);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        uniqueShowList.remove(AVENGERSENDGAME);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        UniqueShowList expectedUniqueShowList \u003d new UniqueShowList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(expectedUniqueShowList, uniqueShowList);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void setShows_nullUniqueShowList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueShowList.setShows((UniqueShowList) null));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void setShows_uniqueShowList_replacesOwnListWithProvidedUniqueShowList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        uniqueShowList.add(AVENGERSENDGAME);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        UniqueShowList expectedUniqueShowList \u003d new UniqueShowList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        expectedUniqueShowList.add(FIGHTCLUB);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        uniqueShowList.setShows(expectedUniqueShowList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(expectedUniqueShowList, uniqueShowList);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void setShows_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueShowList.setShows((List\u003cShow\u003e) null));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void setShows_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        uniqueShowList.add(AVENGERSENDGAME);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        List\u003cShow\u003e showsList \u003d Collections.singletonList(FIGHTCLUB);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        uniqueShowList.setShows(showsList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        UniqueShowList expectedUniqueShowList \u003d new UniqueShowList();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        expectedUniqueShowList.add(FIGHTCLUB);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(expectedUniqueShowList, uniqueShowList);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void setShows_listWithDuplicateShows_throwsDuplicateShowException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        List\u003cShow\u003e listWithDuplicateShows \u003d Arrays.asList(AVENGERSENDGAME, AVENGERSENDGAME);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertThrows(DuplicateShowException.class, () -\u003e uniqueShowList.setShows(listWithDuplicateShows));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            -\u003e uniqueShowList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 146,
      "jcjjjared": 15
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/storage/JsonAdaptedShowTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.TypicalShows.AVENGERSENDGAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class JsonAdaptedShowTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final String INVALID_NAME \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final String INVALID_DATE_OF_RELEASE \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final int INVALID_RUNNINGTIME \u003d -1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final String INVALID_ACTOR \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final String VALID_NAME \u003d AVENGERSENDGAME.getName().toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d AVENGERSENDGAME.getDescription().toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final String VALID_DATEOFRELEASE \u003d AVENGERSENDGAME.getDateOfRelease().value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final int VALID_RUNNINGTIME \u003d AVENGERSENDGAME.getRunningTime().value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final List\u003cJsonAdaptedActor\u003e VALID_ACTOR \u003d AVENGERSENDGAME.getActors().stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            .map(JsonAdaptedActor::new)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void toModelType_validShowDetails_returnsShow() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        JsonAdaptedShow show \u003d new JsonAdaptedShow(AVENGERSENDGAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertEquals(AVENGERSENDGAME, show.toModelType());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        /*JsonAdaptedShow show \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                new JsonAdaptedShow(INVALID_NAME, \"Movie\", VALID_DATEOFRELEASE, true, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                        VALID_RUNNINGTIME, VALID_ACTOR);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, show::toModelType);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        /*JsonAdaptedShow show \u003d new JsonAdaptedShow(null, \"Movie\", VALID_DATEOFRELEASE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                true, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                VALID_RUNNINGTIME, VALID_ACTOR);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, show::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void toModelType_invalidDateOfRelease_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        JsonAdaptedShow show \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                new JsonAdaptedShow(VALID_NAME, \"MOVIE\", INVALID_DATE_OF_RELEASE, false,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                        VALID_DESCRIPTION, VALID_RUNNINGTIME, VALID_ACTOR);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, show::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void toModelType_nullDateOfRelease_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        JsonAdaptedShow show \u003d new JsonAdaptedShow(VALID_NAME, \"Movie\", null,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                false, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                VALID_RUNNINGTIME, VALID_ACTOR);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, show::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void toModelType_invalidRunningTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        JsonAdaptedShow show \u003d new JsonAdaptedShow(VALID_NAME, \"Movie\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                VALID_DATEOFRELEASE, false, \"hello\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                INVALID_RUNNINGTIME, VALID_ACTOR);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        String expectedMessage \u003d RunningTime.MESSAGE_CONSTRAINTS2;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, show::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void toModelType_invalidActors_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        List\u003cJsonAdaptedActor\u003e invalidActors \u003d new ArrayList\u003c\u003e(VALID_ACTOR);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        invalidActors.add(new JsonAdaptedActor(INVALID_ACTOR));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        JsonAdaptedShow show \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                new JsonAdaptedShow(VALID_NAME, \"Movie\", VALID_DATEOFRELEASE, false , VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                        VALID_RUNNINGTIME, invalidActors);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(IllegalValueException.class, show::toModelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "         */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 80,
      "jcjjjared": 20
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/storage/JsonSerializableWatchListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class JsonSerializableWatchListTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableWatchListTest\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final Path TYPICAL_SHOWS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalShowsWatchList.json\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final Path INVALID_SHOW_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidShowWatchList.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final Path DUPLICATE_SHOW_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateShowWatchList.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void toModelType_typicalActorsFile_success() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        /*JsonSerializableWatchList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_SHOWS_FILE,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                JsonSerializableWatchList.class).get();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        WatchList watchListFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        WatchList typicalShowsWatchList \u003d TypicalShows.getTypicalWatchList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michelleykw"
        },
        "content": "        assertEquals(watchListFromFile, typicalShowsWatchList);*/"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void toModelType_invalidShowFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        JsonSerializableWatchList dataFromFile \u003d JsonUtil.readJsonFile(INVALID_SHOW_FILE,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                JsonSerializableWatchList.class).get();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void toModelType_duplicateShows_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        JsonSerializableWatchList dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_SHOW_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                JsonSerializableWatchList.class).get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableWatchList.MESSAGE_DUPLICATE_SHOW,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 42,
      "jcjjjared": 1,
      "michelleykw": 1
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        userPrefs.setWatchListFilePath(Paths.get(\"watchlist.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 4,
      "jcjjjared": 2,
      "heze8": 5,
      "-": 114
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/storage/JsonWatchListStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.ReadOnlyWatchList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.WatchList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class JsonWatchListStorageTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonWatchListStorageTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void readWatchList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readWatchList(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private java.util.Optional\u003cReadOnlyWatchList\u003e readWatchList(String filePath) throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return new JsonWatchListStorage(Paths.get(filePath)).readWatchList(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertFalse(readWatchList(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readWatchList(\"notJsonFormatWatchList.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void readWatchList_invalidShowWatchList_throwDataConversionException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readWatchList(\"invalidShowWatchList.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void readWatchList_invalidAndValidShowWatchList_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readWatchList(\"invalidAndValidShowWatchList.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public void readAndSaveWatchList_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            Path filePath \u003d testFolder.resolve(\"TempWatchList.json\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            WatchList original \u003d getTypicalWatchList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            JsonWatchListStorage jsonWatchListStorage \u003d new JsonWatchListStorage(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            // Save in new file and read back"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            jsonWatchListStorage.saveWatchList(original, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            ReadOnlyWatchList readBack \u003d jsonWatchListStorage.readWatchList(filePath).get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            assertEquals(original, new WatchList(readBack));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            original.addShow(AVENGERSENDGAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            original.removeShow(FIGHTCLUB);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            jsonWatchListStorage.saveWatchList(original, filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            readBack \u003d jsonWatchListStorage.readWatchList(filePath).get();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            assertEquals(original, new WatchList(readBack));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            // Save and read without specifying file path"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            original.addShow(GODFATHER2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            jsonWatchListStorage.saveWatchList(original); // file path not specified"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            readBack \u003d jsonWatchListStorage.readWatchList().get(); // file path not specified"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            assertEquals(original, new WatchList(readBack));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void saveWatchList_nullWatchList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveWatchList(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Saves {@code watchList} at the specified {@code filePath}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private void saveWatchList(ReadOnlyWatchList watchList, String filePath) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            new JsonWatchListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                    .saveWatchList(watchList, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void saveWatchList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveWatchList(new WatchList(), null));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 106,
      "jcjjjared": 1
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        JsonWatchListStorage watchListStorage \u003d new JsonWatchListStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        storageManager \u003d new StorageManager(watchListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "*/"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void watchListReadSave() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        WatchList original \u003d getTypicalWatchList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        storageManager.saveWatchList(original);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        ReadOnlyWatchList retrieved \u003d storageManager.readWatchList().get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        //assertEquals(original, new WatchList(retrieved));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "*/"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public void getWatchListFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        assertNotNull(storageManager.getWatchListFilePath());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 14,
      "jcjjjared": 2,
      "heze8": 1,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/testutil/EditShowDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.commands.EditCommand.EditShowDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.IsWatched;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.RunningTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": " * A utility class to help with building EditShowDescriptor objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class EditShowDescriptorBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private EditShowDescriptor descriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public EditShowDescriptorBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        descriptor \u003d new EditShowDescriptor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public EditShowDescriptorBuilder(EditShowDescriptor descriptor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        this.descriptor \u003d new EditShowDescriptor(descriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Returns an {@code EditShowDescriptor} with fields containing {@code show}\u0027s details"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public EditShowDescriptorBuilder(Show show) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        descriptor \u003d new EditShowDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        descriptor.setName(show.getName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor.setType(show.getType());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        descriptor.setDescription(show.getDescription());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        descriptor.setIsWatched(show.isWatched());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        descriptor.setDateOfRelease(show.getDateOfRelease());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        descriptor.setRunningTime(show.getRunningTime());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        descriptor.setActors(show.getActors());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Sets the {@code Name} of the {@code EditShowDescriptor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public EditShowDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Sets the {@code type} of the {@code EditShowDescriptor} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public EditShowDescriptorBuilder withType(String type) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor.setType(type);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Sets the {@code Description} of the {@code EditShowDescriptor} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public EditShowDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Sets the {@code IsWatched} of the {@code EditShowDescriptor} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public EditShowDescriptorBuilder withIsWatched(boolean isWatched) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor.setIsWatched(new IsWatched(isWatched));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Sets the {@code DateOfRelease} of the {@code EditShowDescriptor} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public EditShowDescriptorBuilder withDateOfRelease(String date) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        descriptor.setDateOfRelease(new Date(date));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Sets the {@code RunningTime} of the {@code EditShowDescriptor} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public EditShowDescriptorBuilder withRunningTime(int runningTime) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        descriptor.setRunningTime(new RunningTime(runningTime));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Parses the {@code actors} into a {@code Set\u003cTag\u003e} and set it to the {@code EditShowDescriptor}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public EditShowDescriptorBuilder withActors(String... actors) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        Set\u003cActor\u003e actorSet \u003d Stream.of(actors).map(Actor::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor.setActors(actorSet);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public EditShowDescriptor build() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 87,
      "jcjjjared": 19
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/testutil/ShowBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "package seedu.ezwatchlist.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.IsWatched;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Movie;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.RunningTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import seedu.ezwatchlist.model.show.TvShow;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": " * A utility class to help with building Show objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class ShowBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Inception\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String DEFAULT_TYPE \u003d \"movie\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"16 July 2010\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static final boolean DEFAULT_ISWATCHED \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"A thief who steals corporate secrets through the use \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \" of dream-sharing technology is given the inverse task of planting an idea into the mind of a C.E.O.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public static final int DEFAULT_RUNNINGTIME \u003d 148;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private IsWatched isWatched;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private RunningTime runningTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private Set\u003cActor\u003e actors;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private Date dateOfRelease;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public ShowBuilder() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.type \u003d DEFAULT_TYPE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        this.isWatched \u003d new IsWatched(DEFAULT_ISWATCHED);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        dateOfRelease \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        this.runningTime \u003d new RunningTime(DEFAULT_RUNNINGTIME);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        actors \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Initializes the ShowBuilder with the data of {@code showToCopy}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public ShowBuilder(Show showToCopy) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        name \u003d showToCopy.getName();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        type \u003d showToCopy.getType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        description \u003d showToCopy.getDescription();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        isWatched \u003d showToCopy.isWatched();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        dateOfRelease \u003d showToCopy.getDateOfRelease();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        runningTime \u003d showToCopy.getRunningTime();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        actors \u003d new HashSet\u003c\u003e(showToCopy.getActors());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Sets the {@code Name} of the {@code Show} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public ShowBuilder withName(String name) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Sets the {@code type} of the {@code Show} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ShowBuilder withType(String type) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Parses the {@code Actors} into a {@code Set\u003cActors\u003e} and set it to the {@code Actors} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ShowBuilder withActors(String ... actors) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.actors \u003d SampleDataUtil.getActorSet(actors);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Sets the {@code Description} of the {@code Show} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public ShowBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Sets the {@code IsWatched} of the {@code Show} that we are building."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public ShowBuilder withIsWatched(boolean isWatched) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        this.isWatched \u003d new IsWatched(isWatched);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Sets the {@code Date} of the {@code Show} that we are building."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    public ShowBuilder withDateOfRelease(String date) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        this.dateOfRelease \u003d new Date(date);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Sets the {@code runningTime} of the {@code Show} that we are building."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public ShowBuilder withRunningTime(int runningTime) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        this.runningTime \u003d new RunningTime(runningTime);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * Builds the show."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     * @return show."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public Show build() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        if (type.equals(\"movie\")) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return new Movie(name, description, isWatched, dateOfRelease, runningTime, actors);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            return new TvShow(name, description, isWatched, dateOfRelease, runningTime, actors,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                    0 , 0, null);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 90,
      "jcjjjared": 40
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/testutil/ShowUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_ACTOR;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_DATE_OF_RELEASE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_IS_WATCHED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "import static seedu.ezwatchlist.logic.parser.CliSyntax.PREFIX_RUNNING_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.logic.commands.EditCommand.EditShowDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.actor.Actor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": " * A utility class for Show."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class ShowUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Returns an add command string for adding the {@code show}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static String getAddCommand(Show show) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getShowDetails(show);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Returns the part of command string for the given {@code show}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static String getShowDetails(Show show) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        sb.append(PREFIX_NAME + show.getName().toString() + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + show.getDescription().toString() + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        sb.append(PREFIX_IS_WATCHED + show.isWatched().toString() + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        sb.append(PREFIX_DATE_OF_RELEASE + show.getDateOfRelease().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        sb.append(PREFIX_RUNNING_TIME + show.getRunningTime().toString() + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        show.getActors().stream().forEach("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            s -\u003e sb.append(PREFIX_ACTOR + s.actorName + \" \")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Returns the part of command string for the given {@code EditShowDescriptor}\u0027s details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static String getEditShowDescriptorDetails(EditShowDescriptor descriptor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.showName).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor.getDescription()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .ifPresent(description -\u003e sb.append(PREFIX_DESCRIPTION).append(description).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor.getIsWatched()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .ifPresent(isWatched -\u003e sb.append(PREFIX_IS_WATCHED).append(isWatched.value).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor.getDateOfRelease()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .ifPresent(date -\u003e sb.append(PREFIX_DATE_OF_RELEASE).append(date.value).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "        descriptor.getRunningTime()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .ifPresent(runningTime -\u003e sb.append(PREFIX_RUNNING_TIME).append(runningTime).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        if (descriptor.getActors().isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            Set\u003cActor\u003e actors \u003d descriptor.getActors().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            if (actors.isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                sb.append(PREFIX_ACTOR);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                actors.forEach(s -\u003e sb.append(PREFIX_ACTOR).append(s.actorName).append(\" \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjjjared": 18,
      "wongchuankai": 22,
      "heze8": 2,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Returns the middle index of the show in the {@code model}\u0027s show list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return Index.fromOneBased(model.getFilteredShowList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Returns the last index of the show in the {@code model}\u0027s show list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return Index.fromOneBased(model.getFilteredShowList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Returns the Show in the {@code model}\u0027s show list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static Show getShow(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return model.getFilteredShowList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 8,
      "heze8": 3,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static final Index INDEX_FIRST_SHOW \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static final Index INDEX_SECOND_SHOW \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static final Index INDEX_THIRD_SHOW \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 3,
      "heze8": 2,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/testutil/TypicalShows.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.WatchList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": " * A utility class containing a list of {@code Show} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class TypicalShows {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static final Show JOKER \u003d new ShowBuilder().withName(\"Joker\").withDescription("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            \"Forever alone in a crowd, failed comedian Arthur Fleck seeks connection as he walks the streets of Gotham \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                    + \"City. Arthur wears two masks -- the one he paints for his day job as a clown, and the guise he \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                    + \"projects in a futile attempt to feel like he\u0027s part of the world around him. Isolated, bullied \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                    + \"and disregarded by society, Fleck begins a slow descent into madness as he transforms into the \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                    + \"criminal mastermind known as the Joker.\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    ).withIsWatched(false).withDateOfRelease(\"3 october 2019\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            .withRunningTime(122).withActors(\"Joaquin Phoenix\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static final Show AVENGERSENDGAME \u003d new ShowBuilder().withName(\"Avenger Endgame\").withDescription(\"\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            + \"Adrift in space with no food or water, Tony Stark sends a message to Pepper Potts as his oxygen supply \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            + \"starts to dwindle. Meanwhile, the remaining Avengers -- Thor, Black Widow, Captain America and Bruce \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            + \"Banner -- must figure out a way to bring back their vanquished allies for an epic showdown with Thanos\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            + \" -- the evil demigod who decimated the planet and the universe.\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "            .withIsWatched(false).withDateOfRelease(\"24 April 2019\").withRunningTime(182).withActors(\"Chris Hemsworth\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /*public static final Show BLACKPANTHER \u003d new ShowBuilder().withName(\"Black Panther\").withDescription(\"After the\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            + \" death of his father, T\u0027Challa returns home to the African nation of Wakanda to take his rightful place\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            + \" as king. When a powerful enemy suddenly reappears, T\u0027Challa\u0027s mettle as king -- and as Black Panther\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            + \" -- gets tested when he\u0027s drawn into a conflict that puts the fate of Wakanda and the entire world at\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            + \" risk. Faced with treachery and danger, the young king must rally his allies and release the full power\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            + \" of Black Panther to defeat his foes and secure the safety of his people.\").withIsWatched(true)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            .withDateofRelease(\"29 January 2018\").withRunningTime(135).withActors(\"Chadwick Boseman\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "*/"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static final Show FIGHTCLUB \u003d new ShowBuilder().withName(\"Fight Club\").withDescription("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            \"A depressed man (Edward Norton) suffering from insomnia meets a strange soap salesman named Tyler Durden \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                    + \"(Brad Pitt) and soon finds himself living in his squalid house after his perfect apartment is \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                    + \"destroyed. The two bored men form an underground club with strict rules and fight other men who \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                    + \"are fed up with their mundane lives. Their perfect partnership frays when Marla (Helena Bonham\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                    + \" Carter), a fellow support group crasher, attracts Tyler\u0027s attention.\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            .withIsWatched(true).withDateOfRelease(\"4 Nov 1999\").withRunningTime(151).withActors().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        // Manually added - Show\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        public static final Show SAVINGPRIVATERYAN \u003d new ShowBuilder().withName(\"Saving Private Ryan\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                .withDescription("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                \"Captain John Miller (Tom Hanks) takes his men behind enemy lines to find Private James\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + \" Ryan, whose three brothers have been killed in combat. Surrounded by the brutal realties of\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + \" war, while searching for Ryan, each man embarks upon a personal journey and discovers their\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                + \" own strength to triumph over an uncertain future with honor, decency and courage.\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                .withIsWatched(false).withDateofRelease(\"Saving Private Ryan\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "                .withRunningTime(170).withActors(\"Tom Hanks\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static final Show GODFATHER2 \u003d new ShowBuilder().withName(\"God Father 2\").withDescription(\"The compelling\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            + \" sequel to \\\"The Godfather,\\\" contrasting the life of Corleone father and son. Traces the problems \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            + \"of Michael Corleone (Al Pacino) in 1958 and that of a young immigrant Vito Corleone (Robert De Niro) \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            + \"in 1917\u0027s Hell\u0027s Kitchen. Michael survives many misfortunes and Vito is introduced to a life of crime.\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            .withIsWatched(true).withDateOfRelease(\"12 December 1974\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            .withRunningTime(202).withActors(\"Al Pacino\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private TypicalShows() {} // prevents instantiation"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Returns an {@code WatchList} with all the typical show."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static WatchList getTypicalWatchList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        WatchList wl \u003d new WatchList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        for (Show show : getTypicalShow()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "            wl.addShow(show);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return wl;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public static List\u003cShow\u003e getTypicalShow() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(JOKER, AVENGERSENDGAME, FIGHTCLUB,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "                GODFATHER2));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jcjjjared"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 56,
      "jcjjjared": 8,
      "heze8": 1,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/testutil/WatchListBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.WatchList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "import seedu.ezwatchlist.model.show.Show;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": " * A utility class to help with building WatchList objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": " *     {@code WatchList wl \u003d new WatchListBuilder().withShow(show).build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "public class WatchListBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    private WatchList watchList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public WatchListBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        watchList \u003d new WatchList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public WatchListBuilder(WatchList watchlist) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        this.watchList \u003d watchlist;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "     * Adds a new {@code show} to the {@code WatchList} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public WatchListBuilder withShow(Show show) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        watchList.addShow(show);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "    public WatchList build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongchuankai"
        },
        "content": "        return watchList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongchuankai": 15,
      "heze8": 1,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/ezwatchlist/ui/UiPartTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package seedu.ezwatchlist.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static seedu.ezwatchlist.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "import seedu.ezwatchlist.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003c?import seedu.ezwatchlist.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003cfx:root type\u003d\"seedu.ezwatchlist.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "heze8": 1,
      "-": 5
    }
  }
]
